package compiler.parser;

import java_cup.runtime.Symbol;

class Parser;

parser code {:
 
    public void report_error(String message, Object info)
    {
        StringBuilder sb = new StringBuilder();
        sb.append("ERROR: ");
        sb.append(message).append(". ");

        if (info instanceof Symbol)
        {
            Symbol s = ((Symbol) info);
            sb.append("Token ").append(s.value);

            if (s.left >= 0)
            {                
                sb.append(" in line ").append(s.left);
                if (s.right >= 0)
                {
                    sb.append(", column ").append(s.right).append(".");
                }
            }
        }

        System.err.println(sb);
    }
   
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        System.exit(1);    
    }

    public void syntax_error(Object current_token)
    {
        report_error("Syntax Error", current_token); 
    }

    public void unrecovered_syntax_error(Object current_token)
    {
        report_fatal_error("Couldn't repair and continue parse", current_token);
    }
    
:};

/* Terminals (tokens returned by the scanner). */

// Paréntesis.
terminal LPAREN, RPAREN, LBRACKET, RBRACKET;

// Operadores aritméticos y de asignación.
terminal PLUS, PLUS_PLUS, MINUS, MINUS_MINUS, DIV, TIMES, MOD, ASSIGNMENT, PLUS_EQUALS, MINUS_EQUALS, DIV_EQUALS, TIMES_EQUALS;

// Operadores de comparación.
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_EQUALS_THAN, LESS_EQUALS_THAN;

// Operadores lógicos.
terminal AND, OR, XOR, NOT;

// Operadores de bit.
terminal SHIFT_LEFT, SHIFT_RIGHT, SHIFT_LEFT_EQUALS, SHIFT_RIGHT_EQUALS;

// Palabras reservadas.
terminal ARRAY, BEGIN, BOOLEAN, BYTE, CASE, CHAR, CONST, DO, DOWNTO, ELSE, END, FILE, FOR, FORWARD, FUNCTION, GOTO, IF, IN, INLINE, INT, LABEL, LONGINT, OF, PACKED, PROCEDURE, PROGRAM, READ, REAL, RECORD, REPEAT, SET, SHORTINT, STRING, THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, WRITE;

// Otros
terminal SEMI, COMMA, COLON, DOT;

// Terminales con valor.
terminal Object NIL;
terminal Integer NUMBER;
terminal Double DOUBLE;
terminal String XSTRING;
terminal Byte XBYTE;
terminal Character CHARACTER;
terminal Object IDENTIFIER;
terminal Boolean TRUE, FALSE;

/* Non terminals */
non terminal number_term, literal_term, boolean_term, term;
non terminal expr, number_expr, identifier_expr, byte_expr, literal_expr, assignment_operator, assignment_expr, function_call;
non terminal condition_operator, condition_list_operator, condition, condition_list;
non terminal identifier_list, data_type, array_data_type;
non terminal variable_declaration, variable_declaration_list, variable_declaration_block, declaration_block;
non terminal constant_declaration, constant_declaration_list, constant_declaration_block;
non terminal parameter, parameter_list, parameter_declaration_list, parameter_declaration;
non terminal function_block, function, procedure_block, procedure;
non terminal code_block_item, code_block, sentence, sentence_item;
non terminal for_statement, while_statement, repeat_statement, if_statement, case_statement, case_list, case_item;
non terminal function_item, function_list, functions_declaration, program;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left AND, OR, XOR;
precedence left LPAREN, RPAREN;
precedence left PLUS_PLUS, MINUS_MINUS;

start with program;

number_term ::= NUMBER | DOUBLE;

literal_term ::= XSTRING | CHARACTER;

boolean_term ::= TRUE | FALSE;

term ::= number_term
       | literal_term
       | boolean_term
       | BYTE
       | IDENTIFIER
       | NIL;

expr ::=  LPAREN expr RPAREN
        | function_call
        | number_expr 
        | identifier_expr 
        | byte_expr
        | literal_expr 
        | boolean_term
        | NIL;

number_expr ::= number_expr PLUS number_expr
              | number_expr MINUS number_expr
              | number_expr TIMES number_expr
              | number_expr DIV number_expr
              | number_expr MOD number_expr
              | MINUS number_expr
              | number_term:n1 error:e number_term:n2 {: report_error("Invalid operator " + e, n1); :}
              | number_term;

identifier_expr ::= IDENTIFIER PLUS_PLUS
                | IDENTIFIER MINUS_MINUS
                | PLUS_PLUS IDENTIFIER
                | MINUS_MINUS IDENTIFIER
                | IDENTIFIER;

byte_expr ::= byte_expr SHIFT_LEFT NUMBER
            | byte_expr SHIFT_RIGHT NUMBER
            | XBYTE;

literal_expr ::= literal_expr PLUS literal_expr
               | literal_term;


assignment_operator ::= ASSIGNMENT
                        | PLUS_EQUALS
                        | MINUS_EQUALS
                        | DIV_EQUALS
                        | TIMES_EQUALS
                        | SHIFT_LEFT_EQUALS
                        | SHIFT_RIGHT_EQUALS;

assignment_expr ::= IDENTIFIER assignment_operator expr
                  | IDENTIFIER assignment_operator {: report_error("Expected expression", null); :}
                  | assignment_operator expr {: report_error("Expected identifier", null); :}
                  | assignment_operator {: report_error("Expected identifier and expression", null); :};

condition_operator ::= EQUALS
                    | NOT_EQUALS
                    | GREATER_THAN
                    | LESS_THAN
                    | GREATER_EQUALS_THAN
                    | LESS_EQUALS_THAN;

condition ::= LPAREN condition RPAREN
            | expr condition_operator expr 
            | expr
            | condition_operator expr {: report_error("Expected expression", null); :};

condition_list_operator ::= AND | OR | XOR;

condition_list ::= LPAREN condition_list RPAREN
                 | condition_list condition_list_operator condition_list
                 | NOT condition_list
                 | condition
                 | condition_list_operator condition_list {: report_error("Missing condition", null); :}
                 | NOT error {: report_error("Missing condition", null); :};

identifier_list ::= identifier_list COMMA IDENTIFIER
                  | identifier_list IDENTIFIER {: report_error("Missing comma", null); :}
                  | identifier_list COMMA error {: report_error("Missing identifier", null); :}
                  | IDENTIFIER;

data_type ::= STRING | CHAR | REAL | BYTE | INT | LONGINT | SHORTINT | BOOLEAN;

array_data_type ::= CHAR | INT | LONGINT | SHORTINT;

variable_declaration  ::= identifier_list COLON data_type SEMI
               | identifier_list COLON ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF array_data_type SEMI
               | identifier_list data_type SEMI {: report_error("Missing colon", null); :}
               | identifier_list COLON SEMI {: report_error("Missing data type", null); :};

variable_declaration_list ::= variable_declaration_list variable_declaration 
                   | variable_declaration;

variable_declaration_block ::= VAR variable_declaration_list END | /* Epsilon */ ;

constant_declaration ::= IDENTIFIER EQUALS expr SEMI
                    | IDENTIFIER expr SEMI {: report_error("Missing operator", null); :}
                    | IDENTIFIER EQUALS SEMI {: report_error("Missing espression", null); :};

constant_declaration_list ::= constant_declaration_list constant_declaration
                            | constant_declaration;

constant_declaration_block ::= CONST constant_declaration_list END | /* Epsilon */ ;

declaration_block ::= constant_declaration_block variable_declaration_block;

parameter_declaration ::= data_type IDENTIFIER
                       | error IDENTIFIER {: report_error("Missing data type", null); :}
                       | data_type error{: report_error("Missing identifier", null); :};

parameter_declaration_list ::= parameter_declaration_list COMMA parameter_declaration
                 | parameter_declaration_list parameter_declaration {: report_error("Missing comma", null); :}
                 | parameter_declaration;

parameter_list ::= parameter_list COMMA expr
                | parameter_list COMMA error {: report_error("Missing expression", null); :}
                | expr
                | /* Epsilon */;

sentence_item ::= assignment_expr | expr;

sentence ::= sentence_item SEMI; /*Falta poner si no viene punto y coma*/

code_block_item ::= sentence | for_statement | while_statement | repeat_statement | if_statement | case_statement;

code_block ::= code_block code_block_item
             | code_block_item;

for_statement ::= FOR IDENTIFIER ASSIGNMENT expr TO expr DO BEGIN code_block END
                | FOR ASSIGNMENT expr TO expr DO BEGIN code_block END {: report_error("Missing identifier", null); :}
                | FOR IDENTIFIER expr TO expr DO BEGIN code_block END {: report_error("Missing assignment", null); :}
                | FOR IDENTIFIER ASSIGNMENT TO expr DO BEGIN code_block END {: report_error("Missing expression", null); :}
                | FOR IDENTIFIER ASSIGNMENT expr expr DO BEGIN code_block END {: report_error("Missing reserved word", null); :}
                | FOR IDENTIFIER ASSIGNMENT expr TO error DO BEGIN code_block END {: report_error("Missing expression", null); :};
                   /*Faltaría poner si no viene  ni expr después de TO o si no viene DO
                    tal vez se pueda hacer algo más general como:
                    FOR error ASSIGNMENT error TO error DO BEGIN code_block END {: report_error("Error in For statement (o algo así)", null); :};
                    o estoy mamando...no sé*/

/*Con los siguientes sería casi lo mismo que con el for*/
while_statement ::= WHILE condition_list DO BEGIN code_block END;

repeat_statement ::= REPEAT code_block UNTIL condition_list;

if_statement ::= IF condition_list THEN sentence ELSE sentence
                | IF condition_list THEN sentence; 

case_item ::= expr COLON sentence;

case_list ::= case_list case_item
            | case_item;

case_statement ::= CASE IDENTIFIER OF case_list ELSE sentence;

/*************************************************************/

function ::= FUNCTION IDENTIFIER LPAREN parameter_declaration_list RPAREN COLON data_type BEGIN declaration_block code_block END;

procedure ::= PROCEDURE IDENTIFIER LPAREN parameter_declaration_list RPAREN BEGIN declaration_block code_block END;

function_item ::= function | procedure;

function_list ::= function_list function_item
                | function_item;

functions_declaration ::= function_list | /* Epsilon */;

function_call ::= IDENTIFIER LPAREN parameter_list RPAREN;

program ::= PROGRAM IDENTIFIER declaration_block functions_declaration BEGIN code_block END;
