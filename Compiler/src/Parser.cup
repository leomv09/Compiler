package compiler.parser;

import java_cup.runtime.Symbol;
import compiler.scanner.Lexer;
import compiler.SemanticAnalysisResult;
import java.util.List;
import java.util.LinkedList;

class Parser;

parser code {:

    private SymbolTable table;
    private SyntacticAnalysisResult syntax_result;
    private SemanticAnalysisResult semantic_result;
    private boolean generateCode;

    public SyntacticAnalysisResult getSyntacticResult()
    {
        return this.syntax_result;
    }

    public SemanticAnalysisResult getSemanticResult()
    {
        return this.semantic_result;
    }

    public void setGenerateCode(boolean flag)
    {
        this.generateCode = flag;
    }

    public int error_sync_size()
    {
        return 1;
    }
 
    public void report_error(String message, Object info)
    {
        if (info == null)
        {
            Lexer scanner = ((Lexer) this.getScanner());
            info = scanner.getLastToken();
        }
        if (info instanceof Symbol)
        {
            Symbol s = ((Symbol) info);
            this.syntax_result.addError(message, s);
        }
    }
   
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        this._done_parsing = true;
    }

    public void syntax_error(Symbol current_token)
    {
    }

    public void unrecovered_syntax_error(Symbol current_token)
    {
        report_fatal_error("Couldn't repair and continue parse", current_token);
    }

:};

init with {:

    this.table = new SymbolTable();
    this.syntax_result = new SyntacticAnalysisResult();
    this.semantic_result = new SemanticAnalysisResult();
    this.generateCode = true;

:}

/* Terminals (tokens returned by the scanner). */

// Paréntesis.
terminal LPAREN, RPAREN, LBRACKET, RBRACKET;

// Operadores aritméticos y de asignación.
terminal PLUS, PLUS_PLUS, MINUS, MINUS_MINUS, DIV, TIMES, MOD, ASSIGNMENT, PLUS_EQUALS, MINUS_EQUALS, DIV_EQUALS, TIMES_EQUALS;

// Operadores de comparación.
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_EQUALS_THAN, LESS_EQUALS_THAN;

// Operadores lógicos.
terminal AND, OR, XOR, NOT;

// Operadores de bit.
terminal SHIFT_LEFT, SHIFT_RIGHT, SHIFT_LEFT_EQUALS, SHIFT_RIGHT_EQUALS;

// Palabras reservadas.
terminal BEGIN, CASE, CONST, DO, DOWNTO, ELSE, END, FILE, FOR, FORWARD, GOTO, IF, IN, INLINE, LABEL, OF, PACKED, PROGRAM, READ, RECORD, REPEAT, SET, THEN, TO, TYPE, UNTIL, VAR, WHILE, WITH, WRITE;

// Otros
terminal SEMI, COMMA, COLON, DOT;

// Terminales con valor.
terminal Integer ARRAY, BOOLEAN, BYTE, CHAR, FUNCTION, PROCEDURE, INT, LONGINT, REAL, SHORTINT, STRING;
terminal Object NIL;
terminal Integer NUMBER;
terminal Double DOUBLE;
terminal String XSTRING;
terminal Byte XBYTE;
terminal Character CHARACTER;
terminal String IDENTIFIER;
terminal Boolean TRUE, FALSE;

/* Non terminals */
non terminal Object term, expr, identifier_expr, assignment_expr;
non terminal Boolean boolean_term;
non terminal Double number_term, number_expr;
non terminal Byte byte_expr;
non terminal String literal_term, literal_expr;
non terminal Integer data_type, array_data_type;
non terminal List<String> identifier_list;
non terminal TableRow parameter_declaration, constant_declaration;
non terminal List<TableRow> variable_declaration;
non terminal List<TableRow> parameter_declaration_list, variable_declaration_list, constant_declaration_list;
non terminal List<TableRow> variable_declaration_block, constant_declaration_block, declaration_block;

non terminal assignment_operator, condition_operator, condition_list_operator;
non terminal function_write, function_read, function_call;
non terminal condition, condition_list;
non terminal List parameter_list,parameter_list_forced;
non terminal sentence_item, sentence, code_block_item, code_block, return_block;
non terminal case_item, case_list;
non terminal for_statement, while_statement, repeat_statement, if_statement, case_statement;
non terminal function, procedure, function_block, procedure_block;
non terminal function_item, function_list, functions_declaration, program;

/* Precedences */
precedence left AND, OR, XOR;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left LPAREN, RPAREN;
precedence left PLUS_PLUS, MINUS_MINUS;

start with program;

assignment_operator ::=
    ASSIGNMENT
    | PLUS_EQUALS
    | MINUS_EQUALS
    | DIV_EQUALS
    | TIMES_EQUALS
    | SHIFT_LEFT_EQUALS
    | SHIFT_RIGHT_EQUALS;

condition_list_operator ::=
    AND
    | OR
    | XOR;

condition_operator ::=
    EQUALS
    | NOT_EQUALS
    | GREATER_THAN
    | LESS_THAN
    | GREATER_EQUALS_THAN
    | LESS_EQUALS_THAN;

data_type ::=
    STRING:type     {: RESULT = type; :}
    | CHAR:type     {: RESULT = type; :}
    | REAL:type     {: RESULT = type; :}
    | BYTE:type     {: RESULT = type; :}
    | INT:type      {: RESULT = type; :}
    | LONGINT:type  {: RESULT = type; :}
    | SHORTINT:type {: RESULT = type; :}
    | BOOLEAN:type  {: RESULT = type; :};

array_data_type ::=
    CHAR:type           {: RESULT = type; :}
    | INT:type          {: RESULT = type; :}
    | LONGINT:type      {: RESULT = type; :}
    | SHORTINT:type     {: RESULT = type; :};

number_term ::=
    NUMBER:n    {: RESULT = n.doubleValue(); :}
    | DOUBLE:d  {: RESULT = d; :};

literal_term ::=
    XSTRING:s       {: RESULT = s; :}
    | CHARACTER:c   {: RESULT = c.toString(); :};

boolean_term ::=
    TRUE    {: RESULT = Boolean.TRUE; :} 
    | FALSE {: RESULT = Boolean.FALSE; :};

term ::=
    number_term:t       {: RESULT = t; :}
    | literal_term:t    {: RESULT = t; :}
    | boolean_term:t    {: RESULT = t; :}
    | XBYTE:t           {: RESULT = t; :}
    | IDENTIFIER:t      {: RESULT = t; :}
    | NIL:t             {: RESULT = t; :};

expr ::=
    LPAREN expr:e RPAREN      {: RESULT = e; :}
    | function_call:f         {: RESULT = f; :}
    | number_expr:e           {: RESULT = e; :}
    | identifier_expr:e       {: RESULT = e; :}
    | byte_expr:e             {: RESULT = e; :}
    | literal_expr:e          {: RESULT = e; :}
    | boolean_term:t          {: RESULT = t; :}
    | NIL:n                   {: RESULT = n; :}
    | expr:e1 PLUS expr:e2
    {:
        if (e1 instanceof Double && e2 instanceof Double)
        {
            RESULT = ((Double) e1) + ((Double) e2);
        }
        else if (e1 instanceof String && e2 instanceof String)
        {
            RESULT = ((String) e1) + ((String) e2);
        }
        else
        {
            report_error("Bad operant for operator +.", null);
        }
    :};

number_expr ::=
    number_expr:e1 PLUS number_expr:e2      {: RESULT = e1 + e2; :}
    | number_expr:e1 MINUS number_expr:e2   {: RESULT = e1 - e2; :}
    | number_expr:e1 TIMES number_expr:e2   {: RESULT = e1 * e2; :}
    | number_expr:e1 DIV number_expr:e2     {: RESULT = e1 / e2; :}
    | number_expr:e1 MOD number_expr:e2     {: RESULT = e1 % e2; :}
    | MINUS number_expr:e                   {: RESULT = -e; :}
    | number_term:t                         {: RESULT = t; :}
    | number_term:n1 error:e number_term:n2 {: report_error("Invalid operator " + e + " in expression.", null); :};

identifier_expr ::=
    IDENTIFIER:id PLUS_PLUS
    {:
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if(row.getValue() != null)
            {
                if (row.getValue() instanceof Number)
                {
                    Double value = (Double) row.getValue(); //Get the value from the row.
                    RESULT = value;
                    row.setValue(value++);
                }
                else
                {
                    report_error("Bad operand " + row.getTypeName() + " for operator ++.", null);
                }
            }
            else
            {
                report_error("Variable not initialized" , null);
            }

                    
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | IDENTIFIER:id MINUS_MINUS
    {:
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                RESULT = value;
                row.setValue(--value);
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator --.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | PLUS_PLUS IDENTIFIER:id
    {:
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                row.setValue(++value);
                RESULT = value;
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator ++.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | MINUS_MINUS IDENTIFIER:id
    {:
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                row.setValue(--value);
                RESULT = value;
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator --.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
   :}
    | IDENTIFIER:id
    {:
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            RESULT = row.getValue();
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
   :};

byte_expr ::=
    byte_expr:b SHIFT_LEFT NUMBER:n     {: RESULT = new Byte((byte) (b << n)); :}
    | byte_expr:b SHIFT_RIGHT NUMBER:n  {: RESULT = new Byte((byte) (b >> n)); :}
    | XBYTE:b                           {: RESULT = new Byte(b); :};

literal_expr ::=
    literal_expr:e1 PLUS literal_expr:e2    {: RESULT = e1 + e2; :}
    | literal_term:l                        {: RESULT = l; :};

assignment_expr ::= 
    IDENTIFIER:id assignment_operator expr:e
    {:
        try
        {
            TableRow row  = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            row.setValue(e);
            RESULT = e;
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | IDENTIFIER:i assignment_operator {: report_error("Expected expression in assigment of " + i + " .", null); :}
    | assignment_operator expr {: report_error("Expected identifier in assigment.", null); :}
    | assignment_operator {: report_error("Expected identifier and expression in assigment.", null); :};

condition ::=
    LPAREN condition RPAREN
    | expr condition_operator expr 
    | expr
    | condition_operator expr {: report_error("Expected expression in condition.", null); :};

condition_list ::=
    LPAREN condition_list RPAREN
    | condition_list condition_list_operator condition_list
    | NOT condition_list
    | condition
    | condition_list_operator condition_list {: report_error("Missing condition in condition list.", null); :}
    | NOT error {: report_error("Missing condition in condition list.", null); :};

identifier_list ::=
    identifier_list:il COMMA IDENTIFIER:id
    {:
        il.add(id);
        RESULT = il;
    :}
    | IDENTIFIER:id
    {:
        List<String> list = new LinkedList();
        list.add(id);
        RESULT = list;  
    :}
    | identifier_list IDENTIFIER {: report_error("Missing comma in identifier list.", null); :}
    | identifier_list COMMA error {: report_error("Missing identifier in identifier list.", null); :};

variable_declaration  ::= 
    identifier_list:il COLON data_type:type SEMI
    {:
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           TableRow row = new TableRow(id, type);
           list.add(row);
       }
       RESULT = list;
    :}
    | identifier_list:il COLON ARRAY:type LBRACKET NUMBER:n1 DOT DOT NUMBER:n2 RBRACKET OF array_data_type:array_type SEMI
    {:
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           ArrayTableRow row = new ArrayTableRow(id, type, array_type, n2 - n1);
           list.add(row);
       }
       RESULT = list;
    :}
    | identifier_list data_type SEMI {: report_error("Missing colon in declaration.", null); :}
    | identifier_list COLON SEMI {: report_error("Missing data type in declaration.", null); :};

variable_declaration_list ::=
    variable_declaration_list:list variable_declaration:v
    {:
        list.addAll(v);
        RESULT = list;
    :}
    | variable_declaration:v
    {:
        RESULT = v;
    :};

variable_declaration_block ::=
    VAR variable_declaration_list:list END
    {:
        RESULT = list;
    :}
    | /* Epsilon */
    {:
        RESULT = new LinkedList();
    :};

constant_declaration ::=
    IDENTIFIER:id EQUALS expr:e SEMI
    {:
        TableRow row = new TableRow(id, -1, e, true);
        RESULT = row;
    :}
    | IDENTIFIER expr SEMI {: report_error("Missing operator in declaration.", null); :}
    | IDENTIFIER EQUALS SEMI {: report_error("Missing espression in declaration.", null); :};

constant_declaration_list ::=
    constant_declaration_list:list constant_declaration:c
    {:
        list.add(c);
        RESULT = list;
    :}
    | constant_declaration:c
    {:
        List<TableRow> list = new LinkedList();
        list.add(c);
        RESULT = list;
    :};

constant_declaration_block ::=
    CONST constant_declaration_list:list END
    {:
        RESULT = list;
    :}
    | /* Epsilon */
    {:
        RESULT = new LinkedList();
    :};

declaration_block ::=
    constant_declaration_block:l1 variable_declaration_block:l2
    {:
        List<TableRow> list = new LinkedList();
        list.addAll(l1);
        list.addAll(l2);

        for (TableRow row : list)
        {
            table.declareSymbol(row);
        }

        RESULT = list;
    :};

parameter_declaration ::= data_type:type IDENTIFIER:id
    {:
          RESULT = new TableRow(id, type);
    :}
    | error IDENTIFIER {: report_error("Missing data type in paramater declaration.", null); :}
    | data_type error {: report_error("Missing identifier in parameter declaration.", null); :};

parameter_declaration_list ::= 
    parameter_declaration_list:l COMMA parameter_declaration:p
    {:
        l.add(p);
        table.declareSymbol(p);
        RESULT = l;
    :}
    | parameter_declaration:p
    {:
         List<TableRow> list = new LinkedList();
         list.add(p);
         table.pushScope();
         table.declareSymbol(p);
         RESULT = list;
    :}
    | /* Epsilon */
    {:
         RESULT = new LinkedList();
    :};

parameter_list_forced ::=
    parameter_list_forced:pl COMMA expr:e
    {:
         pl.add(e);
         RESULT = pl;
    :}
    | expr:e
    {:
         List<Object> list = new LinkedList();
         list.add(e);
         RESULT = list;
    :};

parameter_list ::= 
    parameter_list:pl COMMA expr:e
    {:
         pl.add(e);
         RESULT = pl;
    :}
    | expr:e
    {:
         List<Object> list = new LinkedList();
         list.add(e);
         RESULT = list;
    :}
    | /* Epsilon */
    {:
         RESULT = new LinkedList();
    :}
    | error {: report_error("Missing expression in parameter list.", null); :};

sentence_item ::= assignment_expr | expr;

sentence ::= sentence_item SEMI;

code_block_item ::= sentence | for_statement | while_statement | repeat_statement | if_statement | case_statement;

code_block ::= code_block code_block_item | code_block_item;

for_statement ::=
    FOR IDENTIFIER:id ASSIGNMENT expr:e TO expr DO BEGIN code_block END
    {:
        try
        {
            TableRow row = new TableRow(id, ParserSym.INT);
            row.setValue(e);
            table.declareSymbol(row); //Saves the new row in the symbols table.
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | FOR ASSIGNMENT expr TO expr DO BEGIN code_block END {: report_error("Missing identifier in for statement.", null); :}
    | FOR IDENTIFIER expr TO expr DO BEGIN code_block END {: report_error("Missing assignment in for statement.", null); :}
    | FOR IDENTIFIER ASSIGNMENT TO expr DO BEGIN code_block END {: report_error("Missing expression in for statement.", null); :}
    | FOR IDENTIFIER ASSIGNMENT expr expr DO BEGIN code_block END {: report_error("Missing reserved word in for statement.", null); :}
    | FOR IDENTIFIER ASSIGNMENT expr TO error DO BEGIN code_block END {: report_error("Missing expression in for statement.", null); :};

while_statement ::= 
    WHILE condition_list DO BEGIN code_block END
    | WHILE error END {: report_error("Error in while statement.", null); :};

repeat_statement ::=
    REPEAT code_block UNTIL condition_list
    | REPEAT code_block UNTIL error {: report_error("Missing condition in repeat statement.", null); :};

if_statement ::= 
    IF condition_list THEN code_block ELSE code_block END
    | IF condition_list THEN code_block END
    | IF condition_list THEN error {: report_error("Missing sentence in if statement.", null); :}
    | IF condition_list THEN code_block ELSE error {: report_error("Missing else sentence in if statement.", null); :};

case_item ::=
    expr COLON sentence
    | expr sentence {: report_error("Missing colon in case item.", null); :}
    | expr COLON error {: report_error("Missing sentence in case item.", null); :}
    | COLON sentence {: report_error("Missing expression in case item.", null); :};

case_list ::= case_list case_item | case_item;

case_statement ::= 
    CASE IDENTIFIER OF case_list ELSE sentence
    | CASE error ELSE {: report_error("Error in case statement.", null); :}
    | CASE IDENTIFIER OF case_list ELSE error {: report_error("Invalid sentence in case statement.", null); :};

return_block ::= IDENTIFIER:id assignment_operator expr:e {: RESULT = e; :};

function ::= 
    FUNCTION IDENTIFIER:id LPAREN parameter_declaration_list:p RPAREN COLON data_type:dt BEGIN declaration_block:vars code_block return_block:rb END
    {:
        FunctionTableRow functionRow = new FunctionTableRow(id, ParserSym.FUNCTION, dt);
        functionRow.setParameters(p);

        if((functionRow.getReturnDataType()).isAssignableFrom(rb.getClass()))
        {
            table.declareSymbol(functionRow);
            table.popScope();
        }
        else
        {
            report_error("Incompatible return data type.", null);
        }
        
    :}
    | FUNCTION error END {: report_error("Error in function declaration.", null); :};

procedure ::=
    PROCEDURE IDENTIFIER:id LPAREN parameter_declaration_list:p RPAREN BEGIN declaration_block:vars code_block END
    {:
        FunctionTableRow procedureRow = new FunctionTableRow(id, ParserSym.PROCEDURE, ParserSym.NIL);
        procedureRow.setParameters(p);
        table.declareSymbol(procedureRow);
        table.popScope();
    :}
    | PROCEDURE error END  {: report_error("Error in procedure declaration.", null); :} ;

function_item ::= function | procedure;

function_list ::= function_list function_item | function_item;

functions_declaration ::= function_list | /* Epsilon */;

function_read ::= READ LPAREN parameter_list RPAREN;

function_write ::=
    WRITE LPAREN parameter_list_forced RPAREN
    | WRITE LPAREN RPAREN {: report_error("Function write must have at least one parameter.", null); :};

function_call ::=
    IDENTIFIER:id LPAREN parameter_list:pl RPAREN
    {:
        try
        {
            FunctionTableRow functionRow  = (FunctionTableRow) table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            List<TableRow> functionParameters = functionRow.getParameters();
            int expectedParameters = functionParameters.size();
            int givenParameters = pl.size();
            if(givenParameters == expectedParameters)
            {
                for(int i = 0; i < expectedParameters; i++)
                {//Set the value for each parameter of the function, acording to the values given in the parameter list in the function call.
                    TableRow parameterRow = functionParameters.get(i);
                    parameterRow.setValue(pl.get(i));
                }
            }
            else
            {
                report_error("Argument list difer in length. Expected "+expectedParameters +" Got " + givenParameters, null);
            }           
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    :}
    | function_write
    | function_read;

program ::=
    PROGRAM IDENTIFIER declaration_block:vars functions_declaration BEGIN code_block END
    {:
        table.pushScope();
        table.popScope();
    :}
    | error {: report_error("Error in program.", null); :} ;