
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package compiler.parser;

import java_cup.runtime.Symbol;
import compiler.scanner.Lexer;
import compiler.SemanticAnalysisResult;
import java.util.List;
import java.util.LinkedList;
import compiler.parser.Condition;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\002\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\007\003\000\002\007\003\000\002\012\003" +
    "\000\002\012\003\000\002\006\003\000\002\006\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\003\000\002\010\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\013\005\000\002\013" +
    "\003\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\003\000\002\046" +
    "\004\000\002\045\005\000\002\045\005\000\002\045\004" +
    "\000\002\045\003\000\002\045\004\000\002\045\004\000" +
    "\002\016\005\000\002\016\003\000\002\016\004\000\002" +
    "\016\005\000\002\021\006\000\002\021\016\000\002\021" +
    "\005\000\002\021\005\000\002\023\004\000\002\023\003" +
    "\000\002\025\005\000\002\025\002\000\002\020\006\000" +
    "\002\020\005\000\002\020\005\000\002\024\004\000\002" +
    "\024\003\000\002\026\005\000\002\026\002\000\002\027" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\022\005\000\002\022\003\000\002\022\002\000" +
    "\002\031\005\000\002\031\003\000\002\030\005\000\002" +
    "\030\003\000\002\030\002\000\002\030\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\004\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\057\004\000\002" +
    "\057\003\000\002\054\003\000\002\054\004\000\002\054" +
    "\004\000\002\055\004\000\002\055\003\000\002\061\014" +
    "\000\002\061\013\000\002\061\013\000\002\061\013\000" +
    "\002\061\013\000\002\061\014\000\002\062\010\000\002" +
    "\062\005\000\002\063\006\000\002\063\006\000\002\056" +
    "\011\000\002\056\007\000\002\056\006\000\002\056\010" +
    "\000\002\052\005\000\002\052\004\000\002\052\005\000" +
    "\002\052\004\000\002\053\004\000\002\053\003\000\002" +
    "\064\010\000\002\064\005\000\002\064\010\000\002\051" +
    "\005\000\002\032\016\000\002\032\005\000\002\033\013" +
    "\000\002\033\005\000\002\034\003\000\002\034\003\000" +
    "\002\035\004\000\002\035\003\000\002\036\003\000\002" +
    "\036\002\000\002\043\006\000\002\042\006\000\002\042" +
    "\005\000\002\044\006\000\002\044\003\000\002\044\003" +
    "\000\002\065\011\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\006\003\005\063\006\001\002\000\004\002" +
    "\u0147\001\002\000\004\002\uff51\001\002\000\004\127\007" +
    "\001\002\000\014\042\uff98\044\010\074\uff98\112\uff98\113" +
    "\uff98\001\002\000\004\127\u013d\001\002\000\100\004\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\052\uff9f" +
    "\055\uff9f\064\uff9f\066\uff9f\074\u011c\075\uff9f\077\uff9f\112" +
    "\uff9f\113\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f\125\uff9f" +
    "\126\uff9f\127\uff9f\130\uff9f\131\uff9f\001\002\000\010\042" +
    "\uff59\112\021\113\017\001\002\000\010\042\uff5e\112\uff5e" +
    "\113\uff5e\001\002\000\010\042\uff5b\112\uff5b\113\uff5b\001" +
    "\002\000\010\042\uff5a\112\021\113\017\001\002\000\004" +
    "\042\u0118\001\002\000\006\003\u010e\127\u010f\001\002\000" +
    "\010\042\uff5d\112\uff5d\113\uff5d\001\002\000\006\003\022" +
    "\127\023\001\002\000\004\050\u010d\001\002\000\004\004" +
    "\024\001\002\000\030\003\035\005\uff91\103\uff91\107\027" +
    "\110\037\111\040\114\025\115\026\116\034\117\030\120" +
    "\031\001\002\000\012\003\uffec\042\uffec\102\uffec\127\uffec" +
    "\001\002\000\012\003\uffeb\042\uffeb\102\uffeb\127\uffeb\001" +
    "\002\000\012\003\uffe9\042\uffe9\102\uffe9\127\uffe9\001\002" +
    "\000\012\003\uffea\042\uffea\102\uffea\127\uffea\001\002\000" +
    "\012\003\ufff0\042\ufff0\102\ufff0\127\ufff0\001\002\000\006" +
    "\005\045\103\044\001\002\000\006\005\uff92\103\uff92\001" +
    "\002\000\012\003\uffee\042\uffee\102\uffee\127\uffee\001\002" +
    "\000\004\127\043\001\002\000\006\003\041\127\042\001" +
    "\002\000\012\003\uffed\042\uffed\102\uffed\127\uffed\001\002" +
    "\000\012\003\uffef\042\uffef\102\uffef\127\uffef\001\002\000" +
    "\006\005\uff94\103\uff94\001\002\000\006\005\uff96\103\uff96" +
    "\001\002\000\006\005\uff95\103\uff95\001\002\000\024\003" +
    "\035\107\027\110\037\111\040\114\025\115\026\116\034" +
    "\117\030\120\031\001\002\000\004\104\046\001\002\000" +
    "\022\107\027\110\037\111\040\114\025\115\026\116\034" +
    "\117\030\120\031\001\002\000\004\042\050\001\002\000" +
    "\074\004\uff98\011\uff98\012\uff98\013\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\040\uff98\041\uff98\043\uff98\044" +
    "\010\052\uff98\055\uff98\064\uff98\066\uff98\074\uff98\075\uff98" +
    "\077\uff98\121\uff98\122\uff98\123\uff98\124\uff98\125\uff98\126" +
    "\uff98\127\uff98\130\uff98\131\uff98\001\002\000\070\004\061" +
    "\011\104\012\065\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\052\064\055\101" +
    "\064\117\066\062\075\121\077\067\121\074\122\111\123" +
    "\057\124\052\125\107\126\070\127\132\130\106\131\130" +
    "\001\002\000\144\004\uffe2\005\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\040\uffe2\041\uffe2\043\uffe2\045\uffe2" +
    "\047\uffe2\050\uffe2\052\uffe2\055\uffe2\064\uffe2\066\uffe2\070" +
    "\uffe2\071\uffe2\073\uffe2\075\uffe2\077\uffe2\100\uffe2\101\uffe2" +
    "\102\uffe2\103\uffe2\104\uffe2\121\uffe2\122\uffe2\123\uffe2\124" +
    "\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\001\002" +
    "\000\042\004\000\011\000\012\000\013\000\064\000\077" +
    "\000\102\000\121\000\122\000\123\000\124\000\125\000" +
    "\126\000\127\000\130\000\131\000\001\002\000\154\003" +
    "\u010a\004\uffc9\005\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\040\uffc9\041\uffc9\043" +
    "\uffc9\045\uffc9\047\uffc9\050\uffc9\052\uffc9\055\uffc9\064\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\073\uffc9\075\uffc9\077\uffc9\100" +
    "\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131" +
    "\uffc9\001\002\000\004\127\u0109\001\002\000\006\003\370" +
    "\127\371\001\002\000\154\003\uffe3\004\uffe3\005\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\047\uffe3\050" +
    "\uffe3\052\uffe3\055\uffe3\064\uffe3\066\uffe3\070\uffe3\071\uffe3" +
    "\073\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\130\uffe3\131\uffe3\001\002\000\070\004" +
    "\061\011\104\012\065\013\055\017\053\020\122\021\113" +
    "\022\072\023\077\040\115\041\076\043\056\052\064\055" +
    "\101\064\117\066\062\075\121\077\067\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\364\130\106\131" +
    "\130\001\002\000\040\004\061\011\104\012\065\013\055" +
    "\064\117\077\067\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\140\130\106\131\130\001\002\000\074" +
    "\004\061\011\104\012\065\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\052\064" +
    "\055\101\064\117\066\062\075\121\077\067\100\204\101" +
    "\200\121\074\122\111\123\057\124\052\125\107\126\070" +
    "\127\132\130\106\131\130\001\002\000\144\004\uff53\005" +
    "\uff53\010\uff53\011\uff53\012\uff53\013\uff53\017\uff53\020\uff53" +
    "\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027" +
    "\uff53\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\040\uff53" +
    "\041\uff53\043\uff53\045\uff53\047\uff53\050\uff53\052\uff53\055" +
    "\uff53\064\uff53\066\uff53\070\uff53\071\uff53\073\uff53\075\uff53" +
    "\077\uff53\100\uff53\101\uff53\102\uff53\103\uff53\104\uff53\121" +
    "\uff53\122\uff53\123\uff53\124\uff53\125\uff53\126\uff53\127\uff53" +
    "\130\uff53\131\uff53\001\002\000\006\017\306\127\307\001" +
    "\002\000\010\012\065\122\111\123\057\001\002\000\144" +
    "\004\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\040\uffd5\041\uffd5\043\uffd5\045\uffd5\047\uffd5\050\uffd5" +
    "\052\uffd5\055\uffd5\064\uffd5\066\uffd5\070\uffd5\071\uffd5\073" +
    "\uffd5\075\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5" +
    "\104\uffd5\121\uffd5\122\uffd5\123\uffd5\124\uffd5\125\uffd5\126" +
    "\uffd5\127\uffd5\130\uffd5\131\uffd5\001\002\000\004\004\276" +
    "\001\002\000\144\004\uffe1\005\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\043\uffe1\045\uffe1" +
    "\047\uffe1\050\uffe1\052\uffe1\055\uffe1\064\uffe1\066\uffe1\070" +
    "\uffe1\071\uffe1\073\uffe1\075\uffe1\077\uffe1\100\uffe1\101\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\121\uffe1\122\uffe1\123\uffe1\124" +
    "\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002" +
    "\000\102\004\uff86\011\uff86\012\uff86\013\uff86\017\uff86\020" +
    "\uff86\021\uff86\022\uff86\023\uff86\040\uff86\041\uff86\043\uff86" +
    "\047\uff86\050\uff86\052\uff86\055\uff86\064\uff86\066\uff86\073" +
    "\uff86\075\uff86\077\uff86\100\uff86\101\uff86\121\uff86\122\uff86" +
    "\123\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86\131" +
    "\uff86\001\002\000\042\004\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\064\ufffd\077\ufffd\102\ufffd\121\ufffd\122\ufffd\123\ufffd\124" +
    "\ufffd\125\ufffd\126\ufffd\127\ufffd\130\ufffd\131\ufffd\001\002" +
    "\000\102\004\uff83\011\uff83\012\uff83\013\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\040\uff83\041\uff83\043\uff83" +
    "\047\uff83\050\uff83\052\uff83\055\uff83\064\uff83\066\uff83\073" +
    "\uff83\075\uff83\077\uff83\100\uff83\101\uff83\121\uff83\122\uff83" +
    "\123\uff83\124\uff83\125\uff83\126\uff83\127\uff83\130\uff83\131" +
    "\uff83\001\002\000\144\004\uffd1\005\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\040\uffd1\041\uffd1\043\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\052\uffd1\055\uffd1\064\uffd1\066\uffd1" +
    "\070\uffd1\071\uffd1\073\uffd1\075\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\104\uffd1\121\uffd1\122\uffd1\123\uffd1" +
    "\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131\uffd1\001" +
    "\002\000\152\004\uffd6\005\uffd6\010\265\011\uffd6\012\266" +
    "\013\uffd6\014\267\015\270\016\264\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\040\uffd6\041" +
    "\uffd6\043\uffd6\045\uffd6\047\uffd6\050\uffd6\052\uffd6\055\uffd6" +
    "\064\uffd6\066\uffd6\070\uffd6\071\uffd6\073\uffd6\075\uffd6\077" +
    "\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\121\uffd6" +
    "\122\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130" +
    "\uffd6\131\uffd6\001\002\000\042\004\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\064\ufffa\077\ufffa\102\ufffa\121\ufffa\122\ufffa\123" +
    "\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\130\ufffa\131\ufffa" +
    "\001\002\000\042\004\ufffc\011\ufffc\012\ufffc\013\ufffc\064" +
    "\ufffc\077\ufffc\102\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc" +
    "\125\ufffc\126\ufffc\127\ufffc\130\ufffc\131\ufffc\001\002\000" +
    "\042\004\061\011\104\012\065\013\055\064\117\077\067" +
    "\102\uffba\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\140\130\106\131\130\001\002\000\064\004\156" +
    "\011\104\012\065\013\055\024\154\025\167\026\157\027" +
    "\173\030\163\031\164\032\160\033\162\034\155\035\161" +
    "\064\117\077\067\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\140\130\106\131\130\001\002\000\150" +
    "\004\uffd4\005\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\036\246\037\245\040\uffd4\041\uffd4\043\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\052\uffd4\055\uffd4\064\uffd4\066\uffd4\070" +
    "\uffd4\071\uffd4\073\uffd4\075\uffd4\077\uffd4\100\uffd4\101\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\121\uffd4\122\uffd4\123\uffd4\124" +
    "\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\001\002" +
    "\000\102\004\uff82\011\uff82\012\uff82\013\uff82\017\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\040\uff82\041\uff82\043\uff82" +
    "\047\uff82\050\uff82\052\uff82\055\uff82\064\uff82\066\uff82\073" +
    "\uff82\075\uff82\077\uff82\100\uff82\101\uff82\121\uff82\122\uff82" +
    "\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82\130\uff82\131" +
    "\uff82\001\002\000\004\127\244\001\002\000\004\102\uff8a" +
    "\001\002\000\144\004\uffe0\005\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0\043\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\052\uffe0\055\uffe0\064\uffe0\066\uffe0\070" +
    "\uffe0\071\uffe0\073\uffe0\075\uffe0\077\uffe0\100\uffe0\101\uffe0" +
    "\102\uffe0\103\uffe0\104\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002" +
    "\000\150\004\uffc0\005\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043\uffc0" +
    "\045\uffc0\047\uffc0\050\uffc0\052\uffc0\055\uffc0\064\uffc0\066" +
    "\uffc0\070\uffc0\071\uffc0\073\uffc0\075\uffc0\077\uffc0\100\uffc0" +
    "\101\uffc0\102\uffc0\103\uffc0\104\uffc0\121\uffc0\122\uffc0\123" +
    "\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0" +
    "\001\002\000\074\004\uff80\011\uff80\012\uff80\013\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\040\uff80\041\uff80" +
    "\043\uff80\047\uff80\050\uff80\052\uff80\055\uff80\064\uff80\066" +
    "\uff80\075\uff80\077\uff80\121\uff80\122\uff80\123\uff80\124\uff80" +
    "\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80\001\002\000" +
    "\154\003\uffe4\004\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\041" +
    "\uffe4\043\uffe4\045\uffe4\047\uffe4\050\uffe4\052\uffe4\055\uffe4" +
    "\064\uffe4\066\uffe4\070\uffe4\071\uffe4\073\uffe4\075\uffe4\077" +
    "\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4\121\uffe4" +
    "\122\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130" +
    "\uffe4\131\uffe4\001\002\000\102\004\uff87\011\uff87\012\uff87" +
    "\013\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\040" +
    "\uff87\041\uff87\043\uff87\047\uff87\050\uff87\052\uff87\055\uff87" +
    "\064\uff87\066\uff87\073\uff87\075\uff87\077\uff87\100\uff87\101" +
    "\uff87\121\uff87\122\uff87\123\uff87\124\uff87\125\uff87\126\uff87" +
    "\127\uff87\130\uff87\131\uff87\001\002\000\042\004\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\064\ufffe\077\ufffe\102\ufffe\121\ufffe" +
    "\122\ufffe\123\ufffe\124\ufffe\125\ufffe\126\ufffe\127\ufffe\130" +
    "\ufffe\131\ufffe\001\002\000\144\004\uffbe\005\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\040\uffbe\041\uffbe\043" +
    "\uffbe\045\uffbe\047\uffbe\050\uffbe\052\uffbe\055\uffbe\064\uffbe" +
    "\066\uffbe\070\uffbe\071\uffbe\073\uffbe\075\uffbe\077\uffbe\100" +
    "\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\121\uffbe\122\uffbe" +
    "\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131" +
    "\uffbe\001\002\000\042\004\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\064\ufffb\077\ufffb\102\ufffb\121\ufffb\122\ufffb\123\ufffb\124" +
    "\ufffb\125\ufffb\126\ufffb\127\ufffb\130\ufffb\131\ufffb\001\002" +
    "\000\004\102\243\001\002\000\004\004\240\001\002\000" +
    "\102\004\uff85\011\uff85\012\uff85\013\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\040\uff85\041\uff85\043\uff85\047" +
    "\uff85\050\uff85\052\uff85\055\uff85\064\uff85\066\uff85\073\uff85" +
    "\075\uff85\077\uff85\100\uff85\101\uff85\121\uff85\122\uff85\123" +
    "\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131\uff85" +
    "\001\002\000\066\003\165\004\156\011\104\012\065\013" +
    "\055\024\154\025\167\026\157\027\173\030\163\031\164" +
    "\032\160\033\162\034\155\035\161\064\117\077\067\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\140" +
    "\130\106\131\130\001\002\000\042\004\uffff\011\uffff\012" +
    "\uffff\013\uffff\064\uffff\077\uffff\102\uffff\121\uffff\122\uffff" +
    "\123\uffff\124\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131" +
    "\uffff\001\002\000\006\010\146\102\uff89\001\002\000\144" +
    "\004\uffd7\005\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\045\uffd7\047\uffd7\050\uffd7" +
    "\052\uffd7\055\uffd7\064\uffd7\066\uffd7\070\uffd7\071\uffd7\073" +
    "\uffd7\075\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7" +
    "\104\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7\125\uffd7\126" +
    "\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002\000\144\004\uffd2" +
    "\005\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\045\uffd2\047\uffd2\050\uffd2\052\uffd2" +
    "\055\uffd2\064\uffd2\066\uffd2\070\uffd2\071\uffd2\073\uffd2\075" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127" +
    "\uffd2\130\uffd2\131\uffd2\001\002\000\144\004\uff54\005\uff54" +
    "\010\uff54\011\uff54\012\uff54\013\uff54\017\uff54\020\uff54\021" +
    "\uff54\022\uff54\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54" +
    "\030\uff54\031\uff54\032\uff54\033\uff54\034\uff54\040\uff54\041" +
    "\uff54\043\uff54\045\uff54\047\uff54\050\uff54\052\uff54\055\uff54" +
    "\064\uff54\066\uff54\070\uff54\071\uff54\073\uff54\075\uff54\077" +
    "\uff54\100\uff54\101\uff54\102\uff54\103\uff54\104\uff54\121\uff54" +
    "\122\uff54\123\uff54\124\uff54\125\uff54\126\uff54\127\uff54\130" +
    "\uff54\131\uff54\001\002\000\144\004\uffd3\005\uffd3\010\151" +
    "\011\uffd3\012\uffd3\013\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\040\uffd3\041\uffd3\043" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\052\uffd3\055\uffd3\064\uffd3" +
    "\066\uffd3\070\uffd3\071\uffd3\073\uffd3\075\uffd3\077\uffd3\100" +
    "\uffd3\101\uffd3\102\uffd3\103\uffd3\104\uffd3\121\uffd3\122\uffd3" +
    "\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131" +
    "\uffd3\001\002\000\144\004\uffdf\005\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\040\uffdf\041\uffdf\043\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\055\uffdf\064\uffdf\066\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\075\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\104\uffdf\121\uffdf\122\uffdf\123\uffdf" +
    "\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001" +
    "\002\000\102\004\uff84\011\uff84\012\uff84\013\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\040\uff84\041\uff84\043" +
    "\uff84\047\uff84\050\uff84\052\uff84\055\uff84\064\uff84\066\uff84" +
    "\073\uff84\075\uff84\077\uff84\100\uff84\101\uff84\121\uff84\122" +
    "\uff84\123\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84" +
    "\131\uff84\001\002\000\032\004\136\010\uffc3\011\135\013" +
    "\133\017\053\020\122\021\113\022\072\023\077\040\115" +
    "\041\076\102\uffc3\001\002\000\144\004\uffc6\005\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\040\uffc6\041\uffc6" +
    "\043\uffc6\045\uffc6\047\uffc6\050\uffc6\052\uffc6\055\uffc6\064" +
    "\uffc6\066\uffc6\070\uffc6\071\uffc6\073\uffc6\075\uffc6\077\uffc6" +
    "\100\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\121\uffc6\122" +
    "\uffc6\123\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6" +
    "\131\uffc6\001\002\000\042\004\061\011\104\012\065\013" +
    "\055\064\117\077\067\102\uffbc\121\074\122\111\123\057" +
    "\124\052\125\107\126\070\127\140\130\106\131\130\001" +
    "\002\000\144\004\uffc7\005\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\040\uffc7\041\uffc7\043\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\052\uffc7\055\uffc7\064\uffc7\066\uffc7\070\uffc7" +
    "\071\uffc7\073\uffc7\075\uffc7\077\uffc7\100\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7" +
    "\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7\001\002\000" +
    "\046\003\141\004\061\005\uff8c\011\104\012\065\013\055" +
    "\064\117\077\067\103\uff8c\121\074\122\111\123\057\124" +
    "\052\125\107\126\070\127\140\130\106\131\130\001\002" +
    "\000\010\005\uff8d\010\146\103\uff8d\001\002\000\144\004" +
    "\136\005\uffc3\010\uffc3\011\135\012\uffc3\013\133\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\045\uffc3\047\uffc3\050\uffc3\052" +
    "\uffc3\055\uffc3\064\uffc3\066\uffc3\070\uffc3\071\uffc3\073\uffc3" +
    "\075\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\121\uffc3\122\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3" +
    "\127\uffc3\130\uffc3\131\uffc3\001\002\000\006\005\uff8b\103" +
    "\uff8b\001\002\000\006\005\144\103\143\001\002\000\040" +
    "\004\061\011\104\012\065\013\055\064\117\077\067\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\140" +
    "\130\106\131\130\001\002\000\144\004\uff55\005\uff55\010" +
    "\uff55\011\uff55\012\uff55\013\uff55\017\uff55\020\uff55\021\uff55" +
    "\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030" +
    "\uff55\031\uff55\032\uff55\033\uff55\034\uff55\040\uff55\041\uff55" +
    "\043\uff55\045\uff55\047\uff55\050\uff55\052\uff55\055\uff55\064" +
    "\uff55\066\uff55\070\uff55\071\uff55\073\uff55\075\uff55\077\uff55" +
    "\100\uff55\101\uff55\102\uff55\103\uff55\104\uff55\121\uff55\122" +
    "\uff55\123\uff55\124\uff55\125\uff55\126\uff55\127\uff55\130\uff55" +
    "\131\uff55\001\002\000\010\005\uff8e\010\146\103\uff8e\001" +
    "\002\000\040\004\061\011\104\012\065\013\055\064\117" +
    "\077\067\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\140\130\106\131\130\001\002\000\144\004\uffd0" +
    "\005\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\045\uffd0\047\uffd0\050\uffd0\052\uffd0" +
    "\055\uffd0\064\uffd0\066\uffd0\070\uffd0\071\uffd0\073\uffd0\075" +
    "\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0" +
    "\121\uffd0\122\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127" +
    "\uffd0\130\uffd0\131\uffd0\001\002\000\006\010\146\102\uffbd" +
    "\001\002\000\006\124\052\126\070\001\002\000\144\004" +
    "\uffbf\005\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\040\uffbf\041\uffbf\043\uffbf\045\uffbf\047\uffbf\050\uffbf\052" +
    "\uffbf\055\uffbf\064\uffbf\066\uffbf\070\uffbf\071\uffbf\073\uffbf" +
    "\075\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\104" +
    "\uffbf\121\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf" +
    "\127\uffbf\130\uffbf\131\uffbf\001\002\000\116\004\uffad\005" +
    "\uffad\011\uffad\012\uffad\013\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\032\uffad\033\uffad\034\uffad\040\uffad\041" +
    "\uffad\043\uffad\045\uffad\047\uffad\050\uffad\052\uffad\055\uffad" +
    "\064\uffad\066\uffad\070\uffad\073\uffad\075\uffad\077\uffad\100" +
    "\uffad\101\uffad\121\uffad\122\uffad\123\uffad\124\uffad\125\uffad" +
    "\126\uffad\127\uffad\130\uffad\131\uffad\001\002\000\040\004" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\064\ufff6\077\ufff6\121\ufff6" +
    "\122\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130" +
    "\ufff6\131\ufff6\001\002\000\064\004\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\064\ufff7\077\ufff7" +
    "\121\ufff7\122\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7\127" +
    "\ufff7\130\ufff7\131\ufff7\001\002\000\064\004\156\011\104" +
    "\012\065\013\055\024\154\025\167\026\157\027\173\030" +
    "\163\031\164\032\160\033\162\034\155\035\161\064\117" +
    "\077\067\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\140\130\106\131\130\001\002\000\040\004\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\064\ufff4\077\ufff4\121\ufff4\122" +
    "\ufff4\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4" +
    "\131\ufff4\001\002\000\064\004\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\064\ufff9\077\ufff9\121" +
    "\ufff9\122\ufff9\123\ufff9\124\ufff9\125\ufff9\126\ufff9\127\ufff9" +
    "\130\ufff9\131\ufff9\001\002\000\066\003\230\004\156\011" +
    "\104\012\065\013\055\024\154\025\167\026\157\027\173" +
    "\030\163\031\164\032\160\033\162\034\155\035\161\064" +
    "\117\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\140\130\106\131\130\001\002\000\064\004" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\064\ufff8\077\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8" +
    "\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\001\002\000" +
    "\040\004\ufff2\011\ufff2\012\ufff2\013\ufff2\064\ufff2\077\ufff2" +
    "\121\ufff2\122\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2\127" +
    "\ufff2\130\ufff2\131\ufff2\001\002\000\040\004\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\064\ufff1\077\ufff1\121\ufff1\122\ufff1\123" +
    "\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1" +
    "\001\002\000\004\050\227\001\002\000\064\004\156\011" +
    "\104\012\065\013\055\024\154\025\167\026\157\027\173" +
    "\030\163\031\164\032\160\033\162\034\155\035\161\064" +
    "\117\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\140\130\106\131\130\001\002\000\040\004" +
    "\ufff5\011\ufff5\012\ufff5\013\ufff5\064\ufff5\077\ufff5\121\ufff5" +
    "\122\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130" +
    "\ufff5\131\ufff5\001\002\000\134\004\uffb2\005\uffb2\010\146" +
    "\011\uffb2\012\uffb2\013\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\213\025\215\026\214\027\212\030\216" +
    "\031\217\032\uffb2\033\uffb2\034\uffb2\040\uffb2\041\uffb2\043" +
    "\uffb2\045\uffb2\047\uffb2\050\uffb2\052\uffb2\055\uffb2\064\uffb2" +
    "\066\uffb2\070\uffb2\073\uffb2\075\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\121\uffb2\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2" +
    "\127\uffb2\130\uffb2\131\uffb2\001\002\000\040\004\061\011" +
    "\104\012\065\013\055\064\117\077\067\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\140\130\106\131" +
    "\130\001\002\000\012\032\160\033\162\034\155\045\174" +
    "\001\002\000\040\004\ufff3\011\ufff3\012\ufff3\013\ufff3\064" +
    "\ufff3\077\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3" +
    "\126\ufff3\127\ufff3\130\ufff3\131\ufff3\001\002\000\004\042" +
    "\177\001\002\000\064\004\156\011\104\012\065\013\055" +
    "\024\154\025\167\026\157\027\173\030\163\031\164\032" +
    "\160\033\162\034\155\035\161\064\117\077\067\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\140\130" +
    "\106\131\130\001\002\000\116\004\uffaf\005\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\032\160\033\162\034\155\040\uffaf\041\uffaf\043\uffaf" +
    "\045\uffaf\047\uffaf\050\uffaf\052\uffaf\055\uffaf\064\uffaf\066" +
    "\uffaf\070\uffaf\073\uffaf\075\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\121\uffaf\122\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\001\002\000\074\004\061\011\104" +
    "\012\065\013\055\017\053\020\122\021\113\022\072\023" +
    "\077\040\115\041\076\043\056\052\064\055\101\064\117" +
    "\066\062\075\121\077\067\100\204\101\200\121\074\122" +
    "\111\123\057\124\052\125\107\126\070\127\132\130\106" +
    "\131\130\001\002\000\004\102\210\001\002\000\076\004" +
    "\061\011\104\012\065\013\055\017\053\020\122\021\113" +
    "\022\072\023\077\040\115\041\076\043\056\050\207\052" +
    "\064\055\101\064\117\066\062\075\121\077\067\100\204" +
    "\101\200\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\132\130\106\131\130\001\002\000\100\004\uff7b" +
    "\011\uff7b\012\uff7b\013\uff7b\017\uff7b\020\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\040\uff7b\041\uff7b\043\uff7b\050\uff7b\052\uff7b" +
    "\055\uff7b\064\uff7b\066\uff7b\073\uff7b\075\uff7b\077\uff7b\100" +
    "\uff7b\101\uff7b\121\uff7b\122\uff7b\123\uff7b\124\uff7b\125\uff7b" +
    "\126\uff7b\127\uff7b\130\uff7b\131\uff7b\001\002\000\100\004" +
    "\uff7f\011\uff7f\012\uff7f\013\uff7f\017\uff7f\020\uff7f\021\uff7f" +
    "\022\uff7f\023\uff7f\040\uff7f\041\uff7f\043\uff7f\050\uff7f\052" +
    "\uff7f\055\uff7f\064\uff7f\066\uff7f\073\uff7f\075\uff7f\077\uff7f" +
    "\100\uff7f\101\uff7f\121\uff7f\122\uff7f\123\uff7f\124\uff7f\125" +
    "\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f\001\002\000\004" +
    "\102\205\001\002\000\100\004\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\040\uff7e" +
    "\041\uff7e\043\uff7e\050\uff7e\052\uff7e\055\uff7e\064\uff7e\066" +
    "\uff7e\073\uff7e\075\uff7e\077\uff7e\100\uff7e\101\uff7e\121\uff7e" +
    "\122\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130" +
    "\uff7e\131\uff7e\001\002\000\100\004\uff7c\011\uff7c\012\uff7c" +
    "\013\uff7c\017\uff7c\020\uff7c\021\uff7c\022\uff7c\023\uff7c\040" +
    "\uff7c\041\uff7c\043\uff7c\050\uff7c\052\uff7c\055\uff7c\064\uff7c" +
    "\066\uff7c\073\uff7c\075\uff7c\077\uff7c\100\uff7c\101\uff7c\121" +
    "\uff7c\122\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c" +
    "\130\uff7c\131\uff7c\001\002\000\102\004\uff74\011\uff74\012" +
    "\uff74\013\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74" +
    "\040\uff74\041\uff74\043\uff74\047\uff74\050\uff74\052\uff74\055" +
    "\uff74\064\uff74\066\uff74\073\uff74\075\uff74\077\uff74\100\uff74" +
    "\101\uff74\121\uff74\122\uff74\123\uff74\124\uff74\125\uff74\126" +
    "\uff74\127\uff74\130\uff74\131\uff74\001\002\000\100\004\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\017\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\040\uff7d\041\uff7d\043\uff7d\050\uff7d\052\uff7d" +
    "\055\uff7d\064\uff7d\066\uff7d\073\uff7d\075\uff7d\077\uff7d\100" +
    "\uff7d\101\uff7d\121\uff7d\122\uff7d\123\uff7d\124\uff7d\125\uff7d" +
    "\126\uff7d\127\uff7d\130\uff7d\131\uff7d\001\002\000\120\004" +
    "\uffb1\005\uffb1\010\146\011\uffb1\012\uffb1\013\uffb1\017\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\040\uffb1\041\uffb1\043\uffb1\045\uffb1\047\uffb1\050\uffb1" +
    "\052\uffb1\055\uffb1\064\uffb1\066\uffb1\070\uffb1\073\uffb1\075" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\121\uffb1\122\uffb1\123\uffb1" +
    "\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001" +
    "\002\000\040\004\061\011\104\012\065\013\055\064\117" +
    "\077\067\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\140\130\106\131\130\001\002\000\040\004\061" +
    "\011\104\012\065\013\055\064\117\077\067\121\074\122" +
    "\111\123\057\124\052\125\107\126\070\127\140\130\106" +
    "\131\130\001\002\000\040\004\061\011\104\012\065\013" +
    "\055\064\117\077\067\121\074\122\111\123\057\124\052" +
    "\125\107\126\070\127\140\130\106\131\130\001\002\000" +
    "\040\004\061\011\104\012\065\013\055\064\117\077\067" +
    "\121\074\122\111\123\057\124\052\125\107\126\070\127" +
    "\140\130\106\131\130\001\002\000\040\004\061\011\104" +
    "\012\065\013\055\064\117\077\067\121\074\122\111\123" +
    "\057\124\052\125\107\126\070\127\140\130\106\131\130" +
    "\001\002\000\040\004\061\011\104\012\065\013\055\064" +
    "\117\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\140\130\106\131\130\001\002\000\120\004" +
    "\uffb3\005\uffb3\010\146\011\uffb3\012\uffb3\013\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\047\uffb3\050\uffb3" +
    "\052\uffb3\055\uffb3\064\uffb3\066\uffb3\070\uffb3\073\uffb3\075" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\121\uffb3\122\uffb3\123\uffb3" +
    "\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131\uffb3\001" +
    "\002\000\120\004\uffb4\005\uffb4\010\146\011\uffb4\012\uffb4" +
    "\013\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\040\uffb4\041\uffb4\043\uffb4\045\uffb4" +
    "\047\uffb4\050\uffb4\052\uffb4\055\uffb4\064\uffb4\066\uffb4\070" +
    "\uffb4\073\uffb4\075\uffb4\077\uffb4\100\uffb4\101\uffb4\121\uffb4" +
    "\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\130" +
    "\uffb4\131\uffb4\001\002\000\120\004\uffb7\005\uffb7\010\146" +
    "\011\uffb7\012\uffb7\013\uffb7\017\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\032\uffb7\033\uffb7\034\uffb7\040\uffb7\041\uffb7" +
    "\043\uffb7\045\uffb7\047\uffb7\050\uffb7\052\uffb7\055\uffb7\064" +
    "\uffb7\066\uffb7\070\uffb7\073\uffb7\075\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\121\uffb7\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126" +
    "\uffb7\127\uffb7\130\uffb7\131\uffb7\001\002\000\120\004\uffb6" +
    "\005\uffb6\010\146\011\uffb6\012\uffb6\013\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\040\uffb6\041\uffb6\043\uffb6\045\uffb6\047\uffb6\050\uffb6\052" +
    "\uffb6\055\uffb6\064\uffb6\066\uffb6\070\uffb6\073\uffb6\075\uffb6" +
    "\077\uffb6\100\uffb6\101\uffb6\121\uffb6\122\uffb6\123\uffb6\124" +
    "\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\001\002" +
    "\000\120\004\uffb8\005\uffb8\010\146\011\uffb8\012\uffb8\013" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\047" +
    "\uffb8\050\uffb8\052\uffb8\055\uffb8\064\uffb8\066\uffb8\070\uffb8" +
    "\073\uffb8\075\uffb8\077\uffb8\100\uffb8\101\uffb8\121\uffb8\122" +
    "\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8" +
    "\131\uffb8\001\002\000\120\004\uffb5\005\uffb5\010\146\011" +
    "\uffb5\012\uffb5\013\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\032\uffb5\033\uffb5\034\uffb5\040\uffb5\041\uffb5\043" +
    "\uffb5\045\uffb5\047\uffb5\050\uffb5\052\uffb5\055\uffb5\064\uffb5" +
    "\066\uffb5\070\uffb5\073\uffb5\075\uffb5\077\uffb5\100\uffb5\101" +
    "\uffb5\121\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5" +
    "\127\uffb5\130\uffb5\131\uffb5\001\002\000\116\004\uffac\005" +
    "\uffac\011\uffac\012\uffac\013\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\032\160\033\162\034\155\040\uffac\041" +
    "\uffac\043\uffac\045\uffac\047\uffac\050\uffac\052\uffac\055\uffac" +
    "\064\uffac\066\uffac\070\uffac\073\uffac\075\uffac\077\uffac\100" +
    "\uffac\101\uffac\121\uffac\122\uffac\123\uffac\124\uffac\125\uffac" +
    "\126\uffac\127\uffac\130\uffac\131\uffac\001\002\000\102\004" +
    "\uff73\011\uff73\012\uff73\013\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\040\uff73\041\uff73\043\uff73\047\uff73\050" +
    "\uff73\052\uff73\055\uff73\064\uff73\066\uff73\073\uff73\075\uff73" +
    "\077\uff73\100\uff73\101\uff73\121\uff73\122\uff73\123\uff73\124" +
    "\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131\uff73\001\002" +
    "\000\116\004\uffab\005\uffab\011\uffab\012\uffab\013\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\032\uffab\033\uffab" +
    "\034\uffab\040\uffab\041\uffab\043\uffab\045\uffab\047\uffab\050" +
    "\uffab\052\uffab\055\uffab\064\uffab\066\uffab\070\uffab\073\uffab" +
    "\075\uffab\077\uffab\100\uffab\101\uffab\121\uffab\122\uffab\123" +
    "\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131\uffab" +
    "\001\002\000\116\004\uffae\005\uffae\011\uffae\012\uffae\013" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\032\160" +
    "\033\162\034\155\040\uffae\041\uffae\043\uffae\045\uffae\047" +
    "\uffae\050\uffae\052\uffae\055\uffae\064\uffae\066\uffae\070\uffae" +
    "\073\uffae\075\uffae\077\uffae\100\uffae\101\uffae\121\uffae\122" +
    "\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae" +
    "\131\uffae\001\002\000\012\005\237\032\uffad\033\uffad\034" +
    "\uffad\001\002\000\030\005\236\010\146\024\213\025\215" +
    "\026\214\027\212\030\216\031\217\032\uffb2\033\uffb2\034" +
    "\uffb2\001\002\000\012\005\235\032\160\033\162\034\155" +
    "\001\002\000\116\004\uffb0\005\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\040\uffb0\041\uffb0\043\uffb0\045\uffb0\047" +
    "\uffb0\050\uffb0\052\uffb0\055\uffb0\064\uffb0\066\uffb0\070\uffb0" +
    "\073\uffb0\075\uffb0\077\uffb0\100\uffb0\101\uffb0\121\uffb0\122" +
    "\uffb0\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\001\002\000\144\004\uffd8\005\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\043\uffd8" +
    "\045\uffd8\047\uffd8\050\uffd8\052\uffd8\055\uffd8\064\uffd8\066" +
    "\uffd8\070\uffd8\071\uffd8\073\uffd8\075\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\102\uffd8\103\uffd8\104\uffd8\121\uffd8\122\uffd8\123" +
    "\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\130\uffd8\131\uffd8" +
    "\001\002\000\116\004\uffb9\005\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\040\uffb9\041\uffb9\043\uffb9\045\uffb9\047" +
    "\uffb9\050\uffb9\052\uffb9\055\uffb9\064\uffb9\066\uffb9\070\uffb9" +
    "\073\uffb9\075\uffb9\077\uffb9\100\uffb9\101\uffb9\121\uffb9\122" +
    "\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9" +
    "\131\uffb9\001\002\000\046\003\141\004\061\005\uff8c\011" +
    "\104\012\065\013\055\064\117\077\067\103\uff8c\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\140\130" +
    "\106\131\130\001\002\000\006\005\242\103\143\001\002" +
    "\000\144\004\uff58\005\uff58\010\uff58\011\uff58\012\uff58\013" +
    "\uff58\017\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58" +
    "\025\uff58\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033" +
    "\uff58\034\uff58\040\uff58\041\uff58\043\uff58\045\uff58\047\uff58" +
    "\050\uff58\052\uff58\055\uff58\064\uff58\066\uff58\070\uff58\071" +
    "\uff58\073\uff58\075\uff58\077\uff58\100\uff58\101\uff58\102\uff58" +
    "\103\uff58\104\uff58\121\uff58\122\uff58\123\uff58\124\uff58\125" +
    "\uff58\126\uff58\127\uff58\130\uff58\131\uff58\001\002\000\104" +
    "\004\uff88\011\uff88\012\uff88\013\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\040\uff88\041\uff88\043\uff88\047\uff88" +
    "\050\uff88\052\uff88\055\uff88\064\uff88\066\uff88\073\uff88\075" +
    "\uff88\077\uff88\100\uff88\101\uff88\104\uff88\121\uff88\122\uff88" +
    "\123\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131" +
    "\uff88\001\002\000\144\004\uffc5\005\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5\043\uffc5\045" +
    "\uffc5\047\uffc5\050\uffc5\052\uffc5\055\uffc5\064\uffc5\066\uffc5" +
    "\070\uffc5\071\uffc5\073\uffc5\075\uffc5\077\uffc5\100\uffc5\101" +
    "\uffc5\102\uffc5\103\uffc5\104\uffc5\121\uffc5\122\uffc5\123\uffc5" +
    "\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5\001" +
    "\002\000\004\122\250\001\002\000\004\122\247\001\002" +
    "\000\150\004\uffc2\005\uffc2\010\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\045\uffc2\047\uffc2\050\uffc2\052\uffc2\055\uffc2\064\uffc2\066" +
    "\uffc2\070\uffc2\071\uffc2\073\uffc2\075\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\103\uffc2\104\uffc2\121\uffc2\122\uffc2\123" +
    "\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2" +
    "\001\002\000\150\004\uffc1\005\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\043\uffc1\045\uffc1\047\uffc1\050\uffc1\052\uffc1\055\uffc1\064" +
    "\uffc1\066\uffc1\070\uffc1\071\uffc1\073\uffc1\075\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\121\uffc1\122" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1" +
    "\131\uffc1\001\002\000\012\032\160\033\162\034\155\070" +
    "\252\001\002\000\072\003\254\004\061\011\104\012\065" +
    "\013\055\017\053\020\122\021\113\022\072\023\077\040" +
    "\115\041\076\043\056\052\064\055\101\064\117\066\062" +
    "\075\121\077\067\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\132\130\106\131\130\001\002\000\074" +
    "\004\061\011\104\012\065\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\047\256" +
    "\050\257\052\064\055\101\064\117\066\062\075\121\077" +
    "\067\121\074\122\111\123\057\124\052\125\107\126\070" +
    "\127\132\130\106\131\130\001\002\000\102\004\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\023\uff6e\040\uff6e\041\uff6e\043\uff6e\047\uff6e\050\uff6e\052" +
    "\uff6e\055\uff6e\064\uff6e\066\uff6e\073\uff6e\075\uff6e\077\uff6e" +
    "\100\uff6e\101\uff6e\121\uff6e\122\uff6e\123\uff6e\124\uff6e\125" +
    "\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e\001\002\000\074" +
    "\004\uff81\011\uff81\012\uff81\013\uff81\017\uff81\020\uff81\021" +
    "\uff81\022\uff81\023\uff81\040\uff81\041\uff81\043\uff81\047\uff81" +
    "\050\uff81\052\uff81\055\uff81\064\uff81\066\uff81\075\uff81\077" +
    "\uff81\121\uff81\122\uff81\123\uff81\124\uff81\125\uff81\126\uff81" +
    "\127\uff81\130\uff81\131\uff81\001\002\000\072\003\261\004" +
    "\061\011\104\012\065\013\055\017\053\020\122\021\113" +
    "\022\072\023\077\040\115\041\076\043\056\052\064\055" +
    "\101\064\117\066\062\075\121\077\067\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\132\130\106\131" +
    "\130\001\002\000\102\004\uff6f\011\uff6f\012\uff6f\013\uff6f" +
    "\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\040\uff6f\041" +
    "\uff6f\043\uff6f\047\uff6f\050\uff6f\052\uff6f\055\uff6f\064\uff6f" +
    "\066\uff6f\073\uff6f\075\uff6f\077\uff6f\100\uff6f\101\uff6f\121" +
    "\uff6f\122\uff6f\123\uff6f\124\uff6f\125\uff6f\126\uff6f\127\uff6f" +
    "\130\uff6f\131\uff6f\001\002\000\072\004\061\011\104\012" +
    "\065\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\262\052\064\055\101\064" +
    "\117\066\062\075\121\077\067\121\074\122\111\123\057" +
    "\124\052\125\107\126\070\127\132\130\106\131\130\001" +
    "\002\000\102\004\uff6d\011\uff6d\012\uff6d\013\uff6d\017\uff6d" +
    "\020\uff6d\021\uff6d\022\uff6d\023\uff6d\040\uff6d\041\uff6d\043" +
    "\uff6d\047\uff6d\050\uff6d\052\uff6d\055\uff6d\064\uff6d\066\uff6d" +
    "\073\uff6d\075\uff6d\077\uff6d\100\uff6d\101\uff6d\121\uff6d\122" +
    "\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d\127\uff6d\130\uff6d" +
    "\131\uff6d\001\002\000\102\004\uff70\011\uff70\012\uff70\013" +
    "\uff70\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\040\uff70" +
    "\041\uff70\043\uff70\047\uff70\050\uff70\052\uff70\055\uff70\064" +
    "\uff70\066\uff70\073\uff70\075\uff70\077\uff70\100\uff70\101\uff70" +
    "\121\uff70\122\uff70\123\uff70\124\uff70\125\uff70\126\uff70\127" +
    "\uff70\130\uff70\131\uff70\001\002\000\006\010\146\102\uffbb" +
    "\001\002\000\010\012\065\122\111\123\057\001\002\000" +
    "\010\012\065\122\111\123\057\001\002\000\010\012\065" +
    "\122\111\123\057\001\002\000\010\012\065\122\111\123" +
    "\057\001\002\000\010\012\065\122\111\123\057\001\002" +
    "\000\152\004\uffcd\005\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd" +
    "\043\uffcd\045\uffcd\047\uffcd\050\uffcd\052\uffcd\055\uffcd\064" +
    "\uffcd\066\uffcd\070\uffcd\071\uffcd\073\uffcd\075\uffcd\077\uffcd" +
    "\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\121\uffcd\122" +
    "\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd\130\uffcd" +
    "\131\uffcd\001\002\000\152\004\uffcc\005\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\040\uffcc\041\uffcc\043\uffcc\045\uffcc\047\uffcc\050\uffcc\052" +
    "\uffcc\055\uffcc\064\uffcc\066\uffcc\070\uffcc\071\uffcc\073\uffcc" +
    "\075\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\104" +
    "\uffcc\121\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc" +
    "\127\uffcc\130\uffcc\131\uffcc\001\002\000\152\004\uffce\005" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\267\015\270" +
    "\016\264\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\040\uffce\041\uffce\043\uffce\045\uffce\047" +
    "\uffce\050\uffce\052\uffce\055\uffce\064\uffce\066\uffce\070\uffce" +
    "\071\uffce\073\uffce\075\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\103\uffce\104\uffce\121\uffce\122\uffce\123\uffce\124\uffce" +
    "\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\001\002\000" +
    "\152\004\uffcf\005\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf" +
    "\014\267\015\270\016\264\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\040\uffcf\041\uffcf\043" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\052\uffcf\055\uffcf\064\uffcf" +
    "\066\uffcf\070\uffcf\071\uffcf\073\uffcf\075\uffcf\077\uffcf\100" +
    "\uffcf\101\uffcf\102\uffcf\103\uffcf\104\uffcf\121\uffcf\122\uffcf" +
    "\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131" +
    "\uffcf\001\002\000\152\004\uffcb\005\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040" +
    "\uffcb\041\uffcb\043\uffcb\045\uffcb\047\uffcb\050\uffcb\052\uffcb" +
    "\055\uffcb\064\uffcb\066\uffcb\070\uffcb\071\uffcb\073\uffcb\075" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\121\uffcb\122\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127" +
    "\uffcb\130\uffcb\131\uffcb\001\002\000\042\004\061\005\300" +
    "\011\104\012\065\013\055\064\117\077\067\121\074\122" +
    "\111\123\057\124\052\125\107\126\070\127\140\130\106" +
    "\131\130\001\002\000\010\005\uff8f\010\146\103\uff8f\001" +
    "\002\000\144\004\uff56\005\uff56\010\uff56\011\uff56\012\uff56" +
    "\013\uff56\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\034\uff56\040\uff56\041\uff56\043\uff56\045\uff56\047" +
    "\uff56\050\uff56\052\uff56\055\uff56\064\uff56\066\uff56\070\uff56" +
    "\071\uff56\073\uff56\075\uff56\077\uff56\100\uff56\101\uff56\102" +
    "\uff56\103\uff56\104\uff56\121\uff56\122\uff56\123\uff56\124\uff56" +
    "\125\uff56\126\uff56\127\uff56\130\uff56\131\uff56\001\002\000" +
    "\006\005\303\103\302\001\002\000\040\004\061\011\104" +
    "\012\065\013\055\064\117\077\067\121\074\122\111\123" +
    "\057\124\052\125\107\126\070\127\140\130\106\131\130" +
    "\001\002\000\144\004\uff57\005\uff57\010\uff57\011\uff57\012" +
    "\uff57\013\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57" +
    "\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57\032" +
    "\uff57\033\uff57\034\uff57\040\uff57\041\uff57\043\uff57\045\uff57" +
    "\047\uff57\050\uff57\052\uff57\055\uff57\064\uff57\066\uff57\070" +
    "\uff57\071\uff57\073\uff57\075\uff57\077\uff57\100\uff57\101\uff57" +
    "\102\uff57\103\uff57\104\uff57\121\uff57\122\uff57\123\uff57\124" +
    "\uff57\125\uff57\126\uff57\127\uff57\130\uff57\131\uff57\001\002" +
    "\000\010\005\uff90\010\146\103\uff90\001\002\000\152\004" +
    "\uffca\005\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\267" +
    "\015\270\016\264\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\034\uffca\040\uffca\041\uffca\043\uffca\045" +
    "\uffca\047\uffca\050\uffca\052\uffca\055\uffca\064\uffca\066\uffca" +
    "\070\uffca\071\uffca\073\uffca\075\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\121\uffca\122\uffca\123\uffca" +
    "\124\uffca\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\001" +
    "\002\000\040\004\061\011\104\012\065\013\055\064\117" +
    "\077\067\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\140\130\106\131\130\001\002\000\042\004\061" +
    "\011\104\012\065\013\055\017\311\064\117\077\067\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\140" +
    "\130\106\131\130\001\002\000\006\010\146\071\341\001" +
    "\002\000\042\004\061\011\104\012\065\013\055\064\117" +
    "\071\313\077\067\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\140\130\106\131\130\001\002\000\044" +
    "\004\061\010\146\011\104\012\065\013\055\064\117\071" +
    "\322\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\140\130\106\131\130\001\002\000\040\004" +
    "\061\011\104\012\065\013\055\064\117\077\067\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\140\130" +
    "\106\131\130\001\002\000\006\010\146\045\315\001\002" +
    "\000\004\042\316\001\002\000\074\004\061\011\104\012" +
    "\065\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\052\064\055\101\064\117\066" +
    "\062\075\121\077\067\100\204\101\200\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\132\130\106\131" +
    "\130\001\002\000\076\004\061\011\104\012\065\013\055" +
    "\017\053\020\122\021\113\022\072\023\077\040\115\041" +
    "\076\043\056\050\320\052\064\055\101\064\117\066\062" +
    "\075\121\077\067\100\204\101\200\121\074\122\111\123" +
    "\057\124\052\125\107\126\070\127\132\130\106\131\130" +
    "\001\002\000\102\004\uff77\011\uff77\012\uff77\013\uff77\017" +
    "\uff77\020\uff77\021\uff77\022\uff77\023\uff77\040\uff77\041\uff77" +
    "\043\uff77\047\uff77\050\uff77\052\uff77\055\uff77\064\uff77\066" +
    "\uff77\073\uff77\075\uff77\077\uff77\100\uff77\101\uff77\121\uff77" +
    "\122\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127\uff77\130" +
    "\uff77\131\uff77\001\002\000\006\010\146\045\335\001\002" +
    "\000\042\003\324\004\061\011\104\012\065\013\055\064" +
    "\117\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\140\130\106\131\130\001\002\000\006\010" +
    "\146\045\331\001\002\000\004\045\325\001\002\000\004" +
    "\042\326\001\002\000\074\004\061\011\104\012\065\013" +
    "\055\017\053\020\122\021\113\022\072\023\077\040\115" +
    "\041\076\043\056\052\064\055\101\064\117\066\062\075" +
    "\121\077\067\100\204\101\200\121\074\122\111\123\057" +
    "\124\052\125\107\126\070\127\132\130\106\131\130\001" +
    "\002\000\076\004\061\011\104\012\065\013\055\017\053" +
    "\020\122\021\113\022\072\023\077\040\115\041\076\043" +
    "\056\050\330\052\064\055\101\064\117\066\062\075\121" +
    "\077\067\100\204\101\200\121\074\122\111\123\057\124" +
    "\052\125\107\126\070\127\132\130\106\131\130\001\002" +
    "\000\102\004\uff75\011\uff75\012\uff75\013\uff75\017\uff75\020" +
    "\uff75\021\uff75\022\uff75\023\uff75\040\uff75\041\uff75\043\uff75" +
    "\047\uff75\050\uff75\052\uff75\055\uff75\064\uff75\066\uff75\073" +
    "\uff75\075\uff75\077\uff75\100\uff75\101\uff75\121\uff75\122\uff75" +
    "\123\uff75\124\uff75\125\uff75\126\uff75\127\uff75\130\uff75\131" +
    "\uff75\001\002\000\004\042\332\001\002\000\074\004\061" +
    "\011\104\012\065\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\052\064\055\101" +
    "\064\117\066\062\075\121\077\067\100\204\101\200\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\132" +
    "\130\106\131\130\001\002\000\076\004\061\011\104\012" +
    "\065\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\334\052\064\055\101\064" +
    "\117\066\062\075\121\077\067\100\204\101\200\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\132\130" +
    "\106\131\130\001\002\000\102\004\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\040" +
    "\uff7a\041\uff7a\043\uff7a\047\uff7a\050\uff7a\052\uff7a\055\uff7a" +
    "\064\uff7a\066\uff7a\073\uff7a\075\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\121\uff7a\122\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a" +
    "\127\uff7a\130\uff7a\131\uff7a\001\002\000\004\042\336\001" +
    "\002\000\074\004\061\011\104\012\065\013\055\017\053" +
    "\020\122\021\113\022\072\023\077\040\115\041\076\043" +
    "\056\052\064\055\101\064\117\066\062\075\121\077\067" +
    "\100\204\101\200\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\132\130\106\131\130\001\002\000\076" +
    "\004\061\011\104\012\065\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\050\340" +
    "\052\064\055\101\064\117\066\062\075\121\077\067\100" +
    "\204\101\200\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\132\130\106\131\130\001\002\000\102\004" +
    "\uff76\011\uff76\012\uff76\013\uff76\017\uff76\020\uff76\021\uff76" +
    "\022\uff76\023\uff76\040\uff76\041\uff76\043\uff76\047\uff76\050" +
    "\uff76\052\uff76\055\uff76\064\uff76\066\uff76\073\uff76\075\uff76" +
    "\077\uff76\100\uff76\101\uff76\121\uff76\122\uff76\123\uff76\124" +
    "\uff76\125\uff76\126\uff76\127\uff76\130\uff76\131\uff76\001\002" +
    "\000\040\004\061\011\104\012\065\013\055\064\117\077" +
    "\067\121\074\122\111\123\057\124\052\125\107\126\070" +
    "\127\140\130\106\131\130\001\002\000\006\010\146\045" +
    "\343\001\002\000\004\042\344\001\002\000\074\004\061" +
    "\011\104\012\065\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\052\064\055\101" +
    "\064\117\066\062\075\121\077\067\100\204\101\200\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\132" +
    "\130\106\131\130\001\002\000\076\004\061\011\104\012" +
    "\065\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\346\052\064\055\101\064" +
    "\117\066\062\075\121\077\067\100\204\101\200\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\132\130" +
    "\106\131\130\001\002\000\102\004\uff78\011\uff78\012\uff78" +
    "\013\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\040" +
    "\uff78\041\uff78\043\uff78\047\uff78\050\uff78\052\uff78\055\uff78" +
    "\064\uff78\066\uff78\073\uff78\075\uff78\077\uff78\100\uff78\101" +
    "\uff78\121\uff78\122\uff78\123\uff78\124\uff78\125\uff78\126\uff78" +
    "\127\uff78\130\uff78\131\uff78\001\002\000\006\010\146\071" +
    "\350\001\002\000\040\004\061\011\104\012\065\013\055" +
    "\064\117\077\067\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\140\130\106\131\130\001\002\000\006" +
    "\010\146\045\352\001\002\000\004\042\353\001\002\000" +
    "\074\004\061\011\104\012\065\013\055\017\053\020\122" +
    "\021\113\022\072\023\077\040\115\041\076\043\056\052" +
    "\064\055\101\064\117\066\062\075\121\077\067\100\204" +
    "\101\200\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\132\130\106\131\130\001\002\000\076\004\061" +
    "\011\104\012\065\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\050\355\052\064" +
    "\055\101\064\117\066\062\075\121\077\067\100\204\101" +
    "\200\121\074\122\111\123\057\124\052\125\107\126\070" +
    "\127\132\130\106\131\130\001\002\000\102\004\uff79\011" +
    "\uff79\012\uff79\013\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\023\uff79\040\uff79\041\uff79\043\uff79\047\uff79\050\uff79\052" +
    "\uff79\055\uff79\064\uff79\066\uff79\073\uff79\075\uff79\077\uff79" +
    "\100\uff79\101\uff79\121\uff79\122\uff79\123\uff79\124\uff79\125" +
    "\uff79\126\uff79\127\uff79\130\uff79\131\uff79\001\002\000\076" +
    "\004\061\011\104\012\065\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\052\064" +
    "\055\101\064\117\066\062\073\357\075\121\077\067\100" +
    "\204\101\200\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\132\130\106\131\130\001\002\000\066\003" +
    "\360\004\156\011\104\012\065\013\055\024\154\025\167" +
    "\026\157\027\173\030\163\031\164\032\160\033\162\034" +
    "\155\035\161\064\117\077\067\121\074\122\111\123\057" +
    "\124\052\125\107\126\070\127\140\130\106\131\130\001" +
    "\002\000\102\004\uff71\011\uff71\012\uff71\013\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\023\uff71\040\uff71\041\uff71\043" +
    "\uff71\047\uff71\050\uff71\052\uff71\055\uff71\064\uff71\066\uff71" +
    "\073\uff71\075\uff71\077\uff71\100\uff71\101\uff71\121\uff71\122" +
    "\uff71\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71" +
    "\131\uff71\001\002\000\110\004\uff72\011\uff72\012\uff72\013" +
    "\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\032\160" +
    "\033\162\034\155\040\uff72\041\uff72\043\uff72\047\uff72\050" +
    "\uff72\052\uff72\055\uff72\064\uff72\066\uff72\073\uff72\075\uff72" +
    "\077\uff72\100\uff72\101\uff72\121\uff72\122\uff72\123\uff72\124" +
    "\uff72\125\uff72\126\uff72\127\uff72\130\uff72\131\uff72\001\002" +
    "\000\006\005\236\010\146\001\002\000\004\050\367\001" +
    "\002\000\032\004\136\010\uffc3\011\135\013\133\017\053" +
    "\020\122\021\113\022\072\023\077\040\115\041\076\102" +
    "\uffc3\001\002\000\042\004\061\011\104\012\065\013\055" +
    "\064\117\077\067\102\uffbc\121\074\122\111\123\057\124" +
    "\052\125\107\126\070\127\140\130\106\131\130\001\002" +
    "\000\010\010\146\050\uff63\102\uffbd\001\002\000\010\042" +
    "\uff62\112\uff62\113\uff62\001\002\000\004\047\u0108\001\002" +
    "\000\004\061\372\001\002\000\042\004\061\011\104\012" +
    "\065\013\055\064\117\077\067\104\374\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\140\130\106\131" +
    "\130\001\002\000\062\004\061\010\146\011\104\012\065" +
    "\013\055\017\053\020\122\021\113\022\072\023\077\040" +
    "\115\041\076\064\117\077\067\104\u0105\121\074\122\111" +
    "\123\057\124\052\125\107\126\070\127\132\130\106\131" +
    "\130\001\002\000\056\004\061\011\104\012\065\013\055" +
    "\017\053\020\122\021\113\022\072\023\077\040\115\041" +
    "\076\064\117\077\067\121\074\122\111\123\057\124\052" +
    "\125\107\126\070\127\132\130\106\131\130\001\002\000" +
    "\044\004\061\011\104\012\065\013\055\047\377\064\117" +
    "\077\067\104\374\121\074\122\111\123\057\124\052\125" +
    "\107\126\070\127\140\130\106\131\130\001\002\000\044" +
    "\004\uff67\011\uff67\012\uff67\013\uff67\047\uff67\064\uff67\077" +
    "\uff67\104\uff67\121\uff67\122\uff67\123\uff67\124\uff67\125\uff67" +
    "\126\uff67\127\uff67\130\uff67\131\uff67\001\002\000\060\003" +
    "\u0101\004\061\011\104\012\065\013\055\017\053\020\122" +
    "\021\113\022\072\023\077\040\115\041\076\064\117\077" +
    "\067\121\074\122\111\123\057\124\052\125\107\126\070" +
    "\127\132\130\106\131\130\001\002\000\044\004\uff68\011" +
    "\uff68\012\uff68\013\uff68\047\uff68\064\uff68\077\uff68\104\uff68" +
    "\121\uff68\122\uff68\123\uff68\124\uff68\125\uff68\126\uff68\127" +
    "\uff68\130\uff68\131\uff68\001\002\000\102\004\uff64\011\uff64" +
    "\012\uff64\013\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023" +
    "\uff64\040\uff64\041\uff64\043\uff64\047\uff64\050\uff64\052\uff64" +
    "\055\uff64\064\uff64\066\uff64\073\uff64\075\uff64\077\uff64\100" +
    "\uff64\101\uff64\121\uff64\122\uff64\123\uff64\124\uff64\125\uff64" +
    "\126\uff64\127\uff64\130\uff64\131\uff64\001\002\000\102\004" +
    "\uff66\011\uff66\012\uff66\013\uff66\017\uff66\020\uff66\021\uff66" +
    "\022\uff66\023\uff66\040\uff66\041\uff66\043\uff66\047\uff66\050" +
    "\uff66\052\uff66\055\uff66\064\uff66\066\uff66\073\uff66\075\uff66" +
    "\077\uff66\100\uff66\101\uff66\121\uff66\122\uff66\123\uff66\124" +
    "\uff66\125\uff66\126\uff66\127\uff66\130\uff66\131\uff66\001\002" +
    "\000\044\004\uff69\011\uff69\012\uff69\013\uff69\047\uff69\064" +
    "\uff69\077\uff69\104\uff69\121\uff69\122\uff69\123\uff69\124\uff69" +
    "\125\uff69\126\uff69\127\uff69\130\uff69\131\uff69\001\002\000" +
    "\044\004\uff6b\011\uff6b\012\uff6b\013\uff6b\047\uff6b\064\uff6b" +
    "\077\uff6b\104\uff6b\121\uff6b\122\uff6b\123\uff6b\124\uff6b\125" +
    "\uff6b\126\uff6b\127\uff6b\130\uff6b\131\uff6b\001\002\000\060" +
    "\003\u0106\004\061\011\104\012\065\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\064\117" +
    "\077\067\121\074\122\111\123\057\124\052\125\107\126" +
    "\070\127\132\130\106\131\130\001\002\000\044\004\uff6a" +
    "\011\uff6a\012\uff6a\013\uff6a\047\uff6a\064\uff6a\077\uff6a\104" +
    "\uff6a\121\uff6a\122\uff6a\123\uff6a\124\uff6a\125\uff6a\126\uff6a" +
    "\127\uff6a\130\uff6a\131\uff6a\001\002\000\044\004\uff6c\011" +
    "\uff6c\012\uff6c\013\uff6c\047\uff6c\064\uff6c\077\uff6c\104\uff6c" +
    "\121\uff6c\122\uff6c\123\uff6c\124\uff6c\125\uff6c\126\uff6c\127" +
    "\uff6c\130\uff6c\131\uff6c\001\002\000\102\004\uff65\011\uff65" +
    "\012\uff65\013\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023" +
    "\uff65\040\uff65\041\uff65\043\uff65\047\uff65\050\uff65\052\uff65" +
    "\055\uff65\064\uff65\066\uff65\073\uff65\075\uff65\077\uff65\100" +
    "\uff65\101\uff65\121\uff65\122\uff65\123\uff65\124\uff65\125\uff65" +
    "\126\uff65\127\uff65\130\uff65\131\uff65\001\002\000\144\004" +
    "\uffc4\005\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\040\uffc4\041\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\052" +
    "\uffc4\055\uffc4\064\uffc4\066\uffc4\070\uffc4\071\uffc4\073\uffc4" +
    "\075\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4" +
    "\127\uffc4\130\uffc4\131\uffc4\001\002\000\006\122\111\123" +
    "\057\001\002\000\152\004\uffc8\005\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\040" +
    "\uffc8\041\uffc8\043\uffc8\045\uffc8\047\uffc8\050\uffc8\052\uffc8" +
    "\055\uffc8\064\uffc8\066\uffc8\070\uffc8\071\uffc8\073\uffc8\075" +
    "\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8" +
    "\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127" +
    "\uffc8\130\uffc8\131\uffc8\001\002\000\006\005\uff93\103\uff93" +
    "\001\002\000\010\042\uff61\112\uff61\113\uff61\001\002\000" +
    "\004\050\u0117\001\002\000\004\004\u0110\001\002\000\030" +
    "\003\035\005\uff91\103\uff91\107\027\110\037\111\040\114" +
    "\025\115\026\116\034\117\030\120\031\001\002\000\006" +
    "\005\u0112\103\044\001\002\000\004\042\u0113\001\002\000" +
    "\074\004\uff98\011\uff98\012\uff98\013\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\040\uff98\041\uff98\043\uff98\044" +
    "\010\052\uff98\055\uff98\064\uff98\066\uff98\074\uff98\075\uff98" +
    "\077\uff98\121\uff98\122\uff98\123\uff98\124\uff98\125\uff98\126" +
    "\uff98\127\uff98\130\uff98\131\uff98\001\002\000\070\004\061" +
    "\011\104\012\065\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\052\064\055\101" +
    "\064\117\066\062\075\121\077\067\121\074\122\111\123" +
    "\057\124\052\125\107\126\070\127\132\130\106\131\130" +
    "\001\002\000\072\004\061\011\104\012\065\013\055\017" +
    "\053\020\122\021\113\022\072\023\077\040\115\041\076" +
    "\043\056\050\u0116\052\064\055\101\064\117\066\062\075" +
    "\121\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\132\130\106\131\130\001\002\000\010\042" +
    "\uff60\112\uff60\113\uff60\001\002\000\010\042\uff5f\112\uff5f" +
    "\113\uff5f\001\002\000\070\004\061\011\104\012\065\013" +
    "\055\017\053\020\122\021\113\022\072\023\077\040\115" +
    "\041\076\043\056\052\064\055\101\064\117\066\062\075" +
    "\121\077\067\121\074\122\111\123\057\124\052\125\107" +
    "\126\070\127\132\130\106\131\130\001\002\000\072\004" +
    "\061\011\104\012\065\013\055\017\053\020\122\021\113" +
    "\022\072\023\077\040\115\041\076\043\056\050\u011a\052" +
    "\064\055\101\064\117\066\062\075\121\077\067\121\074" +
    "\122\111\123\057\124\052\125\107\126\070\127\132\130" +
    "\106\131\130\001\002\000\004\002\uff52\001\002\000\010" +
    "\042\uff5c\112\uff5c\113\uff5c\001\002\000\004\127\u0120\001" +
    "\002\000\076\004\uff97\011\uff97\012\uff97\013\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\023\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\052\uff97\055\uff97\064\uff97\066\uff97\075\uff97" +
    "\077\uff97\112\uff97\113\uff97\121\uff97\122\uff97\123\uff97\124" +
    "\uff97\125\uff97\126\uff97\127\uff97\130\uff97\131\uff97\001\002" +
    "\000\006\050\u013b\127\u0120\001\002\000\030\103\u0123\104" +
    "\u0122\107\027\110\037\111\040\114\025\115\026\116\034" +
    "\117\030\120\031\127\u0124\001\002\000\030\103\uffa9\104" +
    "\uffa9\107\uffa9\110\uffa9\111\uffa9\114\uffa9\115\uffa9\116\uffa9" +
    "\117\uffa9\120\uffa9\127\uffa9\001\002\000\006\050\uffa1\127" +
    "\uffa1\001\002\000\026\102\u012a\106\u0129\107\027\110\037" +
    "\111\040\114\025\115\026\116\034\117\030\120\031\001" +
    "\002\000\006\003\u0127\127\u0128\001\002\000\030\103\uffa8" +
    "\104\uffa8\107\uffa8\110\uffa8\111\uffa8\114\uffa8\115\uffa8\116" +
    "\uffa8\117\uffa8\120\uffa8\127\uffa8\001\002\000\004\102\u0126" +
    "\001\002\000\006\050\uffa4\127\uffa4\001\002\000\030\103" +
    "\uffa7\104\uffa7\107\uffa7\110\uffa7\111\uffa7\114\uffa7\115\uffa7" +
    "\116\uffa7\117\uffa7\120\uffa7\127\uffa7\001\002\000\030\103" +
    "\uffaa\104\uffaa\107\uffaa\110\uffaa\111\uffaa\114\uffaa\115\uffaa" +
    "\116\uffaa\117\uffaa\120\uffaa\127\uffaa\001\002\000\004\006" +
    "\u012d\001\002\000\006\050\uffa3\127\uffa3\001\002\000\004" +
    "\102\u012c\001\002\000\006\050\uffa6\127\uffa6\001\002\000" +
    "\004\122\u012e\001\002\000\004\105\u012f\001\002\000\004" +
    "\105\u0130\001\002\000\004\122\u0131\001\002\000\004\007" +
    "\u0132\001\002\000\004\061\u0133\001\002\000\012\111\u0137" +
    "\114\u0138\115\u0136\117\u0135\001\002\000\004\102\u0139\001" +
    "\002\000\004\102\uffe5\001\002\000\004\102\uffe6\001\002" +
    "\000\004\102\uffe8\001\002\000\004\102\uffe7\001\002\000" +
    "\006\050\uffa5\127\uffa5\001\002\000\006\050\uffa2\127\uffa2" +
    "\001\002\000\076\004\uffa0\011\uffa0\012\uffa0\013\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\052\uffa0\055\uffa0\064\uffa0\066\uffa0\075" +
    "\uffa0\077\uffa0\112\uffa0\113\uffa0\121\uffa0\122\uffa0\123\uffa0" +
    "\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131\uffa0\001" +
    "\002\000\006\050\u0146\127\u013d\001\002\000\042\004\061" +
    "\011\104\012\065\013\055\024\u0140\064\117\077\067\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\140" +
    "\130\106\131\130\001\002\000\006\050\uff9a\127\uff9a\001" +
    "\002\000\006\010\146\102\u0144\001\002\000\042\004\061" +
    "\011\104\012\065\013\055\064\117\077\067\102\u0142\121" +
    "\074\122\111\123\057\124\052\125\107\126\070\127\140" +
    "\130\106\131\130\001\002\000\006\010\146\102\u0143\001" +
    "\002\000\006\050\uff9c\127\uff9c\001\002\000\006\050\uff9e" +
    "\127\uff9e\001\002\000\006\050\uff9d\127\uff9d\001\002\000" +
    "\006\050\uff9b\127\uff9b\001\002\000\100\004\uff99\011\uff99" +
    "\012\uff99\013\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\052\uff99\055\uff99" +
    "\064\uff99\066\uff99\074\uff99\075\uff99\077\uff99\112\uff99\113" +
    "\uff99\121\uff99\122\uff99\123\uff99\124\uff99\125\uff99\126\uff99" +
    "\127\uff99\130\uff99\131\uff99\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0145\000\004\065\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\010\027\011" +
    "\001\001\000\006\020\u013d\024\u013b\001\001\000\004\025" +
    "\u011c\001\001\000\014\032\012\033\017\034\013\035\014" +
    "\036\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\012\033\017\034\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\035\017\032" +
    "\022\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\035\017\u010b\001\001\000\002\001\001\000\004" +
    "\014\046\001\001\000\002\001\001\000\006\026\010\027" +
    "\050\001\001\000\056\003\122\004\065\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\037\077\042" +
    "\125\043\062\044\123\047\115\050\111\056\072\057\057" +
    "\060\107\061\070\062\117\063\130\064\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\122\004\065\005\104\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\037\077\042\125\043\062\044\123\047" +
    "\115\050\111\051\362\056\072\060\254\061\070\062\117" +
    "\063\130\064\102\001\001\000\030\003\361\004\065\006" +
    "\124\007\053\010\074\011\101\012\113\013\126\042\125" +
    "\043\062\044\123\001\001\000\060\003\122\004\065\005" +
    "\104\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\037\077\042\125\043\062\044\123\047\115\050\111\054" +
    "\201\055\355\056\072\060\202\061\070\062\117\063\130" +
    "\064\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\053\010\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\262\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\042\125\043\062\044\123\001\001\000\040\003\167\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\040\170\041\165\042\125\043\062\044\123\045\250\046" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\167\004\065\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\040\170\041\165\042\125\043\062\044\123" +
    "\045\171\046\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\133\001\001\000\002\001\001\000\030\003\147" +
    "\004\065\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\042\125\043\062\044\123\001\001\000\002\001\001" +
    "\000\032\003\136\004\065\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\030\141\042\125\043\062\044\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\144\004\065\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\042\125\043" +
    "\062\044\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\146\004\065\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\042\125\043\062\044\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\113\013" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\232\004\065\006" +
    "\124\007\053\010\074\011\101\012\113\013\126\040\170" +
    "\041\165\042\125\043\062\044\123\045\233\046\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\167" +
    "\004\065\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\040\170\041\165\042\125\043\062\044\123\045\230" +
    "\046\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\167\004\065" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\040" +
    "\170\041\165\042\125\043\062\044\123\045\225\046\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\210\004\065\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\042\125\043\062\044\123\001\001\000\004\041" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\167\004\065\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\040\170\041\165\042\125\043\062\044\123" +
    "\045\175\046\152\001\001\000\004\041\174\001\001\000" +
    "\060\003\122\004\065\005\104\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\037\077\042\125\043\062\044" +
    "\123\047\115\050\111\054\201\055\200\056\072\060\202" +
    "\061\070\062\117\063\130\064\102\001\001\000\002\001" +
    "\001\000\056\003\122\004\065\005\104\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\037\077\042\125\043" +
    "\062\044\123\047\115\050\111\054\205\056\072\060\202" +
    "\061\070\062\117\063\130\064\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\224\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\030\003\223\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\030\003\222\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\030\003\221\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\030\003\220\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\030\003\217\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\136\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\030\240\042\125\043\062\044\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\041\174\001\001\000\056\003\122" +
    "\004\065\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\037\077\042\125\043\062\044\123\047\115" +
    "\050\111\056\072\057\252\060\107\061\070\062\117\063" +
    "\130\064\102\001\001\000\054\003\122\004\065\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\037" +
    "\077\042\125\043\062\044\123\047\115\050\111\056\072" +
    "\060\254\061\070\062\117\063\130\064\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\122\004\065" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\037\077\042\125\043\062\044\123\047\115\050\111" +
    "\056\072\057\257\060\107\061\070\062\117\063\130\064" +
    "\102\001\001\000\002\001\001\000\054\003\122\004\065" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\037\077\042\125\043\062\044\123\047\115\050\111" +
    "\056\072\060\254\061\070\062\117\063\130\064\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\053\010\274\001\001\000\006\007\053\010" +
    "\273\001\001\000\006\007\053\010\272\001\001\000\006" +
    "\007\053\010\271\001\001\000\006\007\053\010\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\276\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\031\300\042\125\043\062\044\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\303" +
    "\004\065\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\042\125\043\062\044\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\346\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\042\125\043\062\044\123\001\001\000\030\003\307\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\042\125\043\062\044\123\001\001\000\002\001\001\000" +
    "\030\003\311\004\065\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\042\125\043\062\044\123\001\001\000" +
    "\030\003\320\004\065\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\042\125\043\062\044\123\001\001\000" +
    "\030\003\313\004\065\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\042\125\043\062\044\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\122\004\065" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\037\077\042\125\043\062\044\123\047\115\050\111" +
    "\054\201\055\316\056\072\060\202\061\070\062\117\063" +
    "\130\064\102\001\001\000\056\003\122\004\065\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\037" +
    "\077\042\125\043\062\044\123\047\115\050\111\054\205" +
    "\056\072\060\202\061\070\062\117\063\130\064\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\322" +
    "\004\065\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\042\125\043\062\044\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\122\004" +
    "\065\005\104\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\037\077\042\125\043\062\044\123\047\115\050" +
    "\111\054\201\055\326\056\072\060\202\061\070\062\117" +
    "\063\130\064\102\001\001\000\056\003\122\004\065\005" +
    "\104\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\037\077\042\125\043\062\044\123\047\115\050\111\054" +
    "\205\056\072\060\202\061\070\062\117\063\130\064\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\122\004\065\005\104\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\037\077\042\125\043\062\044\123\047" +
    "\115\050\111\054\201\055\332\056\072\060\202\061\070" +
    "\062\117\063\130\064\102\001\001\000\056\003\122\004" +
    "\065\005\104\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\037\077\042\125\043\062\044\123\047\115\050" +
    "\111\054\205\056\072\060\202\061\070\062\117\063\130" +
    "\064\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\122\004\065\005\104\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\037\077\042\125\043\062\044" +
    "\123\047\115\050\111\054\201\055\336\056\072\060\202" +
    "\061\070\062\117\063\130\064\102\001\001\000\056\003" +
    "\122\004\065\005\104\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\037\077\042\125\043\062\044\123\047" +
    "\115\050\111\054\205\056\072\060\202\061\070\062\117" +
    "\063\130\064\102\001\001\000\002\001\001\000\030\003" +
    "\341\004\065\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\042\125\043\062\044\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\122\004\065\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\037" +
    "\077\042\125\043\062\044\123\047\115\050\111\054\201" +
    "\055\344\056\072\060\202\061\070\062\117\063\130\064" +
    "\102\001\001\000\056\003\122\004\065\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\037\077\042" +
    "\125\043\062\044\123\047\115\050\111\054\205\056\072" +
    "\060\202\061\070\062\117\063\130\064\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\350\004\065" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\042" +
    "\125\043\062\044\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\122\004\065\005\104\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\037\077\042\125" +
    "\043\062\044\123\047\115\050\111\054\201\055\353\056" +
    "\072\060\202\061\070\062\117\063\130\064\102\001\001" +
    "\000\056\003\122\004\065\005\104\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\037\077\042\125\043\062" +
    "\044\123\047\115\050\111\054\205\056\072\060\202\061" +
    "\070\062\117\063\130\064\102\001\001\000\002\001\001" +
    "\000\056\003\122\004\065\005\104\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\037\077\042\125\043\062" +
    "\044\123\047\115\050\111\054\205\056\072\060\202\061" +
    "\070\062\117\063\130\064\102\001\001\000\040\003\167" +
    "\004\065\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\040\170\041\165\042\125\043\062\044\123\045\360" +
    "\046\152\001\001\000\002\001\001\000\004\041\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\364" +
    "\001\001\000\030\003\365\004\065\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\042\125\043\062\044\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\372\004\065\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\042\125\043" +
    "\062\044\123\052\375\053\374\001\001\000\040\003\122" +
    "\004\065\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\037\077\042\125\043\062\044\123\047\115" +
    "\050\u0103\001\001\000\040\003\122\004\065\005\104\006" +
    "\124\007\053\010\074\011\101\012\113\013\126\037\077" +
    "\042\125\043\062\044\123\047\115\050\u0102\001\001\000" +
    "\032\003\372\004\065\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\042\125\043\062\044\123\052\377\001" +
    "\001\000\002\001\001\000\040\003\122\004\065\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\037" +
    "\077\042\125\043\062\044\123\047\115\050\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\122\004\065" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\037\077\042\125\043\062\044\123\047\115\050\u0106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\035\017\032\022\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\010\027\u0113\001\001\000\056\003\122\004\065\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\037" +
    "\077\042\125\043\062\044\123\047\115\050\111\056\072" +
    "\057\u0114\060\107\061\070\062\117\063\130\064\102\001" +
    "\001\000\054\003\122\004\065\005\104\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\037\077\042\125\043" +
    "\062\044\123\047\115\050\111\056\072\060\254\061\070" +
    "\062\117\063\130\064\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\122\004\065\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\037\077\042" +
    "\125\043\062\044\123\047\115\050\111\056\072\057\u0118" +
    "\060\107\061\070\062\117\063\130\064\102\001\001\000" +
    "\054\003\122\004\065\005\104\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\037\077\042\125\043\062\044" +
    "\123\047\115\050\111\056\072\060\254\061\070\062\117" +
    "\063\130\064\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\u011e\021\u0120\023\u011d\001\001\000\002" +
    "\001\001\000\006\016\u011e\021\u0139\001\001\000\004\014" +
    "\u0124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0144\001\001\000\030\003\u013e\004" +
    "\065\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\042\125\043\062\044\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\u0140\004\065\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\042\125\043\062\044" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    this.table = new SymbolTable();
    this.stack = new SemanticStack();
    this.syntax_result = new SyntacticAnalysisResult();
    this.semantic_result = new SemanticAnalysisResult();
    this.writer = new FileWriter("out.asm");
    this.generateCode = true;
    this.writer.append("DATA Segment");

    }



    private SymbolTable table;
    private SemanticStack stack;
    private SyntacticAnalysisResult syntax_result;
    private SemanticAnalysisResult semantic_result;
    private FileWriter writer;
    private boolean generateCode;

    public SyntacticAnalysisResult getSyntacticResult()
    {
        return this.syntax_result;
    }

    public SemanticAnalysisResult getSemanticResult()
    {
        return this.semantic_result;
    }

    public SymbolTable getSymbolTable()
    {
        return this.table;
    }

    public void setGenerateCode(boolean flag)
    {
        this.generateCode = flag;
    }

    public int error_sync_size()
    {
        return 1;
    }
 
    public void report_error(String message, Object info)
    {
        if (info == null)
        {
            Lexer scanner = ((Lexer) this.getScanner());
            info = scanner.getLastToken();
        }
        if (info instanceof Symbol)
        {
            Symbol s = ((Symbol) info);
            this.syntax_result.addError(message, s);
        }
    }
   
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        this._done_parsing = true;
    }

    public void syntax_error(Symbol current_token)
    {
    }

    public void unrecovered_syntax_error(Symbol current_token)
    {
        report_fatal_error("Couldn't repair and continue parse", current_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // assignment_operator ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assignment_operator ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // assignment_operator ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // assignment_operator ::= DIV_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // assignment_operator ::= TIMES_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // assignment_operator ::= SHIFT_LEFT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment_operator ::= SHIFT_RIGHT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condition_list_operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // condition_list_operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // condition_list_operator ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // condition_operator ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // condition_operator ::= NOT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condition_operator ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condition_operator ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condition_operator ::= GREATER_EQUALS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition_operator ::= LESS_EQUALS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // data_type ::= STRING 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // data_type ::= CHAR 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // data_type ::= REAL 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data_type ::= BYTE 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_type ::= INT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= LONGINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= SHORTINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_type ::= BOOLEAN 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_data_type ::= CHAR 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_data_type ::= INT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array_data_type ::= LONGINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_data_type ::= SHORTINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // number_term ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n.doubleValue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // number_term ::= DOUBLE 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literal_term ::= XSTRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literal_term ::= CHARACTER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boolean_term ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boolean_term ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= number_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= literal_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= boolean_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // term ::= XBYTE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte t = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // term ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // term ::= NIL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= function_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= number_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= identifier_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= byte_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte e = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= literal_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= boolean_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NIL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if (e1 instanceof Double && e2 instanceof Double)
        {
            RESULT = ((Double) e1) + ((Double) e2);
        }
        else if (e1 instanceof String && e2 instanceof String)
        {
            RESULT = ((String) e1) + ((String) e2);
        }
        else
        {
            report_error("Bad operant for operator +.", null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // number_expr ::= number_expr PLUS number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV AX, " + e1);
        writer.append("ADD AX, " + e2);
        RESULT = e1 + e2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // number_expr ::= number_expr MINUS number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV AX, " + e1);
        writer.append("SUB AX, " + e2);
        RESULT = e1 - e2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // number_expr ::= number_expr TIMES number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV AX, " + e1);
        writer.append("MUL AX, " + e2);
        RESULT = e1 * e2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // number_expr ::= number_expr DIV number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV DX, 0");
        writer.append("MOV AX, " + e1);
        writer.append("MOV BX, " + e2);
        writer.append("DIV BX");
        RESULT = e1 / e2; 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // number_expr ::= number_expr MOD number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV DX, 0");
        writer.append("MOV AX, " + e1);
        writer.append("MOV BX, " + e2);
        writer.append("DIV BX");
        RESULT = e1 % e2;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // number_expr ::= MINUS number_expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        writer.append("MOV AX, 0");
        writer.append("SUB AX, " + e);
        RESULT = -e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // number_expr ::= number_term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = t;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // number_expr ::= number_term error number_term 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 report_error("Invalid operator " + e + " in expression.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // identifier_expr ::= IDENTIFIER PLUS_PLUS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if(row.getValue() != null)
            {
                if (row.getValue() instanceof Number)
                {
                    Double value = (Double) row.getValue(); //Get the value from the row.
                    RESULT = value;
                    row.setValue(value++);
                }
                else
                {
                    report_error("Bad operand " + row.getTypeName() + " for operator ++.", null);
                }
            }
            else
            {
                report_error("Variable not initialized" , null);
            }

                    
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // identifier_expr ::= IDENTIFIER MINUS_MINUS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                RESULT = value;
                row.setValue(--value);
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator --.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // identifier_expr ::= PLUS_PLUS IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                row.setValue(++value);
                RESULT = value;
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator ++.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // identifier_expr ::= MINUS_MINUS IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            if (row.getValue() instanceof Double)
            {
                Double value = (Double) row.getValue(); //Get the value from the row.
                row.setValue(--value);
                RESULT = value;
            }
            else
            {
                report_error("Bad operant " + row.getTypeName() + " for operator --.", null);
            }
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifier_expr ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try
        {
            TableRow row = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            RESULT = row.getValue();
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // byte_expr ::= byte_expr SHIFT_LEFT NUMBER 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte((byte) (b << n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // byte_expr ::= byte_expr SHIFT_RIGHT NUMBER 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte((byte) (b >> n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // byte_expr ::= XBYTE 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal_expr ::= literal_expr PLUS literal_expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal_expr ::= literal_term 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment_expr ::= IDENTIFIER assignment_operator expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        try
        {
            TableRow row  = table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            row.setValue(e);
            RESULT = e;
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment_expr ::= IDENTIFIER assignment_operator 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 report_error("Expected expression in assigment of " + i + " .", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment_expr ::= assignment_operator expr 
            {
              Object RESULT =null;
		 report_error("Expected identifier in assigment.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment_expr ::= assignment_operator 
            {
              Object RESULT =null;
		 report_error("Expected identifier and expression in assigment.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condition ::= LPAREN condition RPAREN 
            {
              Condition RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condition ::= expr EQUALS expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.EQUALS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condition ::= expr NOT_EQUALS expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.NOT_EQUALS, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condition ::= expr GREATER_THAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.GREATER_THAN, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condition ::= expr LESS_THAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.LESS_THAN, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condition ::= expr GREATER_EQUALS_THAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.GREATER_EQUALS_THAN, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condition ::= expr LESS_EQUALS_THAN expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e1, ParserSym.LESS_EQUALS_THAN, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condition ::= expr 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Condition(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condition ::= condition_operator expr 
            {
              Condition RESULT =null;
		 report_error("Expected expression in condition.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condition_list ::= LPAREN condition_list RPAREN 
            {
              List<Condition> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condition_list ::= condition_list condition_list_operator condition_list 
            {
              List<Condition> RESULT =null;
		int cl1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cl1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Condition> cl1 = (List<Condition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cl2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cl2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Condition> cl2 = (List<Condition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condition_list ::= NOT condition_list 
            {
              List<Condition> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condition_list ::= condition 
            {
              List<Condition> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<Condition> list = new LinkedList();
        list.add(c);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condition_list ::= condition_list_operator condition_list 
            {
              List<Condition> RESULT =null;
		 report_error("Missing condition in condition list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condition_list ::= NOT error 
            {
              List<Condition> RESULT =null;
		 report_error("Missing condition in condition list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        il.add(id);
        RESULT = il;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // identifier_list ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<String> list = new LinkedList();
        list.add(id);
        RESULT = list;  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // identifier_list ::= identifier_list IDENTIFIER 
            {
              List<String> RESULT =null;
		 report_error("Missing comma in identifier list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // identifier_list ::= identifier_list COMMA error 
            {
              List<String> RESULT =null;
		 report_error("Missing identifier in identifier list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable_declaration ::= identifier_list COLON data_type SEMI 
            {
              List<TableRow> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           TableRow row = new TableRow(id, type);
           list.add(row);
       }
       RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable_declaration ::= identifier_list COLON ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF array_data_type SEMI 
            {
              List<TableRow> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int array_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int array_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer array_type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           ArrayTableRow row = new ArrayTableRow(id, type, array_type, n2 - n1);
           list.add(row);
       }
       RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable_declaration ::= identifier_list data_type SEMI 
            {
              List<TableRow> RESULT =null;
		 report_error("Missing colon in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable_declaration ::= identifier_list COLON SEMI 
            {
              List<TableRow> RESULT =null;
		 report_error("Missing data type in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable_declaration_list ::= variable_declaration_list variable_declaration 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> v = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.addAll(v);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable_declaration_list ::= variable_declaration 
            {
              List<TableRow> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> v = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = v;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable_declaration_block ::= VAR variable_declaration_list END 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        for (TableRow var : list)
       {
            String asm = var.getIdentifier()+" resd   2";//Reserves two double word(8 bytes) for each variable.
            writer.append(asm);//writes the asm code to the file.
       }
        writer.append("DATA EndS");
        writer.append("CODE Segment");
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable_declaration_block ::= 
            {
              List<TableRow> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant_declaration ::= IDENTIFIER EQUALS expr SEMI 
            {
              TableRow RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        TableRow row = new TableRow(id, -1, e, true);
        RESULT = row;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // constant_declaration ::= IDENTIFIER expr SEMI 
            {
              TableRow RESULT =null;
		 report_error("Missing operator in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // constant_declaration ::= IDENTIFIER EQUALS SEMI 
            {
              TableRow RESULT =null;
		 report_error("Missing espression in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // constant_declaration_list ::= constant_declaration_list constant_declaration 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow c = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(c);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // constant_declaration_list ::= constant_declaration 
            {
              List<TableRow> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow c = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<TableRow> list = new LinkedList();
        list.add(c);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // constant_declaration_block ::= CONST constant_declaration_list END 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // constant_declaration_block ::= 
            {
              List<TableRow> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaration_block ::= constant_declaration_block variable_declaration_block 
            {
              List<TableRow> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> l1 = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> l2 = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<TableRow> list = new LinkedList();
        list.addAll(l1);
        list.addAll(l2);

        for (TableRow row : list)
        {
            table.declareSymbol(row);
        }

        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter_declaration ::= data_type IDENTIFIER 
            {
              TableRow RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = new TableRow(id, type);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter_declaration ::= error IDENTIFIER 
            {
              TableRow RESULT =null;
		 report_error("Missing data type in paramater declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter_declaration ::= data_type error 
            {
              TableRow RESULT =null;
		 report_error("Missing identifier in parameter declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_declaration_list ::= parameter_declaration_list COMMA parameter_declaration 
            {
              List<TableRow> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TableRow> l = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow p = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        l.add(p);
        table.declareSymbol(p);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter_declaration_list ::= parameter_declaration 
            {
              List<TableRow> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow p = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         List<TableRow> list = new LinkedList();
         list.add(p);
         table.pushScope("Function scope");
         table.declareSymbol(p);
         RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter_declaration_list ::= 
            {
              List<TableRow> RESULT =null;
		
         RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameter_list_forced ::= parameter_list_forced COMMA expr 
            {
              List RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         pl.add(e);
         RESULT = pl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_forced",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parameter_list_forced ::= expr 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         List<Object> list = new LinkedList();
         list.add(e);
         RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_forced",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parameter_list ::= parameter_list COMMA expr 
            {
              List RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         pl.add(e);
         RESULT = pl;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parameter_list ::= expr 
            {
              List RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         List<Object> list = new LinkedList();
         list.add(e);
         RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parameter_list ::= 
            {
              List RESULT =null;
		
         RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parameter_list ::= error 
            {
              List RESULT =null;
		 report_error("Missing expression in parameter list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentence_item ::= assignment_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentence_item ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentence ::= sentence_item SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // code_block_item ::= sentence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // code_block_item ::= for_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // code_block_item ::= while_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // code_block_item ::= repeat_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // code_block_item ::= if_statement 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = str; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // code_block_item ::= case_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // code_block ::= code_block code_block_item 
            {
              String RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ci = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cb + System.lineSeparator() + ci; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // code_block ::= code_block_item 
            {
              String RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ci = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ci; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // iteration_item ::= code_block_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_item",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // iteration_item ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_item",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // iteration_item ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_item",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // iteration_block ::= iteration_block iteration_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // iteration_block ::= iteration_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteration_block",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr TO expr DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
        try
        {
            TableRow row = new TableRow(id, ParserSym.INT);
            row.setValue(e);
            table.declareSymbol(row); //Saves the new row in the symbols table.
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_statement ::= FOR ASSIGNMENT expr TO expr DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		 report_error("Missing identifier in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_statement ::= FOR IDENTIFIER expr TO expr DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		 report_error("Missing assignment in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for_statement ::= FOR IDENTIFIER ASSIGNMENT TO expr DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		 report_error("Missing expression in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr expr DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		 report_error("Missing reserved word in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr TO error DO BEGIN iteration_block END 
            {
              Object RESULT =null;
		 report_error("Missing expression in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // while_statement ::= WHILE condition_list DO BEGIN iteration_block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // while_statement ::= WHILE error END 
            {
              Object RESULT =null;
		 report_error("Error in while statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // repeat_statement ::= REPEAT iteration_block UNTIL condition_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // repeat_statement ::= REPEAT iteration_block UNTIL error 
            {
              Object RESULT =null;
		 report_error("Missing condition in repeat statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // if_statement ::= IF condition_list THEN code_block ELSE code_block END 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Condition> cl = (List<Condition>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        IfSemanticRegistry registry = new IfSemanticRegistry();
        stack.push(registry);
        String else_label = LabelGenerator.getInstance().getLabel("else_label");
        String exit_label = LabelGenerator.getInstance().getLabel("exit_label");
        Condition condition = cl.get(0);
        StringBuilder str = new StringBuilder();
        String conditionCode = condition.getAssemblyCode();
        str.append(conditionCode+" "+else_label).append(System.lineSeparator());
        str.append("If code block goes here").append(System.lineSeparator()); 
        str.append("JMP "+exit_label).append(System.lineSeparator()); 
        str.append(else_label+":").append(System.lineSeparator());
        str.append("Else code block goes here").append(System.lineSeparator());
        str.append(exit_label+":").append(System.lineSeparator());
        str.append("code block").append(System.lineSeparator());
        RESULT = str.toString();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // if_statement ::= IF condition_list THEN code_block END 
            {
              String RESULT =null;
		
        IfSemanticRegistry registry = new IfSemanticRegistry();
        stack.push(registry);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // if_statement ::= IF condition_list THEN error 
            {
              String RESULT =null;
		 report_error("Missing sentence in if statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // if_statement ::= IF condition_list THEN code_block ELSE error 
            {
              String RESULT =null;
		 report_error("Missing else sentence in if statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // case_item ::= expr COLON sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // case_item ::= expr sentence 
            {
              Object RESULT =null;
		 report_error("Missing colon in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // case_item ::= expr COLON error 
            {
              Object RESULT =null;
		 report_error("Missing sentence in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // case_item ::= COLON sentence 
            {
              Object RESULT =null;
		 report_error("Missing expression in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // case_list ::= case_list case_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // case_list ::= case_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // case_statement ::= CASE IDENTIFIER OF case_list ELSE sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // case_statement ::= CASE error ELSE 
            {
              Object RESULT =null;
		 report_error("Error in case statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // case_statement ::= CASE IDENTIFIER OF case_list ELSE error 
            {
              Object RESULT =null;
		 report_error("Invalid sentence in case statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // return_block ::= IDENTIFIER assignment_operator expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return_block",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function ::= FUNCTION IDENTIFIER LPAREN parameter_declaration_list RPAREN COLON data_type BEGIN declaration_block code_block return_block END 
            {
              FunctionTableRow RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		List<TableRow> p = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cb = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        FunctionTableRow functionRow = new FunctionTableRow(id, ParserSym.FUNCTION, dt);
        functionRow.setParameters(p);

        if(!(functionRow.getReturnDataType()).isAssignableFrom(rb.getClass()))
        {
            report_error("Incompatible return data type.", null);;
        }

        table.popScope();
        table.declareSymbol(functionRow);
        writer.append(id+" proc");
        writer.append(cb);
        writer.append("ret");
        RESULT = functionRow;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function ::= FUNCTION error END 
            {
              FunctionTableRow RESULT =null;
		 report_error("Error in function declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // procedure ::= PROCEDURE IDENTIFIER LPAREN parameter_declaration_list RPAREN BEGIN declaration_block code_block END 
            {
              FunctionTableRow RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<TableRow> p = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        FunctionTableRow procedureRow = new FunctionTableRow(id, ParserSym.PROCEDURE, ParserSym.NIL);
        procedureRow.setParameters(p);

        table.popScope();
        table.declareSymbol(procedureRow);

        RESULT = procedureRow;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // procedure ::= PROCEDURE error END 
            {
              FunctionTableRow RESULT =null;
		 report_error("Error in procedure declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // function_item ::= function 
            {
              FunctionTableRow RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionTableRow f = (FunctionTableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_item",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // function_item ::= procedure 
            {
              FunctionTableRow RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionTableRow p = (FunctionTableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_item",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // function_list ::= function_list function_item 
            {
              List<FunctionTableRow> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<FunctionTableRow> l = (List<FunctionTableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionTableRow f = (FunctionTableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        l.add(f);
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // function_list ::= function_item 
            {
              List<FunctionTableRow> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionTableRow f = (FunctionTableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<FunctionTableRow> list = new LinkedList();
        list.add(f);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // functions_declaration ::= function_list 
            {
              List<FunctionTableRow> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionTableRow> l = (List<FunctionTableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // functions_declaration ::= 
            {
              List<FunctionTableRow> RESULT =null;
		
        RESULT = new LinkedList<FunctionTableRow>();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_declaration",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // function_read ::= READ LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_read",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // function_write ::= WRITE LPAREN parameter_list_forced RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // function_write ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		 report_error("Function write must have at least one parameter.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_write",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // function_call ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        try
        {
            FunctionTableRow functionRow  = (FunctionTableRow) table.lookupSymbol(id); //Retrieve the row of the table where is stored.
            List<TableRow> functionParameters = functionRow.getParameters();
            int expectedParameters = functionParameters.size();
            int givenParameters = pl.size();
            if(givenParameters == expectedParameters)
            {
                for(int i = 0; i < expectedParameters; i++)
                {//Set the value for each parameter of the function, acording to the values given in the parameter list in the function call.
                    TableRow parameterRow = functionParameters.get(i);
                    parameterRow.setValue(pl.get(i));
                }
            }
            else
            {
                report_error("Argument list difer in length. Expected "+expectedParameters +" Got " + givenParameters, null);
            }           
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // function_call ::= function_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // function_call ::= function_read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // program ::= PROGRAM IDENTIFIER declaration_block functions_declaration BEGIN code_block END 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int funsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<FunctionTableRow> funs = (List<FunctionTableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        writer.append("CODE EndS"); 
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // program ::= error 
            {
              Object RESULT =null;
		 report_error("Error in program.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
