
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package compiler.parser;

import java_cup.runtime.Symbol;
import compiler.scanner.Lexer;
import compiler.SemanticAnalysisResult;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\245\000\002\002\004\000\002\007\003\000\002\007" +
    "\003\000\002\012\003\000\002\012\003\000\002\006\003" +
    "\000\002\006\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\003\000\002\010" +
    "\005\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\003\000\002\013\005\000\002" +
    "\013\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\003\000\002\036\004\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\004\000\002\037\003\000\002\037" +
    "\004\000\002\037\004\000\002\016\005\000\002\016\003" +
    "\000\002\016\004\000\002\016\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\021\006\000\002\021\016\000" +
    "\002\021\005\000\002\021\005\000\002\023\004\000\002" +
    "\023\003\000\002\025\005\000\002\025\002\000\002\020" +
    "\006\000\002\020\005\000\002\020\005\000\002\024\004" +
    "\000\002\024\003\000\002\026\005\000\002\026\002\000" +
    "\002\027\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\022\005\000\002\022\003\000\002\022" +
    "\002\000\002\042\005\000\002\042\003\000\002\041\005" +
    "\000\002\041\003\000\002\041\002\000\002\041\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\004\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\004" +
    "\000\002\046\003\000\002\051\014\000\002\051\013\000" +
    "\002\051\013\000\002\051\013\000\002\051\013\000\002" +
    "\051\014\000\002\052\010\000\002\052\005\000\002\053" +
    "\006\000\002\053\006\000\002\054\011\000\002\054\007" +
    "\000\002\054\006\000\002\054\010\000\002\047\005\000" +
    "\002\047\004\000\002\047\005\000\002\047\004\000\002" +
    "\050\004\000\002\050\003\000\002\055\010\000\002\055" +
    "\005\000\002\055\010\000\002\056\015\000\002\056\005" +
    "\000\002\057\013\000\002\057\005\000\002\062\003\000" +
    "\002\062\003\000\002\063\004\000\002\063\003\000\002" +
    "\064\003\000\002\064\002\000\002\034\006\000\002\033" +
    "\006\000\002\033\005\000\002\035\006\000\002\035\003" +
    "\000\002\035\003\000\002\065\011\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\006\003\005\063\006\001\002\000\004\002" +
    "\u0130\001\002\000\004\002\uff5d\001\002\000\004\125\007" +
    "\001\002\000\014\042\uff9e\044\010\074\uff9e\110\uff9e\111" +
    "\uff9e\001\002\000\004\125\u0126\001\002\000\100\004\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\052\uffa5" +
    "\055\uffa5\064\uffa5\066\uffa5\074\u0105\075\uffa5\077\uffa5\110" +
    "\uffa5\111\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5\123\uffa5" +
    "\124\uffa5\125\uffa5\126\uffa5\127\uffa5\001\002\000\010\042" +
    "\uff65\110\021\111\017\001\002\000\010\042\uff6a\110\uff6a" +
    "\111\uff6a\001\002\000\010\042\uff67\110\uff67\111\uff67\001" +
    "\002\000\010\042\uff66\110\021\111\017\001\002\000\004" +
    "\042\u0101\001\002\000\006\003\367\125\370\001\002\000" +
    "\010\042\uff69\110\uff69\111\uff69\001\002\000\006\003\022" +
    "\125\023\001\002\000\004\050\366\001\002\000\004\004" +
    "\024\001\002\000\030\003\035\005\uff97\101\uff97\105\027" +
    "\106\037\107\040\112\025\113\026\114\034\115\032\116" +
    "\031\001\002\000\012\003\uffb4\042\uffb4\100\uffb4\125\uffb4" +
    "\001\002\000\012\003\uffb3\042\uffb3\100\uffb3\125\uffb3\001" +
    "\002\000\012\003\uffb1\042\uffb1\100\uffb1\125\uffb1\001\002" +
    "\000\006\005\045\101\044\001\002\000\012\003\uffb8\042" +
    "\uffb8\100\uffb8\125\uffb8\001\002\000\012\003\uffb2\042\uffb2" +
    "\100\uffb2\125\uffb2\001\002\000\006\005\uff98\101\uff98\001" +
    "\002\000\012\003\uffb6\042\uffb6\100\uffb6\125\uffb6\001\002" +
    "\000\004\125\043\001\002\000\006\003\041\125\042\001" +
    "\002\000\012\003\uffb5\042\uffb5\100\uffb5\125\uffb5\001\002" +
    "\000\012\003\uffb7\042\uffb7\100\uffb7\125\uffb7\001\002\000" +
    "\006\005\uff9a\101\uff9a\001\002\000\006\005\uff9c\101\uff9c" +
    "\001\002\000\006\005\uff9b\101\uff9b\001\002\000\024\003" +
    "\035\105\027\106\037\107\040\112\025\113\026\114\034" +
    "\115\032\116\031\001\002\000\004\102\046\001\002\000" +
    "\022\105\027\106\037\107\040\112\025\113\026\114\034" +
    "\115\032\116\031\001\002\000\004\042\050\001\002\000" +
    "\074\004\uff9e\011\uff9e\012\uff9e\013\uff9e\017\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\040\uff9e\041\uff9e\043\uff9e\044" +
    "\010\052\uff9e\055\uff9e\064\uff9e\066\uff9e\074\uff9e\075\uff9e" +
    "\077\uff9e\117\uff9e\120\uff9e\121\uff9e\122\uff9e\123\uff9e\124" +
    "\uff9e\125\uff9e\126\uff9e\127\uff9e\001\002\000\070\004\061" +
    "\011\104\012\064\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\043\056\052\066\055\101" +
    "\064\117\066\063\075\121\077\067\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\132\126\106\127\130" +
    "\001\002\000\140\004\ufffe\005\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\040\ufffe\041\ufffe\043\ufffe\045\ufffe" +
    "\047\ufffe\050\ufffe\052\ufffe\055\ufffe\064\ufffe\066\ufffe\070" +
    "\ufffe\071\ufffe\073\ufffe\075\ufffe\077\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\117\ufffe\120\ufffe\121\ufffe\122\ufffe\123\ufffe\124" +
    "\ufffe\125\ufffe\126\ufffe\127\ufffe\001\002\000\042\004\uffda" +
    "\011\uffda\012\uffda\013\uffda\064\uffda\077\uffda\100\uffda\117" +
    "\uffda\120\uffda\121\uffda\122\uffda\123\uffda\124\uffda\125\uffda" +
    "\126\uffda\127\uffda\001\002\000\150\003\363\004\uffe6\005" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\040\uffe6\041\uffe6\043\uffe6\045\uffe6\047" +
    "\uffe6\050\uffe6\052\uffe6\055\uffe6\064\uffe6\066\uffe6\070\uffe6" +
    "\071\uffe6\073\uffe6\075\uffe6\077\uffe6\100\uffe6\101\uffe6\102" +
    "\uffe6\117\uffe6\120\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6" +
    "\125\uffe6\126\uffe6\127\uffe6\001\002\000\004\125\362\001" +
    "\002\000\006\003\341\125\342\001\002\000\150\003\uffff" +
    "\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031" +
    "\uffff\032\uffff\033\uffff\034\uffff\040\uffff\041\uffff\043\uffff" +
    "\045\uffff\047\uffff\050\uffff\052\uffff\055\uffff\064\uffff\066" +
    "\uffff\070\uffff\071\uffff\073\uffff\075\uffff\077\uffff\100\uffff" +
    "\101\uffff\102\uffff\117\uffff\120\uffff\121\uffff\122\uffff\123" +
    "\uffff\124\uffff\125\uffff\126\uffff\127\uffff\001\002\000\072" +
    "\004\061\011\104\012\064\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\050\340" +
    "\052\066\055\101\064\117\066\063\075\121\077\067\117" +
    "\074\120\110\121\057\122\052\123\107\124\071\125\132" +
    "\126\106\127\130\001\002\000\040\004\061\011\104\012" +
    "\064\013\055\064\117\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\140\126\106\127\130\001" +
    "\002\000\136\004\uff5f\005\uff5f\011\uff5f\012\uff5f\013\uff5f" +
    "\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025" +
    "\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f" +
    "\034\uff5f\040\uff5f\041\uff5f\043\uff5f\045\uff5f\047\uff5f\050" +
    "\uff5f\052\uff5f\055\uff5f\064\uff5f\066\uff5f\070\uff5f\071\uff5f" +
    "\073\uff5f\075\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f\117" +
    "\uff5f\120\uff5f\121\uff5f\122\uff5f\123\uff5f\124\uff5f\125\uff5f" +
    "\126\uff5f\127\uff5f\001\002\000\070\004\061\011\104\012" +
    "\064\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\052\066\055\101\064\117\066" +
    "\063\075\121\077\067\117\074\120\110\121\057\122\052" +
    "\123\107\124\071\125\132\126\106\127\130\001\002\000" +
    "\010\012\064\120\110\121\057\001\002\000\136\004\ufff1" +
    "\005\ufff1\011\ufff1\012\ufff1\013\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\040\ufff1\041" +
    "\ufff1\043\ufff1\045\ufff1\047\ufff1\050\ufff1\052\ufff1\055\ufff1" +
    "\064\ufff1\066\ufff1\070\ufff1\071\ufff1\073\ufff1\075\ufff1\077" +
    "\ufff1\100\ufff1\101\ufff1\102\ufff1\117\ufff1\120\ufff1\121\ufff1" +
    "\122\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1\001" +
    "\002\000\006\017\262\125\263\001\002\000\004\004\253" +
    "\001\002\000\076\004\uff8c\011\uff8c\012\uff8c\013\uff8c\017" +
    "\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\040\uff8c\041\uff8c" +
    "\043\uff8c\047\uff8c\050\uff8c\052\uff8c\055\uff8c\064\uff8c\066" +
    "\uff8c\073\uff8c\075\uff8c\077\uff8c\117\uff8c\120\uff8c\121\uff8c" +
    "\122\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c\127\uff8c\001" +
    "\002\000\140\004\ufffd\005\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\ufffd\040\ufffd\041\ufffd\043\ufffd\045\ufffd\047" +
    "\ufffd\050\ufffd\052\ufffd\055\ufffd\064\ufffd\066\ufffd\070\ufffd" +
    "\071\ufffd\073\ufffd\075\ufffd\077\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\117\ufffd\120\ufffd\121\ufffd\122\ufffd\123\ufffd\124\ufffd" +
    "\125\ufffd\126\ufffd\127\ufffd\001\002\000\042\004\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\064\uffd7\077\uffd7\100\uffd7\117\uffd7" +
    "\120\uffd7\121\uffd7\122\uffd7\123\uffd7\124\uffd7\125\uffd7\126" +
    "\uffd7\127\uffd7\001\002\000\076\004\uff89\011\uff89\012\uff89" +
    "\013\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\040" +
    "\uff89\041\uff89\043\uff89\047\uff89\050\uff89\052\uff89\055\uff89" +
    "\064\uff89\066\uff89\073\uff89\075\uff89\077\uff89\117\uff89\120" +
    "\uff89\121\uff89\122\uff89\123\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\001\002\000\136\004\uffed\005\uffed\011\uffed\012" +
    "\uffed\013\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\040\uffed\041\uffed\043\uffed\045\uffed" +
    "\047\uffed\050\uffed\052\uffed\055\uffed\064\uffed\066\uffed\070" +
    "\uffed\071\uffed\073\uffed\075\uffed\077\uffed\100\uffed\101\uffed" +
    "\102\uffed\117\uffed\120\uffed\121\uffed\122\uffed\123\uffed\124" +
    "\uffed\125\uffed\126\uffed\127\uffed\001\002\000\146\004\ufff2" +
    "\005\ufff2\010\242\011\ufff2\012\243\013\ufff2\014\244\015" +
    "\245\016\241\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2" +
    "\047\ufff2\050\ufff2\052\ufff2\055\ufff2\064\ufff2\066\ufff2\070" +
    "\ufff2\071\ufff2\073\ufff2\075\ufff2\077\ufff2\100\ufff2\101\ufff2" +
    "\102\ufff2\117\ufff2\120\ufff2\121\ufff2\122\ufff2\123\ufff2\124" +
    "\ufff2\125\ufff2\126\ufff2\127\ufff2\001\002\000\042\004\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\064\uffd4\077\uffd4\100\uffd4\117" +
    "\uffd4\120\uffd4\121\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4" +
    "\126\uffd4\127\uffd4\001\002\000\042\004\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\064\uffd6\077\uffd6\100\uffd6\117\uffd6\120\uffd6" +
    "\121\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127" +
    "\uffd6\001\002\000\042\004\061\011\104\012\064\013\055" +
    "\064\117\077\067\100\uffd0\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\140\126\106\127\130\001\002" +
    "\000\064\004\154\011\104\012\064\013\055\024\152\025" +
    "\165\026\155\027\171\030\161\031\162\032\157\033\160" +
    "\034\153\035\156\064\117\077\067\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\140\126\106\127\130" +
    "\001\002\000\142\004\ufff0\005\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\036\224\037\223\040\ufff0\041\ufff0\043\ufff0" +
    "\045\ufff0\047\ufff0\050\ufff0\052\ufff0\055\ufff0\064\ufff0\066" +
    "\ufff0\070\ufff0\071\ufff0\073\ufff0\075\ufff0\077\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\117\ufff0\120\ufff0\121\ufff0\122\ufff0\123" +
    "\ufff0\124\ufff0\125\ufff0\126\ufff0\127\ufff0\001\002\000\076" +
    "\004\uff88\011\uff88\012\uff88\013\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\040\uff88\041\uff88\043\uff88\047\uff88" +
    "\050\uff88\052\uff88\055\uff88\064\uff88\066\uff88\073\uff88\075" +
    "\uff88\077\uff88\117\uff88\120\uff88\121\uff88\122\uff88\123\uff88" +
    "\124\uff88\125\uff88\126\uff88\127\uff88\001\002\000\004\125" +
    "\222\001\002\000\004\100\uff90\001\002\000\136\004\ufffc" +
    "\005\ufffc\011\ufffc\012\ufffc\013\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\040\ufffc\041" +
    "\ufffc\043\ufffc\045\ufffc\047\ufffc\050\ufffc\052\ufffc\055\ufffc" +
    "\064\ufffc\066\ufffc\070\ufffc\071\ufffc\073\ufffc\075\ufffc\077" +
    "\ufffc\100\ufffc\101\ufffc\102\ufffc\117\ufffc\120\ufffc\121\ufffc" +
    "\122\ufffc\123\ufffc\124\ufffc\125\ufffc\126\ufffc\127\ufffc\001" +
    "\002\000\142\004\uffdd\005\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\045" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\055\uffdd\064\uffdd\066\uffdd" +
    "\070\uffdd\071\uffdd\073\uffdd\075\uffdd\077\uffdd\100\uffdd\101" +
    "\uffdd\102\uffdd\117\uffdd\120\uffdd\121\uffdd\122\uffdd\123\uffdd" +
    "\124\uffdd\125\uffdd\126\uffdd\127\uffdd\001\002\000\150\003" +
    "\000\004\000\005\000\010\000\011\000\012\000\013\000" +
    "\014\000\015\000\016\000\017\000\020\000\021\000\022" +
    "\000\023\000\024\000\025\000\026\000\027\000\030\000" +
    "\031\000\032\000\033\000\034\000\040\000\041\000\043" +
    "\000\045\000\047\000\050\000\052\000\055\000\064\000" +
    "\066\000\070\000\071\000\073\000\075\000\077\000\100" +
    "\000\101\000\102\000\117\000\120\000\121\000\122\000" +
    "\123\000\124\000\125\000\126\000\127\000\001\002\000" +
    "\076\004\uff86\011\uff86\012\uff86\013\uff86\017\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\040\uff86\041\uff86\043\uff86\047" +
    "\uff86\050\uff86\052\uff86\055\uff86\064\uff86\066\uff86\073\uff86" +
    "\075\uff86\077\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123" +
    "\uff86\124\uff86\125\uff86\126\uff86\127\uff86\001\002\000\076" +
    "\004\uff8d\011\uff8d\012\uff8d\013\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\040\uff8d\041\uff8d\043\uff8d\047\uff8d" +
    "\050\uff8d\052\uff8d\055\uff8d\064\uff8d\066\uff8d\073\uff8d\075" +
    "\uff8d\077\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d\123\uff8d" +
    "\124\uff8d\125\uff8d\126\uff8d\127\uff8d\001\002\000\042\004" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\064\uffd8\077\uffd8\100\uffd8" +
    "\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8\125" +
    "\uffd8\126\uffd8\127\uffd8\001\002\000\140\004\uffdb\005\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\045\uffdb\047\uffdb\050\uffdb\052\uffdb\055\uffdb" +
    "\064\uffdb\066\uffdb\070\uffdb\071\uffdb\073\uffdb\075\uffdb\077" +
    "\uffdb\100\uffdb\101\uffdb\102\uffdb\117\uffdb\120\uffdb\121\uffdb" +
    "\122\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127\uffdb\001" +
    "\002\000\042\004\uffd5\011\uffd5\012\uffd5\013\uffd5\064\uffd5" +
    "\077\uffd5\100\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123" +
    "\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\001\002\000\004" +
    "\100\221\001\002\000\004\004\216\001\002\000\076\004" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\040\uff8b\041\uff8b\043\uff8b\047\uff8b\050" +
    "\uff8b\052\uff8b\055\uff8b\064\uff8b\066\uff8b\073\uff8b\075\uff8b" +
    "\077\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b\123\uff8b\124" +
    "\uff8b\125\uff8b\126\uff8b\127\uff8b\001\002\000\066\003\163" +
    "\004\154\011\104\012\064\013\055\024\152\025\165\026" +
    "\155\027\171\030\161\031\162\032\157\033\160\034\153" +
    "\035\156\064\117\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\140\126\106\127\130\001\002" +
    "\000\042\004\uffd9\011\uffd9\012\uffd9\013\uffd9\064\uffd9\077" +
    "\uffd9\100\uffd9\117\uffd9\120\uffd9\121\uffd9\122\uffd9\123\uffd9" +
    "\124\uffd9\125\uffd9\126\uffd9\127\uffd9\001\002\000\004\100" +
    "\uff8f\001\002\000\136\004\ufff3\005\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\040\ufff3\041\ufff3\043\ufff3\045\ufff3\047" +
    "\ufff3\050\ufff3\052\ufff3\055\ufff3\064\ufff3\066\ufff3\070\ufff3" +
    "\071\ufff3\073\ufff3\075\ufff3\077\ufff3\100\ufff3\101\ufff3\102" +
    "\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123\ufff3\124\ufff3" +
    "\125\ufff3\126\ufff3\127\ufff3\001\002\000\136\004\uffee\005" +
    "\uffee\011\uffee\012\uffee\013\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\040\uffee\041\uffee" +
    "\043\uffee\045\uffee\047\uffee\050\uffee\052\uffee\055\uffee\064" +
    "\uffee\066\uffee\070\uffee\071\uffee\073\uffee\075\uffee\077\uffee" +
    "\100\uffee\101\uffee\102\uffee\117\uffee\120\uffee\121\uffee\122" +
    "\uffee\123\uffee\124\uffee\125\uffee\126\uffee\127\uffee\001\002" +
    "\000\136\004\uff60\005\uff60\011\uff60\012\uff60\013\uff60\017" +
    "\uff60\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60" +
    "\026\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034" +
    "\uff60\040\uff60\041\uff60\043\uff60\045\uff60\047\uff60\050\uff60" +
    "\052\uff60\055\uff60\064\uff60\066\uff60\070\uff60\071\uff60\073" +
    "\uff60\075\uff60\077\uff60\100\uff60\101\uff60\102\uff60\117\uff60" +
    "\120\uff60\121\uff60\122\uff60\123\uff60\124\uff60\125\uff60\126" +
    "\uff60\127\uff60\001\002\000\140\004\uffef\005\uffef\010\147" +
    "\011\uffef\012\uffef\013\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\040\uffef\041\uffef\043" +
    "\uffef\045\uffef\047\uffef\050\uffef\052\uffef\055\uffef\064\uffef" +
    "\066\uffef\070\uffef\071\uffef\073\uffef\075\uffef\077\uffef\100" +
    "\uffef\101\uffef\102\uffef\117\uffef\120\uffef\121\uffef\122\uffef" +
    "\123\uffef\124\uffef\125\uffef\126\uffef\127\uffef\001\002\000" +
    "\136\004\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\040\ufffb\041\ufffb\043\ufffb\045\ufffb\047\ufffb\050\ufffb\052" +
    "\ufffb\055\ufffb\064\ufffb\066\ufffb\070\ufffb\071\ufffb\073\ufffb" +
    "\075\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\117\ufffb\120" +
    "\ufffb\121\ufffb\122\ufffb\123\ufffb\124\ufffb\125\ufffb\126\ufffb" +
    "\127\ufffb\001\002\000\076\004\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\040\uff8a" +
    "\041\uff8a\043\uff8a\047\uff8a\050\uff8a\052\uff8a\055\uff8a\064" +
    "\uff8a\066\uff8a\073\uff8a\075\uff8a\077\uff8a\117\uff8a\120\uff8a" +
    "\121\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a\127" +
    "\uff8a\001\002\000\030\004\136\011\135\013\133\017\053" +
    "\020\122\021\113\022\072\023\077\040\115\041\076\100" +
    "\uffe0\001\002\000\136\004\uffe3\005\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\040\uffe3\041\uffe3\043\uffe3\045\uffe3\047" +
    "\uffe3\050\uffe3\052\uffe3\055\uffe3\064\uffe3\066\uffe3\070\uffe3" +
    "\071\uffe3\073\uffe3\075\uffe3\077\uffe3\100\uffe3\101\uffe3\102" +
    "\uffe3\117\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3" +
    "\125\uffe3\126\uffe3\127\uffe3\001\002\000\042\004\061\011" +
    "\104\012\064\013\055\064\117\077\067\100\uffd2\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\140\126" +
    "\106\127\130\001\002\000\136\004\uffe4\005\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\040\uffe4\041\uffe4\043\uffe4\045" +
    "\uffe4\047\uffe4\050\uffe4\052\uffe4\055\uffe4\064\uffe4\066\uffe4" +
    "\070\uffe4\071\uffe4\073\uffe4\075\uffe4\077\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\117\uffe4\120\uffe4\121\uffe4\122\uffe4\123\uffe4" +
    "\124\uffe4\125\uffe4\126\uffe4\127\uffe4\001\002\000\046\003" +
    "\141\004\061\005\uff92\011\104\012\064\013\055\064\117" +
    "\077\067\101\uff92\117\074\120\110\121\057\122\052\123" +
    "\107\124\071\125\140\126\106\127\130\001\002\000\006" +
    "\005\uff93\101\uff93\001\002\000\136\004\136\005\uffe0\011" +
    "\135\012\uffe0\013\133\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\040\uffe0\041\uffe0\043\uffe0" +
    "\045\uffe0\047\uffe0\050\uffe0\052\uffe0\055\uffe0\064\uffe0\066" +
    "\uffe0\070\uffe0\071\uffe0\073\uffe0\075\uffe0\077\uffe0\100\uffe0" +
    "\101\uffe0\102\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123" +
    "\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\001\002\000\006" +
    "\005\uff91\101\uff91\001\002\000\006\005\144\101\143\001" +
    "\002\000\040\004\061\011\104\012\064\013\055\064\117" +
    "\077\067\117\074\120\110\121\057\122\052\123\107\124" +
    "\071\125\140\126\106\127\130\001\002\000\136\004\uff61" +
    "\005\uff61\011\uff61\012\uff61\013\uff61\017\uff61\020\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027\uff61" +
    "\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\040\uff61\041" +
    "\uff61\043\uff61\045\uff61\047\uff61\050\uff61\052\uff61\055\uff61" +
    "\064\uff61\066\uff61\070\uff61\071\uff61\073\uff61\075\uff61\077" +
    "\uff61\100\uff61\101\uff61\102\uff61\117\uff61\120\uff61\121\uff61" +
    "\122\uff61\123\uff61\124\uff61\125\uff61\126\uff61\127\uff61\001" +
    "\002\000\006\005\uff94\101\uff94\001\002\000\004\100\uffd3" +
    "\001\002\000\006\122\052\124\071\001\002\000\140\004" +
    "\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\040\uffdc\041\uffdc\043\uffdc\045\uffdc\047\uffdc\050\uffdc\052" +
    "\uffdc\055\uffdc\064\uffdc\066\uffdc\070\uffdc\071\uffdc\073\uffdc" +
    "\075\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\117\uffdc\120" +
    "\uffdc\121\uffdc\122\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc" +
    "\127\uffdc\001\002\000\112\004\uffbf\005\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\040\uffbf\041\uffbf\043\uffbf\045" +
    "\uffbf\047\uffbf\050\uffbf\052\uffbf\055\uffbf\064\uffbf\066\uffbf" +
    "\070\uffbf\073\uffbf\075\uffbf\077\uffbf\117\uffbf\120\uffbf\121" +
    "\uffbf\122\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf" +
    "\001\002\000\040\004\uffcf\011\uffcf\012\uffcf\013\uffcf\064" +
    "\uffcf\077\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf" +
    "\124\uffcf\125\uffcf\126\uffcf\127\uffcf\001\002\000\064\004" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\064\uffc3\077\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\001\002\000" +
    "\064\004\154\011\104\012\064\013\055\024\152\025\165" +
    "\026\155\027\171\030\161\031\162\032\157\033\160\034" +
    "\153\035\156\064\117\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\140\126\106\127\130\001" +
    "\002\000\040\004\uffcd\011\uffcd\012\uffcd\013\uffcd\064\uffcd" +
    "\077\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124" +
    "\uffcd\125\uffcd\126\uffcd\127\uffcd\001\002\000\066\003\206" +
    "\004\154\011\104\012\064\013\055\024\152\025\165\026" +
    "\155\027\171\030\161\031\162\032\157\033\160\034\153" +
    "\035\156\064\117\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\140\126\106\127\130\001\002" +
    "\000\064\004\uffc5\011\uffc5\012\uffc5\013\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\064\uffc5\077\uffc5\117\uffc5\120\uffc5\121" +
    "\uffc5\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5" +
    "\001\002\000\064\004\uffc4\011\uffc4\012\uffc4\013\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\064\uffc4\077\uffc4\117\uffc4\120" +
    "\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4" +
    "\127\uffc4\001\002\000\040\004\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\064\uffcb\077\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb" +
    "\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\001\002\000" +
    "\040\004\uffca\011\uffca\012\uffca\013\uffca\064\uffca\077\uffca" +
    "\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125" +
    "\uffca\126\uffca\127\uffca\001\002\000\004\050\205\001\002" +
    "\000\064\004\154\011\104\012\064\013\055\024\152\025" +
    "\165\026\155\027\171\030\161\031\162\032\157\033\160" +
    "\034\153\035\156\064\117\077\067\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\140\126\106\127\130" +
    "\001\002\000\040\004\uffce\011\uffce\012\uffce\013\uffce\064" +
    "\uffce\077\uffce\117\uffce\120\uffce\121\uffce\122\uffce\123\uffce" +
    "\124\uffce\125\uffce\126\uffce\127\uffce\001\002\000\126\004" +
    "\uffc7\005\uffc7\011\uffc7\012\uffc7\013\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\024\152\025\165\026\155\027" +
    "\171\030\161\031\162\032\uffc7\033\uffc7\034\uffc7\040\uffc7" +
    "\041\uffc7\043\uffc7\045\uffc7\047\uffc7\050\uffc7\052\uffc7\055" +
    "\uffc7\064\uffc7\066\uffc7\070\uffc7\073\uffc7\075\uffc7\077\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125" +
    "\uffc7\126\uffc7\127\uffc7\001\002\000\040\004\061\011\104" +
    "\012\064\013\055\064\117\077\067\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\140\126\106\127\130" +
    "\001\002\000\012\032\157\033\160\034\153\045\172\001" +
    "\002\000\040\004\uffcc\011\uffcc\012\uffcc\013\uffcc\064\uffcc" +
    "\077\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124" +
    "\uffcc\125\uffcc\126\uffcc\127\uffcc\001\002\000\004\042\175" +
    "\001\002\000\064\004\154\011\104\012\064\013\055\024" +
    "\152\025\165\026\155\027\171\030\161\031\162\032\157" +
    "\033\160\034\153\035\156\064\117\077\067\117\074\120" +
    "\110\121\057\122\052\123\107\124\071\125\140\126\106" +
    "\127\130\001\002\000\112\004\uffc1\005\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\032\157\033\160\034\153\040\uffc1\041\uffc1\043\uffc1\045" +
    "\uffc1\047\uffc1\050\uffc1\052\uffc1\055\uffc1\064\uffc1\066\uffc1" +
    "\070\uffc1\073\uffc1\075\uffc1\077\uffc1\117\uffc1\120\uffc1\121" +
    "\uffc1\122\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1" +
    "\001\002\000\070\004\061\011\104\012\064\013\055\017" +
    "\053\020\122\021\113\022\072\023\077\040\115\041\076" +
    "\043\056\052\066\055\101\064\117\066\063\075\121\077" +
    "\067\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\132\126\106\127\130\001\002\000\072\004\061\011" +
    "\104\012\064\013\055\017\053\020\122\021\113\022\072" +
    "\023\077\040\115\041\076\043\056\050\200\052\066\055" +
    "\101\064\117\066\063\075\121\077\067\117\074\120\110" +
    "\121\057\122\052\123\107\124\071\125\132\126\106\127" +
    "\130\001\002\000\076\004\uff87\011\uff87\012\uff87\013\uff87" +
    "\017\uff87\020\uff87\021\uff87\022\uff87\023\uff87\040\uff87\041" +
    "\uff87\043\uff87\047\uff87\050\uff87\052\uff87\055\uff87\064\uff87" +
    "\066\uff87\073\uff87\075\uff87\077\uff87\117\uff87\120\uff87\121" +
    "\uff87\122\uff87\123\uff87\124\uff87\125\uff87\126\uff87\127\uff87" +
    "\001\002\000\076\004\uff7f\011\uff7f\012\uff7f\013\uff7f\017" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\023\uff7f\040\uff7f\041\uff7f" +
    "\043\uff7f\047\uff7f\050\uff7f\052\uff7f\055\uff7f\064\uff7f\066" +
    "\uff7f\073\uff7f\075\uff7f\077\uff7f\117\uff7f\120\uff7f\121\uff7f" +
    "\122\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\001" +
    "\002\000\112\004\uffc6\005\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\032\uffc6\033" +
    "\uffc6\034\uffc6\040\uffc6\041\uffc6\043\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\055\uffc6\064\uffc6\066\uffc6\070\uffc6\073" +
    "\uffc6\075\uffc6\077\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6" +
    "\123\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\001\002\000" +
    "\040\004\061\011\104\012\064\013\055\064\117\077\067" +
    "\117\074\120\110\121\057\122\052\123\107\124\071\125" +
    "\140\126\106\127\130\001\002\000\112\004\uffc8\005\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\032\uffc8\033\uffc8\034\uffc8\040\uffc8\041\uffc8" +
    "\043\uffc8\045\uffc8\047\uffc8\050\uffc8\052\uffc8\055\uffc8\064" +
    "\uffc8\066\uffc8\070\uffc8\073\uffc8\075\uffc8\077\uffc8\117\uffc8" +
    "\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\126" +
    "\uffc8\127\uffc8\001\002\000\112\004\uffbe\005\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\032\157\033\160\034\153\040\uffbe\041\uffbe\043\uffbe" +
    "\045\uffbe\047\uffbe\050\uffbe\052\uffbe\055\uffbe\064\uffbe\066" +
    "\uffbe\070\uffbe\073\uffbe\075\uffbe\077\uffbe\117\uffbe\120\uffbe" +
    "\121\uffbe\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127" +
    "\uffbe\001\002\000\076\004\uff7e\011\uff7e\012\uff7e\013\uff7e" +
    "\017\uff7e\020\uff7e\021\uff7e\022\uff7e\023\uff7e\040\uff7e\041" +
    "\uff7e\043\uff7e\047\uff7e\050\uff7e\052\uff7e\055\uff7e\064\uff7e" +
    "\066\uff7e\073\uff7e\075\uff7e\077\uff7e\117\uff7e\120\uff7e\121" +
    "\uff7e\122\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e" +
    "\001\002\000\112\004\uffbd\005\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd\047" +
    "\uffbd\050\uffbd\052\uffbd\055\uffbd\064\uffbd\066\uffbd\070\uffbd" +
    "\073\uffbd\075\uffbd\077\uffbd\117\uffbd\120\uffbd\121\uffbd\122" +
    "\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd\001\002" +
    "\000\112\004\uffc0\005\uffc0\011\uffc0\012\uffc0\013\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\032\157\033\160" +
    "\034\153\040\uffc0\041\uffc0\043\uffc0\045\uffc0\047\uffc0\050" +
    "\uffc0\052\uffc0\055\uffc0\064\uffc0\066\uffc0\070\uffc0\073\uffc0" +
    "\075\uffc0\077\uffc0\117\uffc0\120\uffc0\121\uffc0\122\uffc0\123" +
    "\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0\001\002\000\012" +
    "\005\215\032\uffbf\033\uffbf\034\uffbf\001\002\000\026\005" +
    "\214\024\152\025\165\026\155\027\171\030\161\031\162" +
    "\032\uffc7\033\uffc7\034\uffc7\001\002\000\012\005\213\032" +
    "\157\033\160\034\153\001\002\000\112\004\uffc2\005\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\032\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2" +
    "\043\uffc2\045\uffc2\047\uffc2\050\uffc2\052\uffc2\055\uffc2\064" +
    "\uffc2\066\uffc2\070\uffc2\073\uffc2\075\uffc2\077\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124\uffc2\125\uffc2\126" +
    "\uffc2\127\uffc2\001\002\000\136\004\ufff4\005\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\040\ufff4\041\ufff4\043\ufff4\045" +
    "\ufff4\047\ufff4\050\ufff4\052\ufff4\055\ufff4\064\ufff4\066\ufff4" +
    "\070\ufff4\071\ufff4\073\ufff4\075\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4" +
    "\124\ufff4\125\ufff4\126\ufff4\127\ufff4\001\002\000\112\004" +
    "\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\032\uffc9\033\uffc9\034\uffc9\040" +
    "\uffc9\041\uffc9\043\uffc9\045\uffc9\047\uffc9\050\uffc9\052\uffc9" +
    "\055\uffc9\064\uffc9\066\uffc9\070\uffc9\073\uffc9\075\uffc9\077" +
    "\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9" +
    "\125\uffc9\126\uffc9\127\uffc9\001\002\000\046\003\141\004" +
    "\061\005\uff92\011\104\012\064\013\055\064\117\077\067" +
    "\101\uff92\117\074\120\110\121\057\122\052\123\107\124" +
    "\071\125\140\126\106\127\130\001\002\000\006\005\220" +
    "\101\143\001\002\000\136\004\uff64\005\uff64\011\uff64\012" +
    "\uff64\013\uff64\017\uff64\020\uff64\021\uff64\022\uff64\023\uff64" +
    "\024\uff64\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032" +
    "\uff64\033\uff64\034\uff64\040\uff64\041\uff64\043\uff64\045\uff64" +
    "\047\uff64\050\uff64\052\uff64\055\uff64\064\uff64\066\uff64\070" +
    "\uff64\071\uff64\073\uff64\075\uff64\077\uff64\100\uff64\101\uff64" +
    "\102\uff64\117\uff64\120\uff64\121\uff64\122\uff64\123\uff64\124" +
    "\uff64\125\uff64\126\uff64\127\uff64\001\002\000\100\004\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\040\uff8e\041\uff8e\043\uff8e\047\uff8e\050\uff8e" +
    "\052\uff8e\055\uff8e\064\uff8e\066\uff8e\073\uff8e\075\uff8e\077" +
    "\uff8e\102\uff8e\117\uff8e\120\uff8e\121\uff8e\122\uff8e\123\uff8e" +
    "\124\uff8e\125\uff8e\126\uff8e\127\uff8e\001\002\000\136\004" +
    "\uffe2\005\uffe2\011\uffe2\012\uffe2\013\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2" +
    "\041\uffe2\043\uffe2\045\uffe2\047\uffe2\050\uffe2\052\uffe2\055" +
    "\uffe2\064\uffe2\066\uffe2\070\uffe2\071\uffe2\073\uffe2\075\uffe2" +
    "\077\uffe2\100\uffe2\101\uffe2\102\uffe2\117\uffe2\120\uffe2\121" +
    "\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2" +
    "\001\002\000\004\120\226\001\002\000\004\120\225\001" +
    "\002\000\142\004\uffdf\005\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\055\uffdf\064\uffdf\066\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\075\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\117\uffdf\120\uffdf\121\uffdf\122\uffdf\123\uffdf" +
    "\124\uffdf\125\uffdf\126\uffdf\127\uffdf\001\002\000\142\004" +
    "\uffde\005\uffde\011\uffde\012\uffde\013\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\043\uffde\045\uffde\047\uffde\050" +
    "\uffde\052\uffde\055\uffde\064\uffde\066\uffde\070\uffde\071\uffde" +
    "\073\uffde\075\uffde\077\uffde\100\uffde\101\uffde\102\uffde\117" +
    "\uffde\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde" +
    "\126\uffde\127\uffde\001\002\000\012\032\157\033\160\034" +
    "\153\070\230\001\002\000\072\003\232\004\061\011\104" +
    "\012\064\013\055\017\053\020\122\021\113\022\072\023" +
    "\077\040\115\041\076\043\056\052\066\055\101\064\117" +
    "\066\063\075\121\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\132\126\106\127\130\001\002" +
    "\000\074\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\047\233\050\234\052\066\055\101\064\117\066\063\075" +
    "\121\077\067\117\074\120\110\121\057\122\052\123\107" +
    "\124\071\125\132\126\106\127\130\001\002\000\076\004" +
    "\uff79\011\uff79\012\uff79\013\uff79\017\uff79\020\uff79\021\uff79" +
    "\022\uff79\023\uff79\040\uff79\041\uff79\043\uff79\047\uff79\050" +
    "\uff79\052\uff79\055\uff79\064\uff79\066\uff79\073\uff79\075\uff79" +
    "\077\uff79\117\uff79\120\uff79\121\uff79\122\uff79\123\uff79\124" +
    "\uff79\125\uff79\126\uff79\127\uff79\001\002\000\072\003\236" +
    "\004\061\011\104\012\064\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\052\066" +
    "\055\101\064\117\066\063\075\121\077\067\117\074\120" +
    "\110\121\057\122\052\123\107\124\071\125\132\126\106" +
    "\127\130\001\002\000\076\004\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\040\uff7a" +
    "\041\uff7a\043\uff7a\047\uff7a\050\uff7a\052\uff7a\055\uff7a\064" +
    "\uff7a\066\uff7a\073\uff7a\075\uff7a\077\uff7a\117\uff7a\120\uff7a" +
    "\121\uff7a\122\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127" +
    "\uff7a\001\002\000\072\004\061\011\104\012\064\013\055" +
    "\017\053\020\122\021\113\022\072\023\077\040\115\041" +
    "\076\043\056\050\237\052\066\055\101\064\117\066\063" +
    "\075\121\077\067\117\074\120\110\121\057\122\052\123" +
    "\107\124\071\125\132\126\106\127\130\001\002\000\076" +
    "\004\uff78\011\uff78\012\uff78\013\uff78\017\uff78\020\uff78\021" +
    "\uff78\022\uff78\023\uff78\040\uff78\041\uff78\043\uff78\047\uff78" +
    "\050\uff78\052\uff78\055\uff78\064\uff78\066\uff78\073\uff78\075" +
    "\uff78\077\uff78\117\uff78\120\uff78\121\uff78\122\uff78\123\uff78" +
    "\124\uff78\125\uff78\126\uff78\127\uff78\001\002\000\076\004" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\040\uff7b\041\uff7b\043\uff7b\047\uff7b\050" +
    "\uff7b\052\uff7b\055\uff7b\064\uff7b\066\uff7b\073\uff7b\075\uff7b" +
    "\077\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\123\uff7b\124" +
    "\uff7b\125\uff7b\126\uff7b\127\uff7b\001\002\000\004\100\uffd1" +
    "\001\002\000\010\012\064\120\110\121\057\001\002\000" +
    "\010\012\064\120\110\121\057\001\002\000\010\012\064" +
    "\120\110\121\057\001\002\000\010\012\064\120\110\121" +
    "\057\001\002\000\010\012\064\120\110\121\057\001\002" +
    "\000\146\004\uffea\005\uffea\010\uffea\011\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\034\uffea\040\uffea\041\uffea" +
    "\043\uffea\045\uffea\047\uffea\050\uffea\052\uffea\055\uffea\064" +
    "\uffea\066\uffea\070\uffea\071\uffea\073\uffea\075\uffea\077\uffea" +
    "\100\uffea\101\uffea\102\uffea\117\uffea\120\uffea\121\uffea\122" +
    "\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\001\002" +
    "\000\146\004\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\041\uffe9" +
    "\043\uffe9\045\uffe9\047\uffe9\050\uffe9\052\uffe9\055\uffe9\064" +
    "\uffe9\066\uffe9\070\uffe9\071\uffe9\073\uffe9\075\uffe9\077\uffe9" +
    "\100\uffe9\101\uffe9\102\uffe9\117\uffe9\120\uffe9\121\uffe9\122" +
    "\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9\127\uffe9\001\002" +
    "\000\146\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\244\015\245\016\241\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\040\uffeb\041\uffeb" +
    "\043\uffeb\045\uffeb\047\uffeb\050\uffeb\052\uffeb\055\uffeb\064" +
    "\uffeb\066\uffeb\070\uffeb\071\uffeb\073\uffeb\075\uffeb\077\uffeb" +
    "\100\uffeb\101\uffeb\102\uffeb\117\uffeb\120\uffeb\121\uffeb\122" +
    "\uffeb\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\001\002" +
    "\000\146\004\uffec\005\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\244\015\245\016\241\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\040\uffec\041\uffec" +
    "\043\uffec\045\uffec\047\uffec\050\uffec\052\uffec\055\uffec\064" +
    "\uffec\066\uffec\070\uffec\071\uffec\073\uffec\075\uffec\077\uffec" +
    "\100\uffec\101\uffec\102\uffec\117\uffec\120\uffec\121\uffec\122" +
    "\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127\uffec\001\002" +
    "\000\146\004\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\040\uffe8\041\uffe8" +
    "\043\uffe8\045\uffe8\047\uffe8\050\uffe8\052\uffe8\055\uffe8\064" +
    "\uffe8\066\uffe8\070\uffe8\071\uffe8\073\uffe8\075\uffe8\077\uffe8" +
    "\100\uffe8\101\uffe8\102\uffe8\117\uffe8\120\uffe8\121\uffe8\122" +
    "\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\001\002" +
    "\000\042\004\061\005\255\011\104\012\064\013\055\064" +
    "\117\077\067\117\074\120\110\121\057\122\052\123\107" +
    "\124\071\125\140\126\106\127\130\001\002\000\006\005" +
    "\uff95\101\uff95\001\002\000\136\004\uff62\005\uff62\011\uff62" +
    "\012\uff62\013\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023" +
    "\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62\031\uff62" +
    "\032\uff62\033\uff62\034\uff62\040\uff62\041\uff62\043\uff62\045" +
    "\uff62\047\uff62\050\uff62\052\uff62\055\uff62\064\uff62\066\uff62" +
    "\070\uff62\071\uff62\073\uff62\075\uff62\077\uff62\100\uff62\101" +
    "\uff62\102\uff62\117\uff62\120\uff62\121\uff62\122\uff62\123\uff62" +
    "\124\uff62\125\uff62\126\uff62\127\uff62\001\002\000\006\005" +
    "\260\101\257\001\002\000\040\004\061\011\104\012\064" +
    "\013\055\064\117\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\140\126\106\127\130\001\002" +
    "\000\136\004\uff63\005\uff63\011\uff63\012\uff63\013\uff63\017" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63" +
    "\026\uff63\027\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034" +
    "\uff63\040\uff63\041\uff63\043\uff63\045\uff63\047\uff63\050\uff63" +
    "\052\uff63\055\uff63\064\uff63\066\uff63\070\uff63\071\uff63\073" +
    "\uff63\075\uff63\077\uff63\100\uff63\101\uff63\102\uff63\117\uff63" +
    "\120\uff63\121\uff63\122\uff63\123\uff63\124\uff63\125\uff63\126" +
    "\uff63\127\uff63\001\002\000\006\005\uff96\101\uff96\001\002" +
    "\000\040\004\061\011\104\012\064\013\055\064\117\077" +
    "\067\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\140\126\106\127\130\001\002\000\042\004\061\011" +
    "\104\012\064\013\055\017\265\064\117\077\067\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\140\126" +
    "\106\127\130\001\002\000\004\071\315\001\002\000\042" +
    "\004\061\011\104\012\064\013\055\064\117\071\267\077" +
    "\067\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\140\126\106\127\130\001\002\000\042\004\061\011" +
    "\104\012\064\013\055\064\117\071\276\077\067\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\140\126" +
    "\106\127\130\001\002\000\040\004\061\011\104\012\064" +
    "\013\055\064\117\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\140\126\106\127\130\001\002" +
    "\000\004\045\271\001\002\000\004\042\272\001\002\000" +
    "\070\004\061\011\104\012\064\013\055\017\053\020\122" +
    "\021\113\022\072\023\077\040\115\041\076\043\056\052" +
    "\066\055\101\064\117\066\063\075\121\077\067\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\132\126" +
    "\106\127\130\001\002\000\072\004\061\011\104\012\064" +
    "\013\055\017\053\020\122\021\113\022\072\023\077\040" +
    "\115\041\076\043\056\050\274\052\066\055\101\064\117" +
    "\066\063\075\121\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\132\126\106\127\130\001\002" +
    "\000\076\004\uff82\011\uff82\012\uff82\013\uff82\017\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\040\uff82\041\uff82\043\uff82" +
    "\047\uff82\050\uff82\052\uff82\055\uff82\064\uff82\066\uff82\073" +
    "\uff82\075\uff82\077\uff82\117\uff82\120\uff82\121\uff82\122\uff82" +
    "\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82\001\002\000" +
    "\004\045\311\001\002\000\042\003\300\004\061\011\104" +
    "\012\064\013\055\064\117\077\067\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\140\126\106\127\130" +
    "\001\002\000\004\045\305\001\002\000\004\045\301\001" +
    "\002\000\004\042\302\001\002\000\070\004\061\011\104" +
    "\012\064\013\055\017\053\020\122\021\113\022\072\023" +
    "\077\040\115\041\076\043\056\052\066\055\101\064\117" +
    "\066\063\075\121\077\067\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\132\126\106\127\130\001\002" +
    "\000\072\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\050\304\052\066\055\101\064\117\066\063\075\121\077" +
    "\067\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\132\126\106\127\130\001\002\000\076\004\uff80\011" +
    "\uff80\012\uff80\013\uff80\017\uff80\020\uff80\021\uff80\022\uff80" +
    "\023\uff80\040\uff80\041\uff80\043\uff80\047\uff80\050\uff80\052" +
    "\uff80\055\uff80\064\uff80\066\uff80\073\uff80\075\uff80\077\uff80" +
    "\117\uff80\120\uff80\121\uff80\122\uff80\123\uff80\124\uff80\125" +
    "\uff80\126\uff80\127\uff80\001\002\000\004\042\306\001\002" +
    "\000\070\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\052\066\055\101\064\117\066\063\075\121\077\067\117" +
    "\074\120\110\121\057\122\052\123\107\124\071\125\132" +
    "\126\106\127\130\001\002\000\072\004\061\011\104\012" +
    "\064\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\310\052\066\055\101\064" +
    "\117\066\063\075\121\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\132\126\106\127\130\001" +
    "\002\000\076\004\uff85\011\uff85\012\uff85\013\uff85\017\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\040\uff85\041\uff85\043" +
    "\uff85\047\uff85\050\uff85\052\uff85\055\uff85\064\uff85\066\uff85" +
    "\073\uff85\075\uff85\077\uff85\117\uff85\120\uff85\121\uff85\122" +
    "\uff85\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\001\002" +
    "\000\004\042\312\001\002\000\070\004\061\011\104\012" +
    "\064\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\052\066\055\101\064\117\066" +
    "\063\075\121\077\067\117\074\120\110\121\057\122\052" +
    "\123\107\124\071\125\132\126\106\127\130\001\002\000" +
    "\072\004\061\011\104\012\064\013\055\017\053\020\122" +
    "\021\113\022\072\023\077\040\115\041\076\043\056\050" +
    "\314\052\066\055\101\064\117\066\063\075\121\077\067" +
    "\117\074\120\110\121\057\122\052\123\107\124\071\125" +
    "\132\126\106\127\130\001\002\000\076\004\uff81\011\uff81" +
    "\012\uff81\013\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023" +
    "\uff81\040\uff81\041\uff81\043\uff81\047\uff81\050\uff81\052\uff81" +
    "\055\uff81\064\uff81\066\uff81\073\uff81\075\uff81\077\uff81\117" +
    "\uff81\120\uff81\121\uff81\122\uff81\123\uff81\124\uff81\125\uff81" +
    "\126\uff81\127\uff81\001\002\000\040\004\061\011\104\012" +
    "\064\013\055\064\117\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\140\126\106\127\130\001" +
    "\002\000\004\045\317\001\002\000\004\042\320\001\002" +
    "\000\070\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\052\066\055\101\064\117\066\063\075\121\077\067\117" +
    "\074\120\110\121\057\122\052\123\107\124\071\125\132" +
    "\126\106\127\130\001\002\000\072\004\061\011\104\012" +
    "\064\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\322\052\066\055\101\064" +
    "\117\066\063\075\121\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\132\126\106\127\130\001" +
    "\002\000\076\004\uff83\011\uff83\012\uff83\013\uff83\017\uff83" +
    "\020\uff83\021\uff83\022\uff83\023\uff83\040\uff83\041\uff83\043" +
    "\uff83\047\uff83\050\uff83\052\uff83\055\uff83\064\uff83\066\uff83" +
    "\073\uff83\075\uff83\077\uff83\117\uff83\120\uff83\121\uff83\122" +
    "\uff83\123\uff83\124\uff83\125\uff83\126\uff83\127\uff83\001\002" +
    "\000\004\071\324\001\002\000\040\004\061\011\104\012" +
    "\064\013\055\064\117\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\140\126\106\127\130\001" +
    "\002\000\004\045\326\001\002\000\004\042\327\001\002" +
    "\000\070\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\052\066\055\101\064\117\066\063\075\121\077\067\117" +
    "\074\120\110\121\057\122\052\123\107\124\071\125\132" +
    "\126\106\127\130\001\002\000\072\004\061\011\104\012" +
    "\064\013\055\017\053\020\122\021\113\022\072\023\077" +
    "\040\115\041\076\043\056\050\331\052\066\055\101\064" +
    "\117\066\063\075\121\077\067\117\074\120\110\121\057" +
    "\122\052\123\107\124\071\125\132\126\106\127\130\001" +
    "\002\000\076\004\uff84\011\uff84\012\uff84\013\uff84\017\uff84" +
    "\020\uff84\021\uff84\022\uff84\023\uff84\040\uff84\041\uff84\043" +
    "\uff84\047\uff84\050\uff84\052\uff84\055\uff84\064\uff84\066\uff84" +
    "\073\uff84\075\uff84\077\uff84\117\uff84\120\uff84\121\uff84\122" +
    "\uff84\123\uff84\124\uff84\125\uff84\126\uff84\127\uff84\001\002" +
    "\000\146\004\uffe7\005\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\244\015\245\016\241\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\041\uffe7" +
    "\043\uffe7\045\uffe7\047\uffe7\050\uffe7\052\uffe7\055\uffe7\064" +
    "\uffe7\066\uffe7\070\uffe7\071\uffe7\073\uffe7\075\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\117\uffe7\120\uffe7\121\uffe7\122" +
    "\uffe7\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\001\002" +
    "\000\072\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\043\056" +
    "\052\066\055\101\064\117\066\063\073\334\075\121\077" +
    "\067\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\132\126\106\127\130\001\002\000\066\003\335\004" +
    "\154\011\104\012\064\013\055\024\152\025\165\026\155" +
    "\027\171\030\161\031\162\032\157\033\160\034\153\035" +
    "\156\064\117\077\067\117\074\120\110\121\057\122\052" +
    "\123\107\124\071\125\140\126\106\127\130\001\002\000" +
    "\076\004\uff7c\011\uff7c\012\uff7c\013\uff7c\017\uff7c\020\uff7c" +
    "\021\uff7c\022\uff7c\023\uff7c\040\uff7c\041\uff7c\043\uff7c\047" +
    "\uff7c\050\uff7c\052\uff7c\055\uff7c\064\uff7c\066\uff7c\073\uff7c" +
    "\075\uff7c\077\uff7c\117\uff7c\120\uff7c\121\uff7c\122\uff7c\123" +
    "\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\001\002\000\104" +
    "\004\uff7d\011\uff7d\012\uff7d\013\uff7d\017\uff7d\020\uff7d\021" +
    "\uff7d\022\uff7d\023\uff7d\032\157\033\160\034\153\040\uff7d" +
    "\041\uff7d\043\uff7d\047\uff7d\050\uff7d\052\uff7d\055\uff7d\064" +
    "\uff7d\066\uff7d\073\uff7d\075\uff7d\077\uff7d\117\uff7d\120\uff7d" +
    "\121\uff7d\122\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127" +
    "\uff7d\001\002\000\004\005\214\001\002\000\010\042\uff6e" +
    "\110\uff6e\111\uff6e\001\002\000\004\047\361\001\002\000" +
    "\004\061\343\001\002\000\042\004\061\011\104\012\064" +
    "\013\055\064\117\077\067\102\345\117\074\120\110\121" +
    "\057\122\052\123\107\124\071\125\140\126\106\127\130" +
    "\001\002\000\060\004\061\011\104\012\064\013\055\017" +
    "\053\020\122\021\113\022\072\023\077\040\115\041\076" +
    "\064\117\077\067\102\356\117\074\120\110\121\057\122" +
    "\052\123\107\124\071\125\132\126\106\127\130\001\002" +
    "\000\056\004\061\011\104\012\064\013\055\017\053\020" +
    "\122\021\113\022\072\023\077\040\115\041\076\064\117" +
    "\077\067\117\074\120\110\121\057\122\052\123\107\124" +
    "\071\125\132\126\106\127\130\001\002\000\044\004\061" +
    "\011\104\012\064\013\055\047\350\064\117\077\067\102" +
    "\345\117\074\120\110\121\057\122\052\123\107\124\071" +
    "\125\140\126\106\127\130\001\002\000\044\004\uff72\011" +
    "\uff72\012\uff72\013\uff72\047\uff72\064\uff72\077\uff72\102\uff72" +
    "\117\uff72\120\uff72\121\uff72\122\uff72\123\uff72\124\uff72\125" +
    "\uff72\126\uff72\127\uff72\001\002\000\060\003\352\004\061" +
    "\011\104\012\064\013\055\017\053\020\122\021\113\022" +
    "\072\023\077\040\115\041\076\064\117\077\067\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\132\126" +
    "\106\127\130\001\002\000\044\004\uff73\011\uff73\012\uff73" +
    "\013\uff73\047\uff73\064\uff73\077\uff73\102\uff73\117\uff73\120" +
    "\uff73\121\uff73\122\uff73\123\uff73\124\uff73\125\uff73\126\uff73" +
    "\127\uff73\001\002\000\076\004\uff6f\011\uff6f\012\uff6f\013" +
    "\uff6f\017\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\040\uff6f" +
    "\041\uff6f\043\uff6f\047\uff6f\050\uff6f\052\uff6f\055\uff6f\064" +
    "\uff6f\066\uff6f\073\uff6f\075\uff6f\077\uff6f\117\uff6f\120\uff6f" +
    "\121\uff6f\122\uff6f\123\uff6f\124\uff6f\125\uff6f\126\uff6f\127" +
    "\uff6f\001\002\000\076\004\uff71\011\uff71\012\uff71\013\uff71" +
    "\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\040\uff71\041" +
    "\uff71\043\uff71\047\uff71\050\uff71\052\uff71\055\uff71\064\uff71" +
    "\066\uff71\073\uff71\075\uff71\077\uff71\117\uff71\120\uff71\121" +
    "\uff71\122\uff71\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71" +
    "\001\002\000\044\004\uff74\011\uff74\012\uff74\013\uff74\047" +
    "\uff74\064\uff74\077\uff74\102\uff74\117\uff74\120\uff74\121\uff74" +
    "\122\uff74\123\uff74\124\uff74\125\uff74\126\uff74\127\uff74\001" +
    "\002\000\044\004\uff76\011\uff76\012\uff76\013\uff76\047\uff76" +
    "\064\uff76\077\uff76\102\uff76\117\uff76\120\uff76\121\uff76\122" +
    "\uff76\123\uff76\124\uff76\125\uff76\126\uff76\127\uff76\001\002" +
    "\000\060\003\357\004\061\011\104\012\064\013\055\017" +
    "\053\020\122\021\113\022\072\023\077\040\115\041\076" +
    "\064\117\077\067\117\074\120\110\121\057\122\052\123" +
    "\107\124\071\125\132\126\106\127\130\001\002\000\044" +
    "\004\uff75\011\uff75\012\uff75\013\uff75\047\uff75\064\uff75\077" +
    "\uff75\102\uff75\117\uff75\120\uff75\121\uff75\122\uff75\123\uff75" +
    "\124\uff75\125\uff75\126\uff75\127\uff75\001\002\000\044\004" +
    "\uff77\011\uff77\012\uff77\013\uff77\047\uff77\064\uff77\077\uff77" +
    "\102\uff77\117\uff77\120\uff77\121\uff77\122\uff77\123\uff77\124" +
    "\uff77\125\uff77\126\uff77\127\uff77\001\002\000\076\004\uff70" +
    "\011\uff70\012\uff70\013\uff70\017\uff70\020\uff70\021\uff70\022" +
    "\uff70\023\uff70\040\uff70\041\uff70\043\uff70\047\uff70\050\uff70" +
    "\052\uff70\055\uff70\064\uff70\066\uff70\073\uff70\075\uff70\077" +
    "\uff70\117\uff70\120\uff70\121\uff70\122\uff70\123\uff70\124\uff70" +
    "\125\uff70\126\uff70\127\uff70\001\002\000\136\004\uffe1\005" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1" +
    "\043\uffe1\045\uffe1\047\uffe1\050\uffe1\052\uffe1\055\uffe1\064" +
    "\uffe1\066\uffe1\070\uffe1\071\uffe1\073\uffe1\075\uffe1\077\uffe1" +
    "\100\uffe1\101\uffe1\102\uffe1\117\uffe1\120\uffe1\121\uffe1\122" +
    "\uffe1\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\001\002" +
    "\000\006\120\110\121\057\001\002\000\146\004\uffe5\005" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\040\uffe5\041\uffe5\043\uffe5\045\uffe5\047" +
    "\uffe5\050\uffe5\052\uffe5\055\uffe5\064\uffe5\066\uffe5\070\uffe5" +
    "\071\uffe5\073\uffe5\075\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5\123\uffe5\124\uffe5" +
    "\125\uffe5\126\uffe5\127\uffe5\001\002\000\006\005\uff99\101" +
    "\uff99\001\002\000\010\042\uff6d\110\uff6d\111\uff6d\001\002" +
    "\000\004\050\u0100\001\002\000\004\004\371\001\002\000" +
    "\030\003\035\005\uff97\101\uff97\105\027\106\037\107\040" +
    "\112\025\113\026\114\034\115\032\116\031\001\002\000" +
    "\006\005\373\101\044\001\002\000\004\042\374\001\002" +
    "\000\074\004\uff9e\011\uff9e\012\uff9e\013\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\040\uff9e\041\uff9e\043\uff9e" +
    "\044\010\052\uff9e\055\uff9e\064\uff9e\066\uff9e\074\uff9e\075" +
    "\uff9e\077\uff9e\117\uff9e\120\uff9e\121\uff9e\122\uff9e\123\uff9e" +
    "\124\uff9e\125\uff9e\126\uff9e\127\uff9e\001\002\000\070\004" +
    "\061\011\104\012\064\013\055\017\053\020\122\021\113" +
    "\022\072\023\077\040\115\041\076\043\056\052\066\055" +
    "\101\064\117\066\063\075\121\077\067\117\074\120\110" +
    "\121\057\122\052\123\107\124\071\125\132\126\106\127" +
    "\130\001\002\000\072\004\061\011\104\012\064\013\055" +
    "\017\053\020\122\021\113\022\072\023\077\040\115\041" +
    "\076\043\056\050\377\052\066\055\101\064\117\066\063" +
    "\075\121\077\067\117\074\120\110\121\057\122\052\123" +
    "\107\124\071\125\132\126\106\127\130\001\002\000\010" +
    "\042\uff6c\110\uff6c\111\uff6c\001\002\000\010\042\uff6b\110" +
    "\uff6b\111\uff6b\001\002\000\070\004\061\011\104\012\064" +
    "\013\055\017\053\020\122\021\113\022\072\023\077\040" +
    "\115\041\076\043\056\052\066\055\101\064\117\066\063" +
    "\075\121\077\067\117\074\120\110\121\057\122\052\123" +
    "\107\124\071\125\132\126\106\127\130\001\002\000\072" +
    "\004\061\011\104\012\064\013\055\017\053\020\122\021" +
    "\113\022\072\023\077\040\115\041\076\043\056\050\u0103" +
    "\052\066\055\101\064\117\066\063\075\121\077\067\117" +
    "\074\120\110\121\057\122\052\123\107\124\071\125\132" +
    "\126\106\127\130\001\002\000\004\002\uff5e\001\002\000" +
    "\010\042\uff68\110\uff68\111\uff68\001\002\000\004\125\u0109" +
    "\001\002\000\076\004\uff9d\011\uff9d\012\uff9d\013\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\052\uff9d\055\uff9d\064\uff9d\066\uff9d\075" +
    "\uff9d\077\uff9d\110\uff9d\111\uff9d\117\uff9d\120\uff9d\121\uff9d" +
    "\122\uff9d\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\001" +
    "\002\000\006\050\u0124\125\u0109\001\002\000\030\101\u010c" +
    "\102\u010b\105\027\106\037\107\040\112\025\113\026\114" +
    "\034\115\032\116\031\125\u010d\001\002\000\030\101\uffbb" +
    "\102\uffbb\105\uffbb\106\uffbb\107\uffbb\112\uffbb\113\uffbb\114" +
    "\uffbb\115\uffbb\116\uffbb\125\uffbb\001\002\000\006\050\uffa7" +
    "\125\uffa7\001\002\000\026\100\u0113\104\u0112\105\027\106" +
    "\037\107\040\112\025\113\026\114\034\115\032\116\031" +
    "\001\002\000\006\003\u0110\125\u0111\001\002\000\030\101" +
    "\uffba\102\uffba\105\uffba\106\uffba\107\uffba\112\uffba\113\uffba" +
    "\114\uffba\115\uffba\116\uffba\125\uffba\001\002\000\004\100" +
    "\u010f\001\002\000\006\050\uffaa\125\uffaa\001\002\000\030" +
    "\101\uffb9\102\uffb9\105\uffb9\106\uffb9\107\uffb9\112\uffb9\113" +
    "\uffb9\114\uffb9\115\uffb9\116\uffb9\125\uffb9\001\002\000\030" +
    "\101\uffbc\102\uffbc\105\uffbc\106\uffbc\107\uffbc\112\uffbc\113" +
    "\uffbc\114\uffbc\115\uffbc\116\uffbc\125\uffbc\001\002\000\004" +
    "\006\u0116\001\002\000\006\050\uffa9\125\uffa9\001\002\000" +
    "\004\100\u0115\001\002\000\006\050\uffac\125\uffac\001\002" +
    "\000\004\120\u0117\001\002\000\004\103\u0118\001\002\000" +
    "\004\103\u0119\001\002\000\004\120\u011a\001\002\000\004" +
    "\007\u011b\001\002\000\004\061\u011c\001\002\000\012\107" +
    "\u0120\112\u0121\113\u011f\115\u011e\001\002\000\004\100\u0122" +
    "\001\002\000\004\100\uffad\001\002\000\004\100\uffae\001" +
    "\002\000\004\100\uffb0\001\002\000\004\100\uffaf\001\002" +
    "\000\006\050\uffab\125\uffab\001\002\000\006\050\uffa8\125" +
    "\uffa8\001\002\000\076\004\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\052\uffa6\055\uffa6\064\uffa6\066\uffa6" +
    "\075\uffa6\077\uffa6\110\uffa6\111\uffa6\117\uffa6\120\uffa6\121" +
    "\uffa6\122\uffa6\123\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6" +
    "\001\002\000\006\050\u012f\125\u0126\001\002\000\042\004" +
    "\061\011\104\012\064\013\055\024\u0129\064\117\077\067" +
    "\117\074\120\110\121\057\122\052\123\107\124\071\125" +
    "\140\126\106\127\130\001\002\000\006\050\uffa0\125\uffa0" +
    "\001\002\000\004\100\u012d\001\002\000\042\004\061\011" +
    "\104\012\064\013\055\064\117\077\067\100\u012b\117\074" +
    "\120\110\121\057\122\052\123\107\124\071\125\140\126" +
    "\106\127\130\001\002\000\004\100\u012c\001\002\000\006" +
    "\050\uffa2\125\uffa2\001\002\000\006\050\uffa4\125\uffa4\001" +
    "\002\000\006\050\uffa3\125\uffa3\001\002\000\006\050\uffa1" +
    "\125\uffa1\001\002\000\100\004\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\052\uff9f\055\uff9f\064\uff9f\066" +
    "\uff9f\074\uff9f\075\uff9f\077\uff9f\110\uff9f\111\uff9f\117\uff9f" +
    "\120\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f\125\uff9f\126" +
    "\uff9f\127\uff9f\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\004\065\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\010\027\011" +
    "\001\001\000\006\020\u0126\024\u0124\001\001\000\004\025" +
    "\u0105\001\001\000\014\056\012\057\017\062\013\063\014" +
    "\064\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\056\012\057\017\062\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\035\017\032" +
    "\022\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\035\017\364\001\001\000\002\001\001\000\004" +
    "\014\046\001\001\000\002\001\001\000\006\026\010\027" +
    "\050\001\001\000\056\003\122\004\064\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\030\077\033" +
    "\125\034\061\035\123\043\115\044\111\045\110\046\057" +
    "\051\067\052\117\053\130\054\072\055\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\122\004\064\005\104\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\030\077\033\125\034\061\035\123\043" +
    "\115\044\111\045\176\051\067\052\117\053\130\054\072" +
    "\055\102\001\001\000\030\003\336\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\002\001\001\000\056\003\122\004" +
    "\064\005\104\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\030\077\033\125\034\061\035\123\043\115\044" +
    "\111\045\110\046\332\051\067\052\117\053\130\054\072" +
    "\055\102\001\001\000\006\007\053\010\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\237\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\040\003\165\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\031\166\032\163" +
    "\033\125\034\061\035\123\036\150\037\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\165\004\064" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\031" +
    "\166\032\163\033\125\034\061\035\123\036\150\037\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\133\001" +
    "\001\000\002\001\001\000\030\003\145\004\064\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\033\125\034" +
    "\061\035\123\001\001\000\002\001\001\000\032\003\136" +
    "\004\064\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\033\125\034\061\035\123\041\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\144\004\064\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\033\125\034\061\035\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\113\013\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\210\004\064\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\031\166\032\163\033\125\034\061\035\123" +
    "\036\207\037\211\001\001\000\002\001\001\000\040\003" +
    "\165\004\064\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\031\166\032\163\033\125\034\061\035\123\036" +
    "\150\037\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\165\004\064\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\031\166\032\163\033\125\034\061\035" +
    "\123\036\150\037\203\001\001\000\002\001\001\000\004" +
    "\031\201\001\001\000\030\003\200\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\004\032\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\165\004\064\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\031\166\032" +
    "\163\033\125\034\061\035\123\036\150\037\173\001\001" +
    "\000\004\032\172\001\001\000\056\003\122\004\064\005" +
    "\104\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\030\077\033\125\034\061\035\123\043\115\044\111\045" +
    "\110\046\175\051\067\052\117\053\130\054\072\055\102" +
    "\001\001\000\054\003\122\004\064\005\104\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\030\077\033\125" +
    "\034\061\035\123\043\115\044\111\045\176\051\067\052" +
    "\117\053\130\054\072\055\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\202\004" +
    "\064\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\033\125\034\061\035\123\001\001\000\002\001\001\000" +
    "\004\032\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\172\001\001\000\002\001\001\000\004\031" +
    "\201\001\001\000\004\032\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\136\004" +
    "\064\006\124\007\053\010\074\011\101\012\113\013\126" +
    "\033\125\034\061\035\123\041\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\172\001\001\000\056\003\122" +
    "\004\064\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\030\077\033\125\034\061\035\123\043\115" +
    "\044\111\045\110\046\230\051\067\052\117\053\130\054" +
    "\072\055\102\001\001\000\054\003\122\004\064\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\030" +
    "\077\033\125\034\061\035\123\043\115\044\111\045\176" +
    "\051\067\052\117\053\130\054\072\055\102\001\001\000" +
    "\002\001\001\000\056\003\122\004\064\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\030\077\033" +
    "\125\034\061\035\123\043\115\044\111\045\110\046\234" +
    "\051\067\052\117\053\130\054\072\055\102\001\001\000" +
    "\002\001\001\000\054\003\122\004\064\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\030\077\033" +
    "\125\034\061\035\123\043\115\044\111\045\176\051\067" +
    "\052\117\053\130\054\072\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\053" +
    "\010\251\001\001\000\006\007\053\010\250\001\001\000" +
    "\006\007\053\010\247\001\001\000\006\007\053\010\246" +
    "\001\001\000\006\007\053\010\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\253\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\042\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\260\004\064\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\033\125\034" +
    "\061\035\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\322\004\064\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\033\125\034\061\035\123\001\001" +
    "\000\030\003\263\004\064\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\033\125\034\061\035\123\001\001" +
    "\000\002\001\001\000\030\003\265\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\030\003\274\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\030\003\267\004\064\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\033\125\034\061" +
    "\035\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\122\004\064\005\104\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\030\077\033\125\034\061\035" +
    "\123\043\115\044\111\045\110\046\272\051\067\052\117" +
    "\053\130\054\072\055\102\001\001\000\054\003\122\004" +
    "\064\005\104\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\030\077\033\125\034\061\035\123\043\115\044" +
    "\111\045\176\051\067\052\117\053\130\054\072\055\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\276\004\064\006\124\007\053\010\074\011\101\012\113" +
    "\013\126\033\125\034\061\035\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\122" +
    "\004\064\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\030\077\033\125\034\061\035\123\043\115" +
    "\044\111\045\110\046\302\051\067\052\117\053\130\054" +
    "\072\055\102\001\001\000\054\003\122\004\064\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\030" +
    "\077\033\125\034\061\035\123\043\115\044\111\045\176" +
    "\051\067\052\117\053\130\054\072\055\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\122\004\064" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\030\077\033\125\034\061\035\123\043\115\044\111" +
    "\045\110\046\306\051\067\052\117\053\130\054\072\055" +
    "\102\001\001\000\054\003\122\004\064\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\030\077\033" +
    "\125\034\061\035\123\043\115\044\111\045\176\051\067" +
    "\052\117\053\130\054\072\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\122\004\064\005\104" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\030" +
    "\077\033\125\034\061\035\123\043\115\044\111\045\110" +
    "\046\312\051\067\052\117\053\130\054\072\055\102\001" +
    "\001\000\054\003\122\004\064\005\104\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\030\077\033\125\034" +
    "\061\035\123\043\115\044\111\045\176\051\067\052\117" +
    "\053\130\054\072\055\102\001\001\000\002\001\001\000" +
    "\030\003\315\004\064\006\124\007\053\010\074\011\101" +
    "\012\113\013\126\033\125\034\061\035\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\122\004\064" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\030\077\033\125\034\061\035\123\043\115\044\111" +
    "\045\110\046\320\051\067\052\117\053\130\054\072\055" +
    "\102\001\001\000\054\003\122\004\064\005\104\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\030\077\033" +
    "\125\034\061\035\123\043\115\044\111\045\176\051\067" +
    "\052\117\053\130\054\072\055\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\324\004\064\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\033\125\034" +
    "\061\035\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\122\004\064\005\104\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\030\077\033\125\034\061" +
    "\035\123\043\115\044\111\045\110\046\327\051\067\052" +
    "\117\053\130\054\072\055\102\001\001\000\054\003\122" +
    "\004\064\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\030\077\033\125\034\061\035\123\043\115" +
    "\044\111\045\176\051\067\052\117\053\130\054\072\055" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\122\004\064\005\104\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\030\077\033\125\034\061\035\123" +
    "\043\115\044\111\045\176\051\067\052\117\053\130\054" +
    "\072\055\102\001\001\000\040\003\165\004\064\006\124" +
    "\007\053\010\074\011\101\012\113\013\126\031\166\032" +
    "\163\033\125\034\061\035\123\036\150\037\335\001\001" +
    "\000\002\001\001\000\004\032\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\343\004\064\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\033\125\034\061\035\123\047\346" +
    "\050\345\001\001\000\040\003\122\004\064\005\104\006" +
    "\124\007\053\010\074\011\101\012\113\013\126\030\077" +
    "\033\125\034\061\035\123\043\115\044\354\001\001\000" +
    "\040\003\122\004\064\005\104\006\124\007\053\010\074" +
    "\011\101\012\113\013\126\030\077\033\125\034\061\035" +
    "\123\043\115\044\353\001\001\000\032\003\343\004\064" +
    "\006\124\007\053\010\074\011\101\012\113\013\126\033" +
    "\125\034\061\035\123\047\350\001\001\000\002\001\001" +
    "\000\040\003\122\004\064\005\104\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\030\077\033\125\034\061" +
    "\035\123\043\115\044\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\122\004\064\005\104\006\124\007" +
    "\053\010\074\011\101\012\113\013\126\030\077\033\125" +
    "\034\061\035\123\043\115\044\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\035\017\032\022\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\010\027\374\001\001" +
    "\000\056\003\122\004\064\005\104\006\124\007\053\010" +
    "\074\011\101\012\113\013\126\030\077\033\125\034\061" +
    "\035\123\043\115\044\111\045\110\046\375\051\067\052" +
    "\117\053\130\054\072\055\102\001\001\000\054\003\122" +
    "\004\064\005\104\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\030\077\033\125\034\061\035\123\043\115" +
    "\044\111\045\176\051\067\052\117\053\130\054\072\055" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\003\122\004\064\005\104\006\124\007\053\010\074\011" +
    "\101\012\113\013\126\030\077\033\125\034\061\035\123" +
    "\043\115\044\111\045\110\046\u0101\051\067\052\117\053" +
    "\130\054\072\055\102\001\001\000\054\003\122\004\064" +
    "\005\104\006\124\007\053\010\074\011\101\012\113\013" +
    "\126\030\077\033\125\034\061\035\123\043\115\044\111" +
    "\045\176\051\067\052\117\053\130\054\072\055\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u0107" +
    "\021\u0109\023\u0106\001\001\000\002\001\001\000\006\016" +
    "\u0107\021\u0122\001\001\000\004\014\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u012d\001\001\000\030\003\u0127\004\064\006\124\007\053" +
    "\010\074\011\101\012\113\013\126\033\125\034\061\035" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\u0129\004\064\006\124\007\053\010\074\011\101\012" +
    "\113\013\126\033\125\034\061\035\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    this.table = new SymbolTable();
    this.syntax_result = new SyntacticAnalysisResult();
    this.semantic_result = new SemanticAnalysisResult();
    this.generateCode = true;


    }



    private SymbolTable table;
    private SyntacticAnalysisResult syntax_result;
    private SemanticAnalysisResult semantic_result;
    private boolean generateCode;

    public SyntacticAnalysisResult getSyntacticResult()
    {
        return this.syntax_result;
    }

    public SemanticAnalysisResult getSemanticResult()
    {
        return this.semantic_result;
    }

    public void setGenerateCode(boolean flag)
    {
        this.generateCode = flag;
    }

    public int error_sync_size()
    {
        return 1;
    }
 
    public void report_error(String message, Object info)
    {
        if (info == null)
        {
            Lexer scanner = ((Lexer) this.getScanner());
            info = scanner.getLastToken();
        }
        if (info instanceof Symbol)
        {
            Symbol s = ((Symbol) info);
            this.syntax_result.addError(message, s);
        }
    }
   
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
        this._done_parsing = true;
    }

    public void syntax_error(Symbol current_token)
    {
    }

    public void unrecovered_syntax_error(Symbol current_token)
    {
        report_fatal_error("Couldn't repair and continue parse", current_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // number_term ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n.doubleValue(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // number_term ::= DOUBLE 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_term",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal_term ::= XSTRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // literal_term ::= CHARACTER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_term",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // boolean_term ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // boolean_term ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_term",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= number_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // term ::= literal_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // term ::= boolean_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // term ::= XBYTE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte t = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // term ::= IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= NIL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= function_call 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= number_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= identifier_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= byte_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte e = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= literal_expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= boolean_term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NIL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // number_expr ::= number_expr PLUS number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // number_expr ::= number_expr MINUS number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // number_expr ::= number_expr TIMES number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // number_expr ::= number_expr DIV number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 / e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number_expr ::= number_expr MOD number_expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 % e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number_expr ::= MINUS number_expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // number_expr ::= number_term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // number_expr ::= number_term error number_term 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 report_error("Invalid operator " + e + " in expression.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number_expr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identifier_expr ::= IDENTIFIER PLUS_PLUS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        /*
        TableRow row = table.lookupSymbol(id);//Retrieve the row of the table where is stored.
        int value = (int) row.getValue();//Get the value from the row.
        try
        {
            RESULT = value;
            row.setValue(++value);
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
        */
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identifier_expr ::= IDENTIFIER MINUS_MINUS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        /*
        TableRow row = table.lookupSymbol(id);//Retrieve the row of the table where is stored.
        int value = (int) row.getValue();//Get the value from the row.
        try
        {
            RESULT = value;
            row.setValue(--value);
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
        */
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifier_expr ::= PLUS_PLUS IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        /*
        TableRow row = table.lookupSymbol(id);//Retrieve the row of the table where is stored.
        int value = (int) row.getValue();//Get the value from the row.
        try
        {
            row.setValue(++value);
            RESULT = value;
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
        */
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifier_expr ::= MINUS_MINUS IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        /*
        TableRow row = table.lookupSymbol(id);//Retrieve the row of the table where is stored.
        int value = (int) row.getValue();//Get the value from the row.
        try
        {
            row.setValue(--value);
            RESULT = value;
        }
        catch (Exception ex)
        {
            report_error(ex.getMessage(), null);
        }
        */
   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // identifier_expr ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // byte_expr ::= byte_expr SHIFT_LEFT NUMBER 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte((byte) (b << n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // byte_expr ::= byte_expr SHIFT_RIGHT NUMBER 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte((byte) (b >> n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // byte_expr ::= XBYTE 
            {
              Byte RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Byte b = (Byte)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Byte(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("byte_expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal_expr ::= literal_expr PLUS literal_expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal_expr ::= literal_term 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment_operator ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment_operator ::= PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assignment_operator ::= MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assignment_operator ::= DIV_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assignment_operator ::= TIMES_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assignment_operator ::= SHIFT_LEFT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assignment_operator ::= SHIFT_RIGHT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_operator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assignment_expr ::= IDENTIFIER assignment_operator expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        TableRow row  = table.lookupSymbol(id);//Retrieve the row of the table where is stored.
        if (row != null)
        {
            try
            {
                row.setValue(e);
                RESULT = e;
            }
            catch (Exception ex)
            {
                report_error(ex.getMessage(), null);
            }
        }
        else
        {
            report_error("Symbol " + id + " not declared.", null);
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment_expr ::= IDENTIFIER assignment_operator 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 report_error("Expected expression in assigment of " + i + " .", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment_expr ::= assignment_operator expr 
            {
              Object RESULT =null;
		 report_error("Expected identifier in assigment.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment_expr ::= assignment_operator 
            {
              Object RESULT =null;
		 report_error("Expected identifier and expression in assigment.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condition_operator ::= EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condition_operator ::= NOT_EQUALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition_operator ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condition_operator ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condition_operator ::= GREATER_EQUALS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condition_operator ::= LESS_EQUALS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_operator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condition ::= LPAREN condition RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= expr condition_operator expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condition ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condition ::= condition_operator expr 
            {
              Object RESULT =null;
		 report_error("Expected expression in condition.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condition_list_operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condition_list_operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condition_list_operator ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list_operator",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condition_list ::= LPAREN condition_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condition_list ::= condition_list condition_list_operator condition_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condition_list ::= NOT condition_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition_list ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condition_list ::= condition_list_operator condition_list 
            {
              Object RESULT =null;
		 report_error("Missing condition in condition list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition_list ::= NOT error 
            {
              Object RESULT =null;
		 report_error("Missing condition in condition list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        il.add(id);
        RESULT = il;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // identifier_list ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<String> list = new LinkedList();
        list.add(id);
        RESULT = list;  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // identifier_list ::= identifier_list IDENTIFIER 
            {
              List<String> RESULT =null;
		 report_error("Missing comma in identifier list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifier_list ::= identifier_list COMMA error 
            {
              List<String> RESULT =null;
		 report_error("Missing identifier in identifier list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // data_type ::= STRING 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // data_type ::= CHAR 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // data_type ::= REAL 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // data_type ::= BYTE 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // data_type ::= INT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // data_type ::= LONGINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // data_type ::= SHORTINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // data_type ::= BOOLEAN 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // array_data_type ::= CHAR 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // array_data_type ::= INT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array_data_type ::= LONGINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // array_data_type ::= SHORTINT 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_data_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variable_declaration ::= identifier_list COLON data_type SEMI 
            {
              List<TableRow> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           TableRow row = new TableRow(id, type);
           list.add(row);
       }
       RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variable_declaration ::= identifier_list COLON ARRAY LBRACKET NUMBER DOT DOT NUMBER RBRACKET OF array_data_type SEMI 
            {
              List<TableRow> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int array_typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int array_typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer array_type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
       List<TableRow> list = new LinkedList();
       for (String id : il)
       {
           ArrayTableRow row = new ArrayTableRow(id, type, array_type, n2 - n1);
           list.add(row);
       }
       RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variable_declaration ::= identifier_list data_type SEMI 
            {
              List<TableRow> RESULT =null;
		 report_error("Missing colon in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_declaration ::= identifier_list COLON SEMI 
            {
              List<TableRow> RESULT =null;
		 report_error("Missing data type in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable_declaration_list ::= variable_declaration_list variable_declaration 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> v = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.addAll(v);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variable_declaration_list ::= variable_declaration 
            {
              List<TableRow> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> v = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = v;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable_declaration_block ::= VAR variable_declaration_list END 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable_declaration_block ::= 
            {
              List<TableRow> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_block",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // constant_declaration ::= IDENTIFIER EQUALS expr SEMI 
            {
              TableRow RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        TableRow row = new TableRow(id, -1, e, true);
        RESULT = row;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // constant_declaration ::= IDENTIFIER expr SEMI 
            {
              TableRow RESULT =null;
		 report_error("Missing operator in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // constant_declaration ::= IDENTIFIER EQUALS SEMI 
            {
              TableRow RESULT =null;
		 report_error("Missing espression in declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // constant_declaration_list ::= constant_declaration_list constant_declaration 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow c = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        list.add(c);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // constant_declaration_list ::= constant_declaration 
            {
              List<TableRow> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow c = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<TableRow> list = new LinkedList();
        list.add(c);
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // constant_declaration_block ::= CONST constant_declaration_list END 
            {
              List<TableRow> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> list = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // constant_declaration_block ::= 
            {
              List<TableRow> RESULT =null;
		
        RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_declaration_block",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaration_block ::= constant_declaration_block variable_declaration_block 
            {
              List<TableRow> RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<TableRow> l1 = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<TableRow> l2 = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        List<TableRow> list = new LinkedList();
        list.addAll(l1);
        list.addAll(l2);

        table.pushScope();
        for (TableRow row : list)
        {
            table.declareSymbol(row);
        }

        RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter_declaration ::= data_type IDENTIFIER 
            {
              TableRow RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = new TableRow(id, type);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter_declaration ::= error IDENTIFIER 
            {
              TableRow RESULT =null;
		 report_error("Missing data type in paramater declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameter_declaration ::= data_type error 
            {
              TableRow RESULT =null;
		 report_error("Missing identifier in parameter declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter_declaration_list ::= parameter_declaration_list COMMA parameter_declaration 
            {
              List<TableRow> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TableRow> l = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow p = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         l.add(p);
         RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_declaration_list ::= parameter_declaration 
            {
              List<TableRow> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TableRow p = (TableRow)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         List<TableRow> list = new LinkedList();
         list.add(p);
         RESULT = list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter_declaration_list ::= 
            {
              List<TableRow> RESULT =null;
		
         RESULT = new LinkedList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter_list_forced ::= parameter_list_forced COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_forced",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter_list_forced ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list_forced",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter_list ::= parameter_list COMMA expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_list ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter_list ::= error 
            {
              Object RESULT =null;
		 report_error("Missing expression in parameter list.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentence_item ::= assignment_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence_item",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentence_item ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence_item",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentence ::= sentence_item SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // code_block_item ::= sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // code_block_item ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // code_block_item ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // code_block_item ::= repeat_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // code_block_item ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // code_block_item ::= case_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block_item",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // code_block ::= code_block code_block_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // code_block ::= code_block_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("code_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr TO expr DO BEGIN code_block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for_statement ::= FOR ASSIGNMENT expr TO expr DO BEGIN code_block END 
            {
              Object RESULT =null;
		 report_error("Missing identifier in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_statement ::= FOR IDENTIFIER expr TO expr DO BEGIN code_block END 
            {
              Object RESULT =null;
		 report_error("Missing assignment in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_statement ::= FOR IDENTIFIER ASSIGNMENT TO expr DO BEGIN code_block END 
            {
              Object RESULT =null;
		 report_error("Missing expression in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr expr DO BEGIN code_block END 
            {
              Object RESULT =null;
		 report_error("Missing reserved word in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for_statement ::= FOR IDENTIFIER ASSIGNMENT expr TO error DO BEGIN code_block END 
            {
              Object RESULT =null;
		 report_error("Missing expression in for statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // while_statement ::= WHILE condition_list DO BEGIN code_block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // while_statement ::= WHILE error END 
            {
              Object RESULT =null;
		 report_error("Error in while statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // repeat_statement ::= REPEAT code_block UNTIL condition_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // repeat_statement ::= REPEAT code_block UNTIL error 
            {
              Object RESULT =null;
		 report_error("Missing condition in repeat statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_statement ::= IF condition_list THEN code_block ELSE code_block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if_statement ::= IF condition_list THEN code_block END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if_statement ::= IF condition_list THEN error 
            {
              Object RESULT =null;
		 report_error("Missing sentence in if statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // if_statement ::= IF condition_list THEN code_block ELSE error 
            {
              Object RESULT =null;
		 report_error("Missing else sentence in if statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_item ::= expr COLON sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_item ::= expr sentence 
            {
              Object RESULT =null;
		 report_error("Missing colon in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // case_item ::= expr COLON error 
            {
              Object RESULT =null;
		 report_error("Missing sentence in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // case_item ::= COLON sentence 
            {
              Object RESULT =null;
		 report_error("Missing expression in case item.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_item",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // case_list ::= case_list case_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // case_list ::= case_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_list",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // case_statement ::= CASE IDENTIFIER OF case_list ELSE sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // case_statement ::= CASE error ELSE 
            {
              Object RESULT =null;
		 report_error("Error in case statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // case_statement ::= CASE IDENTIFIER OF case_list ELSE error 
            {
              Object RESULT =null;
		 report_error("Invalid sentence in case statement.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // function ::= FUNCTION IDENTIFIER LPAREN parameter_declaration_list RPAREN COLON data_type BEGIN declaration_block code_block END 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		List<TableRow> p = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        table.popScope();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // function ::= FUNCTION error END 
            {
              Object RESULT =null;
		 report_error("Error in function declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // procedure ::= PROCEDURE IDENTIFIER LPAREN parameter_declaration_list RPAREN BEGIN declaration_block code_block END 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        table.popScope();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // procedure ::= PROCEDURE error END 
            {
              Object RESULT =null;
		 report_error("Error in procedure declaration.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // function_item ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_item",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function_item ::= procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_item",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // function_list ::= function_list function_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // function_list ::= function_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_list",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // functions_declaration ::= function_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_declaration",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // functions_declaration ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions_declaration",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function_read ::= READ LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_read",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function_write ::= WRITE LPAREN parameter_list_forced RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function_write ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		 report_error("Function write must have at least one parameter.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_write",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // function_call ::= IDENTIFIER LPAREN parameter_list RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_call ::= function_write 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_call ::= function_read 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // program ::= PROGRAM IDENTIFIER declaration_block functions_declaration BEGIN code_block END 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<TableRow> vars = (List<TableRow>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
        table.popScope();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // program ::= error 
            {
              Object RESULT =null;
		 report_error("Error in program.", null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
