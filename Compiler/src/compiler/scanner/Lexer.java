/* The following code was generated by JFlex 1.6.0 */

package compiler.scanner;

import java_cup.runtime.Symbol;
import compiler.Token;
import compiler.TokenList;
import compiler.parser.ParserSym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/home/jose/Projects/IC-5701 Compiler/Compiler/src/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\63\1\3\1\1\22\0\1\3\2\0\1\12"+
    "\3\0\1\11\1\14\1\16\1\15\1\51\1\62\1\6\1\7\1\13"+
    "\12\5\1\56\1\61\1\53\1\52\1\54\2\0\1\21\1\24\1\34"+
    "\1\40\1\10\1\43\1\25\1\37\1\27\1\4\1\47\1\32\1\50"+
    "\1\30\1\31\1\45\1\4\1\22\1\36\1\33\1\44\1\41\1\42"+
    "\1\55\1\23\1\4\1\57\1\0\1\60\3\0\1\21\1\24\1\34"+
    "\1\40\1\10\1\43\1\25\1\37\1\27\1\4\1\47\1\32\1\50"+
    "\1\30\1\31\1\45\1\4\1\22\1\36\1\33\1\44\1\41\1\42"+
    "\1\55\1\23\1\4\1\17\1\0\1\20\7\0\1\63\252\0\2\26"+
    "\115\0\1\35\u1ea8\0\1\63\1\63\u0100\0\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\3"+
    "\2\1\1\7\1\10\1\11\1\12\1\1\4\3\1\1"+
    "\6\3\1\1\10\3\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\21\1\22\1\23\1\3\1\0\1\24"+
    "\1\25\2\3\1\0\1\26\1\27\1\2\1\30\1\0"+
    "\1\31\1\0\7\3\1\32\1\33\1\32\1\33\1\0"+
    "\2\3\1\34\1\35\4\3\1\36\4\3\3\0\3\3"+
    "\1\0\1\3\1\37\2\3\1\0\3\3\1\0\7\3"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\3"+
    "\1\47\1\3\1\50\1\51\1\0\1\3\1\0\1\27"+
    "\2\0\1\3\1\52\7\3\1\0\1\53\1\3\1\53"+
    "\2\54\1\55\5\3\1\0\3\3\1\56\2\0\1\56"+
    "\2\3\2\7\1\3\1\57\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\1\0\1\3\1\60\4\3\1\61\1\62"+
    "\1\63\1\64\1\3\1\0\2\65\1\0\1\3\1\66"+
    "\1\67\2\3\1\0\1\3\1\70\1\3\1\71\1\0"+
    "\3\3\1\72\1\73\1\74\2\75\1\0\1\3\1\76"+
    "\2\0\3\3\1\0\1\3\2\77\1\0\1\3\1\0"+
    "\1\3\2\100\2\3\1\0\1\3\1\0\4\3\1\50"+
    "\1\0\1\101\2\3\2\102\1\3\1\0\1\3\1\103"+
    "\1\0\1\3\2\104\2\0\3\3\2\105\2\106\2\107"+
    "\2\3\2\110\1\0\4\3\1\111\1\112\1\3\2\113"+
    "\1\0\1\3\1\114\1\0\1\114\1\3\1\115\1\3"+
    "\1\0\1\3\2\116\3\3\1\117\2\120\1\0\1\3"+
    "\1\121\1\0\1\3\1\122\2\3\2\123\2\124\2\3"+
    "\1\125\166\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\u0104\0\64"+
    "\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\64\0\u0270"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\64\0\u06e8\0\u071c"+
    "\0\u0750\0\u0784\0\64\0\64\0\64\0\64\0\u07b8\0\u07ec"+
    "\0\64\0\64\0\u0820\0\u0854\0\u0888\0\64\0\u01a0\0\u08bc"+
    "\0\64\0\u08f0\0\64\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\64\0\u0af8\0\u07b8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u07b8\0\u07b8\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u07b8\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70"+
    "\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\64\0\64\0\64\0\u1214"+
    "\0\64\0\64\0\u1248\0\u127c\0\64\0\u12b0\0\u12e4\0\u12b0"+
    "\0\u1318\0\u134c\0\u1380\0\64\0\u13b4\0\u13e8\0\u141c\0\u12b0"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\64\0\u15f0\0\u12b0\0\64\0\u12b0\0\u12b0\0\u1624\0\u1658"+
    "\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\64"+
    "\0\u17f8\0\u182c\0\u12b0\0\u1860\0\u1894\0\64\0\u12b0\0\u18c8"+
    "\0\u12b0\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u12b0"+
    "\0\64\0\64\0\u12b0\0\u1bd4\0\u1c08\0\64\0\u1bd4\0\u1c3c"+
    "\0\u1c70\0\u1bd4\0\u1bd4\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1bd4"+
    "\0\u1d74\0\u1bd4\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1bd4\0\u1bd4"+
    "\0\u1bd4\0\64\0\u1bd4\0\u1e78\0\u1eac\0\u1bd4\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\64\0\u1bd4\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\64\0\u1bd4\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u22f0"+
    "\0\u22bc\0\u2324\0\u2358\0\64\0\u22bc\0\u238c\0\u23c0\0\u23f4"+
    "\0\u22bc\0\u2428\0\u245c\0\64\0\u22bc\0\u2490\0\u24c4\0\u24f8"+
    "\0\u252c\0\u2560\0\64\0\u22bc\0\64\0\u22bc\0\64\0\u22bc"+
    "\0\u2594\0\u25c8\0\64\0\u22bc\0\u25fc\0\u2630\0\u2664\0\u2698"+
    "\0\u26cc\0\u26cc\0\u26cc\0\u2700\0\64\0\u26cc\0\u2734\0\u2768"+
    "\0\64\0\u279c\0\u26cc\0\u27d0\0\u26cc\0\u2804\0\u2838\0\u286c"+
    "\0\64\0\u26cc\0\u28a0\0\u28d4\0\u2908\0\u2908\0\64\0\u2908"+
    "\0\u293c\0\u2970\0\u2908\0\u29a4\0\u29d8\0\u2908\0\u2a0c\0\u2a40"+
    "\0\64\0\u2a40\0\64\0\u2a40\0\u2a74\0\u2aa8\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c"+
    "\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc"+
    "\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c"+
    "\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c"+
    "\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc"+
    "\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c"+
    "\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c"+
    "\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc"+
    "\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c"+
    "\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc"+
    "\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c"+
    "\0\u41d0\0\u4204\0\u4238\0\u426c\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\5\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\2\1\5\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\67\0\1\4\65\0\2\57\2\0\1\57"+
    "\10\0\5\57\1\0\6\57\1\0\10\57\1\0\2\57"+
    "\4\0\1\57\13\0\1\6\1\0\1\60\61\0\1\6"+
    "\1\61\43\0\1\62\15\0\2\57\2\0\1\57\10\0"+
    "\5\57\1\0\1\57\1\63\1\57\1\64\2\57\1\0"+
    "\10\57\1\0\2\57\4\0\1\57\6\0\11\65\1\66"+
    "\52\65\5\0\1\67\71\0\1\70\36\0\1\71\26\0"+
    "\1\72\120\0\1\73\11\0\20\74\1\0\43\74\4\0"+
    "\2\57\2\0\1\57\10\0\1\57\1\75\3\57\1\0"+
    "\1\57\1\76\4\57\1\0\10\57\1\0\2\57\4\0"+
    "\1\57\12\0\2\57\2\0\1\77\10\0\5\57\1\0"+
    "\6\57\1\0\10\57\1\0\2\57\4\0\1\57\12\0"+
    "\2\57\2\0\1\100\10\0\2\57\1\101\2\57\1\0"+
    "\2\57\1\102\3\57\1\0\10\57\1\0\2\57\4\0"+
    "\1\57\12\0\2\57\2\0\1\57\10\0\5\57\1\0"+
    "\2\57\1\103\3\57\1\0\10\57\1\0\2\57\4\0"+
    "\1\57\36\0\1\104\12\0\1\105\24\0\2\57\2\0"+
    "\1\57\10\0\5\57\1\0\1\57\1\106\4\57\1\0"+
    "\5\57\1\107\2\57\1\0\2\57\4\0\1\57\12\0"+
    "\2\57\2\0\1\57\10\0\5\57\1\110\1\111\1\57"+
    "\1\112\3\57\1\0\10\57\1\0\2\57\4\0\1\57"+
    "\12\0\2\57\2\0\1\57\10\0\1\57\1\113\3\57"+
    "\1\0\6\57\1\0\5\57\1\114\2\57\1\0\2\57"+
    "\4\0\1\57\12\0\2\57\2\0\1\57\10\0\1\115"+
    "\4\57\1\0\2\57\1\116\3\57\1\0\10\57\1\0"+
    "\2\57\4\0\1\57\12\0\2\57\2\0\1\57\10\0"+
    "\1\57\1\117\1\120\2\57\1\0\2\57\1\121\3\57"+
    "\1\0\1\57\1\122\6\57\1\0\2\57\4\0\1\57"+
    "\12\0\2\57\2\0\1\57\10\0\1\123\4\57\1\0"+
    "\2\57\1\124\3\57\1\0\1\57\1\125\6\57\1\0"+
    "\2\57\4\0\1\57\16\0\1\126\22\0\1\127\3\0"+
    "\1\130\30\0\2\57\2\0\1\131\10\0\5\57\1\0"+
    "\4\57\1\132\1\57\1\0\1\57\1\133\6\57\1\0"+
    "\2\57\4\0\1\57\12\0\2\57\2\0\1\57\10\0"+
    "\5\57\1\134\1\135\1\57\1\136\3\57\1\0\10\57"+
    "\1\0\2\57\4\0\1\57\12\0\2\57\2\0\1\57"+
    "\10\0\1\137\4\57\1\0\6\57\1\0\10\57\1\0"+
    "\2\57\4\0\1\57\12\0\2\57\2\0\1\57\10\0"+
    "\1\57\1\140\3\57\1\141\1\142\5\57\1\0\1\57"+
    "\1\143\6\57\1\0\2\57\4\0\1\57\12\0\2\57"+
    "\2\0\1\57\10\0\1\144\4\57\1\145\1\146\1\57"+
    "\1\147\3\57\1\0\6\57\1\150\1\57\1\0\2\57"+
    "\4\0\1\57\12\0\2\57\2\0\1\57\10\0\5\57"+
    "\1\0\1\57\1\151\4\57\1\0\10\57\1\0\2\57"+
    "\4\0\1\57\12\0\2\57\2\0\1\57\10\0\1\152"+
    "\1\153\3\57\1\0\6\57\1\0\10\57\1\0\2\57"+
    "\4\0\1\57\12\0\2\57\2\0\1\57\10\0\5\57"+
    "\1\0\2\57\1\154\3\57\1\0\10\57\1\0\2\57"+
    "\4\0\1\57\57\0\1\155\1\156\63\0\1\157\1\160"+
    "\1\161\61\0\1\162\1\0\1\163\13\0\2\57\2\0"+
    "\1\57\10\0\5\57\1\0\2\57\1\164\3\57\1\0"+
    "\10\57\1\0\2\57\4\0\1\57\60\0\1\165\15\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\6\166\1\0"+
    "\10\166\1\0\2\166\4\0\1\166\13\0\1\167\62\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\6\166\1\0"+
    "\2\166\1\170\5\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\6\166\1\171"+
    "\1\172\7\166\1\0\2\166\4\0\1\166\6\0\11\173"+
    "\1\174\52\173\1\70\1\3\1\4\61\70\15\175\1\176"+
    "\46\175\20\74\1\4\43\74\4\0\2\166\2\0\1\166"+
    "\10\0\1\166\1\177\3\166\1\0\6\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\12\0\2\166\2\0\1\166"+
    "\10\0\5\166\1\0\6\166\1\0\2\166\1\200\5\166"+
    "\1\0\2\166\4\0\1\166\12\0\2\166\2\0\1\166"+
    "\10\0\1\201\4\166\1\0\5\166\1\202\1\0\7\166"+
    "\1\203\1\0\2\166\4\0\1\166\12\0\2\166\2\0"+
    "\1\166\10\0\4\166\1\204\1\0\6\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\12\0\2\166\2\0\1\166"+
    "\10\0\5\166\1\0\4\166\1\205\1\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\12\0\2\166\2\0\1\166"+
    "\10\0\5\166\1\0\2\166\1\206\3\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\12\0\2\166\2\0\1\166"+
    "\10\0\5\166\1\0\4\166\1\207\1\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\40\0\1\210\1\211\34\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\3\166\1\212"+
    "\1\213\1\166\1\0\10\166\1\0\2\166\4\0\1\166"+
    "\40\0\1\214\35\0\2\166\2\0\1\166\10\0\5\166"+
    "\1\0\3\166\1\215\2\166\1\0\10\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\166\2\0\1\166\10\0\5\166"+
    "\1\0\4\166\1\216\1\166\1\0\10\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\166\2\0\1\166\10\0\3\166"+
    "\1\217\1\166\1\0\6\166\1\0\10\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\166\2\0\1\166\10\0\5\166"+
    "\1\0\1\166\1\220\4\166\1\0\10\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\166\2\0\1\166\10\0\5\166"+
    "\1\0\6\166\1\0\6\166\1\221\1\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\166\2\0\1\166\10\0\5\166"+
    "\1\0\6\166\1\0\7\166\1\222\1\0\2\166\4\0"+
    "\1\166\12\0\2\166\2\0\1\223\10\0\5\166\1\0"+
    "\6\166\1\0\10\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\6\166\1\224"+
    "\1\225\7\166\1\0\2\166\4\0\1\166\12\0\2\166"+
    "\2\0\1\166\10\0\5\166\1\0\1\166\1\226\4\166"+
    "\1\0\10\166\1\0\2\166\4\0\1\166\12\0\2\166"+
    "\2\0\1\166\10\0\1\227\4\166\1\0\6\166\1\0"+
    "\10\166\1\0\2\166\4\0\1\166\41\0\1\230\52\0"+
    "\1\231\72\0\1\232\36\0\2\166\2\0\1\166\10\0"+
    "\5\166\1\0\4\166\1\233\1\166\1\0\10\166\1\0"+
    "\2\166\4\0\1\166\12\0\2\166\2\0\1\166\10\0"+
    "\1\166\1\234\3\166\1\0\6\166\1\0\10\166\1\0"+
    "\2\166\4\0\1\166\12\0\2\166\2\0\1\166\10\0"+
    "\5\166\1\0\2\166\1\235\3\166\1\0\10\166\1\0"+
    "\2\166\4\0\1\166\47\0\1\236\26\0\2\166\2\0"+
    "\1\166\10\0\5\166\1\0\6\166\1\0\3\166\1\237"+
    "\4\166\1\0\2\166\4\0\1\166\12\0\2\166\2\0"+
    "\1\166\10\0\5\166\1\0\6\166\1\0\4\166\1\240"+
    "\3\166\1\0\2\166\4\0\1\166\12\0\2\166\2\0"+
    "\1\166\10\0\1\166\1\241\3\166\1\0\6\166\1\0"+
    "\10\166\1\0\2\166\4\0\1\166\12\0\2\166\2\0"+
    "\1\166\10\0\5\166\1\242\1\243\5\166\1\0\10\166"+
    "\1\0\2\166\4\0\1\166\41\0\1\244\34\0\2\166"+
    "\2\0\1\166\10\0\5\166\1\0\4\166\1\245\1\166"+
    "\1\0\10\166\1\0\2\166\4\0\1\166\12\0\2\166"+
    "\2\0\1\166\10\0\5\166\1\246\1\247\5\166\1\0"+
    "\10\166\1\0\2\166\4\0\1\166\12\0\2\166\2\0"+
    "\1\166\10\0\5\166\1\0\3\166\1\250\2\166\1\0"+
    "\10\166\1\0\2\166\4\0\1\166\40\0\1\251\35\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\3\166\1\252"+
    "\2\166\1\0\10\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\1\166\1\253\3\166\1\0"+
    "\6\166\1\0\10\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\1\166\1\254"+
    "\4\166\1\0\10\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\4\166\1\255"+
    "\1\166\1\0\10\166\1\0\2\166\4\0\1\166\12\0"+
    "\2\166\2\0\1\166\10\0\5\166\1\0\5\166\1\256"+
    "\1\0\10\166\1\0\2\166\4\0\1\166\12\0\2\166"+
    "\2\0\1\166\10\0\5\166\1\0\2\166\1\257\3\166"+
    "\1\0\10\166\1\0\2\166\4\0\1\166\12\0\2\166"+
    "\2\0\1\166\10\0\5\166\1\0\6\166\1\0\2\166"+
    "\1\260\5\166\1\0\2\166\4\0\1\166\60\0\1\261"+
    "\63\0\1\262\15\0\2\166\2\0\1\166\10\0\1\166"+
    "\1\263\3\166\1\0\6\166\1\0\10\166\1\0\2\166"+
    "\4\0\1\166\12\0\2\264\2\0\1\264\10\0\5\264"+
    "\1\0\6\264\1\0\10\264\1\0\2\264\4\0\1\264"+
    "\13\0\1\167\2\0\1\265\63\0\1\266\57\0\2\264"+
    "\2\0\1\267\10\0\5\264\1\0\6\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\6\0\11\173\1\66\52\173"+
    "\15\175\1\270\46\175\15\0\1\176\1\4\51\0\2\264"+
    "\2\0\1\264\10\0\1\271\4\264\1\0\6\264\1\0"+
    "\10\264\1\0\2\264\4\0\1\264\12\0\2\264\2\0"+
    "\1\264\10\0\5\264\1\0\3\264\1\272\2\264\1\0"+
    "\2\264\1\273\5\264\1\0\2\264\4\0\1\264\12\0"+
    "\2\264\2\0\1\264\10\0\5\264\1\0\2\264\1\274"+
    "\3\264\1\0\10\264\1\0\2\264\4\0\1\264\12\0"+
    "\2\264\2\0\1\275\10\0\5\264\1\0\6\264\1\0"+
    "\10\264\1\0\2\264\4\0\1\264\12\0\2\264\2\0"+
    "\1\264\10\0\5\264\1\276\1\277\5\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\12\0\2\264\2\0\1\300"+
    "\10\0\5\264\1\0\6\264\1\0\10\264\1\0\2\264"+
    "\4\0\1\264\12\0\2\264\2\0\1\264\10\0\5\264"+
    "\1\0\3\264\1\301\2\264\1\0\10\264\1\0\2\264"+
    "\4\0\1\264\12\0\2\264\2\0\1\264\10\0\5\264"+
    "\1\0\2\264\1\302\3\264\1\0\10\264\1\0\2\264"+
    "\4\0\1\264\34\0\2\303\40\0\2\264\2\0\1\264"+
    "\10\0\5\264\1\303\1\304\5\264\1\0\10\264\1\0"+
    "\2\264\4\0\1\264\12\0\2\264\2\0\1\305\10\0"+
    "\5\264\1\0\6\264\1\0\10\264\1\0\2\264\4\0"+
    "\1\264\12\0\2\264\2\0\1\264\10\0\4\264\1\306"+
    "\1\0\6\264\1\0\10\264\1\0\2\264\4\0\1\264"+
    "\12\0\2\264\2\0\1\307\10\0\5\264\1\0\6\264"+
    "\1\0\10\264\1\0\2\264\4\0\1\264\12\0\2\264"+
    "\2\0\1\310\10\0\5\264\1\0\6\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\12\0\2\264\2\0\1\264"+
    "\10\0\5\264\1\0\1\264\1\311\4\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\16\0\1\312\57\0\2\264"+
    "\2\0\1\313\10\0\5\264\1\0\6\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\12\0\2\264\2\0\1\264"+
    "\10\0\5\264\1\0\6\264\1\314\1\315\7\264\1\0"+
    "\2\264\4\0\1\264\12\0\2\264\2\0\1\264\10\0"+
    "\1\264\1\316\3\264\1\0\6\264\1\0\10\264\1\0"+
    "\2\264\4\0\1\264\34\0\2\317\56\0\1\320\45\0"+
    "\2\264\2\0\1\264\10\0\5\264\1\317\1\321\5\264"+
    "\1\0\10\264\1\0\2\264\4\0\1\264\12\0\2\264"+
    "\2\0\1\264\10\0\1\264\1\322\3\264\1\0\6\264"+
    "\1\0\10\264\1\0\2\264\4\0\1\264\12\0\2\264"+
    "\2\0\1\264\10\0\5\264\1\0\1\264\1\323\4\264"+
    "\1\0\10\264\1\0\2\264\4\0\1\264\41\0\1\324"+
    "\34\0\2\264\2\0\1\264\10\0\5\264\1\0\4\264"+
    "\1\325\1\264\1\0\10\264\1\0\2\264\4\0\1\264"+
    "\45\0\1\326\30\0\2\264\2\0\1\264\10\0\5\264"+
    "\1\0\6\264\1\0\1\264\1\327\6\264\1\0\2\264"+
    "\4\0\1\264\40\0\1\330\35\0\2\264\2\0\1\264"+
    "\10\0\5\264\1\0\3\264\1\331\2\264\1\0\10\264"+
    "\1\0\2\264\4\0\1\264\12\0\2\264\2\0\1\264"+
    "\10\0\5\264\1\0\6\264\1\332\1\333\7\264\1\0"+
    "\2\264\4\0\1\264\16\0\1\334\57\0\2\264\2\0"+
    "\1\335\10\0\5\264\1\0\6\264\1\0\10\264\1\0"+
    "\2\264\4\0\1\264\12\0\2\264\2\0\1\264\10\0"+
    "\5\264\1\0\6\264\1\0\4\264\1\336\3\264\1\0"+
    "\2\264\4\0\1\264\12\0\2\264\2\0\1\264\10\0"+
    "\5\264\1\0\5\264\1\337\1\0\10\264\1\0\2\264"+
    "\4\0\1\264\12\0\2\264\2\0\1\264\10\0\5\264"+
    "\1\340\1\341\5\264\1\0\10\264\1\0\2\264\4\0"+
    "\1\264\12\0\2\264\2\0\1\264\10\0\5\264\1\0"+
    "\6\264\1\0\10\264\1\342\1\343\1\264\4\0\1\264"+
    "\12\0\2\264\2\0\1\264\10\0\4\264\1\344\1\0"+
    "\5\264\1\345\1\0\10\264\1\0\2\264\4\0\1\264"+
    "\12\0\2\346\2\0\1\346\10\0\5\346\1\0\6\346"+
    "\1\0\10\346\1\0\2\346\4\0\1\346\13\0\1\347"+
    "\1\350\55\0\15\175\1\270\1\4\45\175\4\0\2\346"+
    "\2\0\1\346\10\0\2\346\1\351\2\346\1\0\6\346"+
    "\1\0\10\346\1\0\2\346\4\0\1\346\12\0\2\346"+
    "\2\0\1\346\10\0\1\346\1\352\3\346\1\0\6\346"+
    "\1\0\10\346\1\0\2\346\4\0\1\346\12\0\2\346"+
    "\2\0\1\346\10\0\1\353\4\346\1\0\6\346\1\0"+
    "\10\346\1\0\2\346\4\0\1\346\36\0\1\354\37\0"+
    "\2\346\2\0\1\346\10\0\5\346\1\0\1\346\1\355"+
    "\4\346\1\0\10\346\1\0\2\346\4\0\1\346\12\0"+
    "\2\346\2\0\1\356\10\0\5\346\1\0\6\346\1\0"+
    "\10\346\1\0\2\346\4\0\1\346\36\0\1\357\37\0"+
    "\2\346\2\0\1\346\10\0\5\346\1\0\1\346\1\360"+
    "\4\346\1\0\10\346\1\0\2\346\4\0\1\346\12\0"+
    "\2\346\2\0\1\346\10\0\5\346\1\0\3\346\1\361"+
    "\2\346\1\0\10\346\1\0\2\346\4\0\1\346\12\0"+
    "\2\346\2\0\1\346\10\0\5\346\1\362\1\363\5\346"+
    "\1\0\10\346\1\0\2\346\4\0\1\346\41\0\1\364"+
    "\34\0\2\346\2\0\1\346\10\0\5\346\1\0\4\346"+
    "\1\365\1\346\1\0\10\346\1\0\2\346\4\0\1\346"+
    "\36\0\1\366\66\0\1\367\34\0\2\346\2\0\1\346"+
    "\10\0\5\346\1\0\1\346\1\370\4\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\12\0\2\346\2\0\1\346"+
    "\10\0\5\346\1\0\4\346\1\371\1\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\12\0\2\346\2\0\1\346"+
    "\10\0\5\346\1\0\4\346\1\372\1\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\16\0\1\373\57\0\2\346"+
    "\2\0\1\374\10\0\5\346\1\0\6\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\16\0\1\375\57\0\2\346"+
    "\2\0\1\376\10\0\5\346\1\0\6\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\16\0\1\377\57\0\2\346"+
    "\2\0\1\u0100\10\0\5\346\1\0\6\346\1\0\10\346"+
    "\1\0\2\346\4\0\1\346\12\0\2\346\2\0\1\346"+
    "\10\0\1\u0101\4\346\1\0\6\346\1\0\10\346\1\0"+
    "\2\346\4\0\1\346\12\0\2\346\2\0\1\346\10\0"+
    "\5\346\1\0\4\346\1\u0102\1\346\1\0\10\346\1\0"+
    "\2\346\4\0\1\346\40\0\1\u0103\35\0\2\346\2\0"+
    "\1\346\10\0\5\346\1\0\3\346\1\u0104\2\346\1\0"+
    "\10\346\1\0\2\346\4\0\1\346\16\0\1\u0105\57\0"+
    "\2\346\2\0\1\u0106\10\0\5\346\1\0\6\346\1\0"+
    "\10\346\1\0\2\346\4\0\1\346\12\0\2\346\2\0"+
    "\1\346\10\0\1\346\1\u0107\3\346\1\0\6\346\1\0"+
    "\10\346\1\0\2\346\4\0\1\346\12\0\2\346\2\0"+
    "\1\u0108\10\0\5\346\1\0\6\346\1\0\10\346\1\0"+
    "\2\346\4\0\1\346\12\0\2\u0109\2\0\1\u0109\10\0"+
    "\5\u0109\1\0\6\u0109\1\0\10\u0109\1\0\2\u0109\4\0"+
    "\1\u0109\13\0\1\347\62\0\2\u0109\2\0\1\u0109\10\0"+
    "\5\u0109\1\0\6\u0109\1\0\2\u0109\1\u010a\5\u0109\1\0"+
    "\2\u0109\4\0\1\u0109\12\0\2\u0109\2\0\1\u0109\10\0"+
    "\5\u0109\1\0\4\u0109\1\u010b\1\u0109\1\0\10\u0109\1\0"+
    "\2\u0109\4\0\1\u0109\12\0\2\u0109\2\0\1\u0109\10\0"+
    "\1\u010c\4\u0109\1\0\6\u0109\1\0\10\u0109\1\0\2\u0109"+
    "\4\0\1\u0109\16\0\1\u010d\57\0\2\u0109\2\0\1\u010e"+
    "\10\0\5\u0109\1\0\6\u0109\1\0\10\u0109\1\0\2\u0109"+
    "\4\0\1\u0109\36\0\1\u010f\37\0\2\u0109\2\0\1\u0109"+
    "\10\0\5\u0109\1\0\1\u0109\1\u0110\4\u0109\1\0\10\u0109"+
    "\1\0\2\u0109\4\0\1\u0109\33\0\1\u0111\64\0\2\u0112"+
    "\40\0\2\u0109\2\0\1\u0109\10\0\4\u0109\1\u0113\1\0"+
    "\6\u0109\1\0\10\u0109\1\0\2\u0109\4\0\1\u0109\12\0"+
    "\2\u0109\2\0\1\u0109\10\0\5\u0109\1\u0112\1\u0114\5\u0109"+
    "\1\0\10\u0109\1\0\2\u0109\4\0\1\u0109\12\0\2\u0109"+
    "\2\0\1\u0109\10\0\5\u0109\1\0\2\u0109\1\u0115\3\u0109"+
    "\1\0\10\u0109\1\0\2\u0109\4\0\1\u0109\12\0\2\u0109"+
    "\2\0\1\u0109\10\0\1\u0109\1\u0116\3\u0109\1\0\6\u0109"+
    "\1\0\10\u0109\1\0\2\u0109\4\0\1\u0109\12\0\2\u0109"+
    "\2\0\1\u0109\10\0\5\u0109\1\u0117\1\u0118\5\u0109\1\0"+
    "\10\u0109\1\0\2\u0109\4\0\1\u0109\46\0\1\u0119\27\0"+
    "\2\u0109\2\0\1\u0109\10\0\5\u0109\1\0\6\u0109\1\0"+
    "\2\u0109\1\u011a\5\u0109\1\0\2\u0109\4\0\1\u0109\12\0"+
    "\2\u0109\2\0\1\u0109\10\0\1\u011b\4\u0109\1\0\6\u0109"+
    "\1\0\10\u0109\1\0\2\u0109\4\0\1\u0109\12\0\2\u0109"+
    "\2\0\1\u0109\10\0\5\u0109\1\0\6\u0109\1\0\2\u0109"+
    "\1\u011c\5\u0109\1\0\2\u0109\4\0\1\u0109\12\0\2\u011d"+
    "\2\0\1\u011d\10\0\5\u011d\1\0\6\u011d\1\0\10\u011d"+
    "\1\0\2\u011d\4\0\1\u011d\12\0\2\u011d\2\0\1\u011d"+
    "\10\0\5\u011d\1\0\1\u011d\1\u011e\4\u011d\1\0\10\u011d"+
    "\1\0\2\u011d\4\0\1\u011d\41\0\1\u011f\34\0\2\u011d"+
    "\2\0\1\u011d\10\0\5\u011d\1\0\4\u011d\1\u0120\1\u011d"+
    "\1\0\10\u011d\1\0\2\u011d\4\0\1\u011d\36\0\1\u0121"+
    "\37\0\2\u011d\2\0\1\u011d\10\0\5\u011d\1\0\1\u011d"+
    "\1\u0122\4\u011d\1\0\10\u011d\1\0\2\u011d\4\0\1\u011d"+
    "\12\0\2\u011d\2\0\1\u011d\10\0\5\u011d\1\0\6\u011d"+
    "\1\0\2\u011d\1\u0123\5\u011d\1\0\2\u011d\4\0\1\u011d"+
    "\37\0\1\u0124\36\0\2\u011d\2\0\1\u011d\10\0\5\u011d"+
    "\1\0\2\u011d\1\u0125\3\u011d\1\0\10\u011d\1\0\2\u011d"+
    "\4\0\1\u011d\12\0\2\u011d\2\0\1\u011d\10\0\5\u011d"+
    "\1\0\6\u011d\1\0\10\u011d\1\0\1\u011d\1\u0126\4\0"+
    "\1\u011d\12\0\2\u011d\2\0\1\u011d\10\0\5\u011d\1\0"+
    "\6\u011d\1\0\6\u011d\1\u0127\1\u011d\1\0\2\u011d\4\0"+
    "\1\u011d\12\0\2\u0128\2\0\1\u0128\10\0\5\u0128\1\0"+
    "\6\u0128\1\0\10\u0128\1\0\2\u0128\4\0\1\u0128\41\0"+
    "\1\u0129\34\0\2\u0128\2\0\1\u0128\10\0\5\u0128\1\0"+
    "\4\u0128\1\u012a\1\u0128\1\0\10\u0128\1\0\2\u0128\4\0"+
    "\1\u0128\36\0\1\u012b\37\0\2\u0128\2\0\1\u0128\10\0"+
    "\5\u0128\1\0\1\u0128\1\u012c\4\u0128\1\0\10\u0128\1\0"+
    "\2\u0128\4\0\1\u0128\12\0\2\u0128\2\0\1\u0128\10\0"+
    "\1\u0128\1\u012d\3\u0128\1\0\6\u0128\1\0\10\u0128\1\0"+
    "\2\u0128\4\0\1\u0128\12\0\2\u012e\2\0\1\u012e\10\0"+
    "\5\u012e\1\0\6\u012e\1\0\10\u012e\1\0\2\u012e\4\0"+
    "\1\u012e\12\0\2\u012e\2\0\1\u012f\10\0\5\u012e\1\0"+
    "\6\u012e\1\0\10\u012e\1\0\2\u012e\4\0\1\u012e\12\0"+
    "\2\u0130\2\0\1\u0130\10\0\5\u0130\1\0\6\u0130\1\0"+
    "\10\u0130\1\0\2\u0130\4\0\1\u0130\12\0\2\u0131\2\0"+
    "\1\u0131\10\0\5\u0131\1\0\6\u0131\1\0\10\u0131\1\0"+
    "\2\u0131\4\0\1\u0131\12\0\2\u0132\2\0\1\u0132\10\0"+
    "\5\u0132\1\0\6\u0132\1\0\10\u0132\1\0\2\u0132\4\0"+
    "\1\u0132\12\0\2\u0133\2\0\1\u0133\10\0\5\u0133\1\0"+
    "\6\u0133\1\0\10\u0133\1\0\2\u0133\4\0\1\u0133\12\0"+
    "\2\u0134\2\0\1\u0134\10\0\5\u0134\1\0\6\u0134\1\0"+
    "\10\u0134\1\0\2\u0134\4\0\1\u0134\12\0\2\u0135\2\0"+
    "\1\u0135\10\0\5\u0135\1\0\6\u0135\1\0\10\u0135\1\0"+
    "\2\u0135\4\0\1\u0135\12\0\2\u0136\2\0\1\u0136\10\0"+
    "\5\u0136\1\0\6\u0136\1\0\10\u0136\1\0\2\u0136\4\0"+
    "\1\u0136\12\0\2\u0137\2\0\1\u0137\10\0\5\u0137\1\0"+
    "\6\u0137\1\0\10\u0137\1\0\2\u0137\4\0\1\u0137\12\0"+
    "\2\u0138\2\0\1\u0138\10\0\5\u0138\1\0\6\u0138\1\0"+
    "\10\u0138\1\0\2\u0138\4\0\1\u0138\12\0\2\u0139\2\0"+
    "\1\u0139\10\0\5\u0139\1\0\6\u0139\1\0\10\u0139\1\0"+
    "\2\u0139\4\0\1\u0139\12\0\2\u013a\2\0\1\u013a\10\0"+
    "\5\u013a\1\0\6\u013a\1\0\10\u013a\1\0\2\u013a\4\0"+
    "\1\u013a\12\0\2\u013b\2\0\1\u013b\10\0\5\u013b\1\0"+
    "\6\u013b\1\0\10\u013b\1\0\2\u013b\4\0\1\u013b\12\0"+
    "\2\u013c\2\0\1\u013c\10\0\5\u013c\1\0\6\u013c\1\0"+
    "\10\u013c\1\0\2\u013c\4\0\1\u013c\12\0\2\u013d\2\0"+
    "\1\u013d\10\0\5\u013d\1\0\6\u013d\1\0\10\u013d\1\0"+
    "\2\u013d\4\0\1\u013d\12\0\2\u013e\2\0\1\u013e\10\0"+
    "\5\u013e\1\0\6\u013e\1\0\10\u013e\1\0\2\u013e\4\0"+
    "\1\u013e\12\0\2\u013f\2\0\1\u013f\10\0\5\u013f\1\0"+
    "\6\u013f\1\0\10\u013f\1\0\2\u013f\4\0\1\u013f\12\0"+
    "\2\u0140\2\0\1\u0140\10\0\5\u0140\1\0\6\u0140\1\0"+
    "\10\u0140\1\0\2\u0140\4\0\1\u0140\12\0\2\u0141\2\0"+
    "\1\u0141\10\0\5\u0141\1\0\6\u0141\1\0\10\u0141\1\0"+
    "\2\u0141\4\0\1\u0141\12\0\2\u0142\2\0\1\u0142\10\0"+
    "\5\u0142\1\0\6\u0142\1\0\10\u0142\1\0\2\u0142\4\0"+
    "\1\u0142\12\0\2\u0143\2\0\1\u0143\10\0\5\u0143\1\0"+
    "\6\u0143\1\0\10\u0143\1\0\2\u0143\4\0\1\u0143\12\0"+
    "\2\u0144\2\0\1\u0144\10\0\5\u0144\1\0\6\u0144\1\0"+
    "\10\u0144\1\0\2\u0144\4\0\1\u0144\12\0\2\u0145\2\0"+
    "\1\u0145\10\0\5\u0145\1\0\6\u0145\1\0\10\u0145\1\0"+
    "\2\u0145\4\0\1\u0145\12\0\2\u0146\2\0\1\u0146\10\0"+
    "\5\u0146\1\0\6\u0146\1\0\10\u0146\1\0\2\u0146\4\0"+
    "\1\u0146\12\0\2\u0147\2\0\1\u0147\10\0\5\u0147\1\0"+
    "\6\u0147\1\0\10\u0147\1\0\2\u0147\4\0\1\u0147\12\0"+
    "\2\u0148\2\0\1\u0148\10\0\5\u0148\1\0\6\u0148\1\0"+
    "\10\u0148\1\0\2\u0148\4\0\1\u0148\12\0\2\u0149\2\0"+
    "\1\u0149\10\0\5\u0149\1\0\6\u0149\1\0\10\u0149\1\0"+
    "\2\u0149\4\0\1\u0149\12\0\2\u014a\2\0\1\u014a\10\0"+
    "\5\u014a\1\0\6\u014a\1\0\10\u014a\1\0\2\u014a\4\0"+
    "\1\u014a\12\0\2\u014b\2\0\1\u014b\10\0\5\u014b\1\0"+
    "\6\u014b\1\0\10\u014b\1\0\2\u014b\4\0\1\u014b\12\0"+
    "\2\u014c\2\0\1\u014c\10\0\5\u014c\1\0\6\u014c\1\0"+
    "\10\u014c\1\0\2\u014c\4\0\1\u014c\12\0\2\u014d\2\0"+
    "\1\u014d\10\0\5\u014d\1\0\6\u014d\1\0\10\u014d\1\0"+
    "\2\u014d\4\0\1\u014d\12\0\2\u014e\2\0\1\u014e\10\0"+
    "\5\u014e\1\0\6\u014e\1\0\10\u014e\1\0\2\u014e\4\0"+
    "\1\u014e\12\0\2\u014f\2\0\1\u014f\10\0\5\u014f\1\0"+
    "\6\u014f\1\0\10\u014f\1\0\2\u014f\4\0\1\u014f\12\0"+
    "\2\u0150\2\0\1\u0150\10\0\5\u0150\1\0\6\u0150\1\0"+
    "\10\u0150\1\0\2\u0150\4\0\1\u0150\12\0\2\u0151\2\0"+
    "\1\u0151\10\0\5\u0151\1\0\6\u0151\1\0\10\u0151\1\0"+
    "\2\u0151\4\0\1\u0151\12\0\2\u0152\2\0\1\u0152\10\0"+
    "\5\u0152\1\0\6\u0152\1\0\10\u0152\1\0\2\u0152\4\0"+
    "\1\u0152\12\0\2\u0153\2\0\1\u0153\10\0\5\u0153\1\0"+
    "\6\u0153\1\0\10\u0153\1\0\2\u0153\4\0\1\u0153\12\0"+
    "\2\u0154\2\0\1\u0154\10\0\5\u0154\1\0\6\u0154\1\0"+
    "\10\u0154\1\0\2\u0154\4\0\1\u0154\12\0\2\u0155\2\0"+
    "\1\u0155\10\0\5\u0155\1\0\6\u0155\1\0\10\u0155\1\0"+
    "\2\u0155\4\0\1\u0155\12\0\2\u0156\2\0\1\u0156\10\0"+
    "\5\u0156\1\0\6\u0156\1\0\10\u0156\1\0\2\u0156\4\0"+
    "\1\u0156\12\0\2\u0157\2\0\1\u0157\10\0\5\u0157\1\0"+
    "\6\u0157\1\0\10\u0157\1\0\2\u0157\4\0\1\u0157\12\0"+
    "\2\u0158\2\0\1\u0158\10\0\5\u0158\1\0\6\u0158\1\0"+
    "\10\u0158\1\0\2\u0158\4\0\1\u0158\12\0\2\u0159\2\0"+
    "\1\u0159\10\0\5\u0159\1\0\6\u0159\1\0\10\u0159\1\0"+
    "\2\u0159\4\0\1\u0159\12\0\2\u015a\2\0\1\u015a\10\0"+
    "\5\u015a\1\0\6\u015a\1\0\10\u015a\1\0\2\u015a\4\0"+
    "\1\u015a\12\0\2\u015b\2\0\1\u015b\10\0\5\u015b\1\0"+
    "\6\u015b\1\0\10\u015b\1\0\2\u015b\4\0\1\u015b\12\0"+
    "\2\u015c\2\0\1\u015c\10\0\5\u015c\1\0\6\u015c\1\0"+
    "\10\u015c\1\0\2\u015c\4\0\1\u015c\12\0\2\u015d\2\0"+
    "\1\u015d\10\0\5\u015d\1\0\6\u015d\1\0\10\u015d\1\0"+
    "\2\u015d\4\0\1\u015d\12\0\2\u015e\2\0\1\u015e\10\0"+
    "\5\u015e\1\0\6\u015e\1\0\10\u015e\1\0\2\u015e\4\0"+
    "\1\u015e\12\0\2\u015f\2\0\1\u015f\10\0\5\u015f\1\0"+
    "\6\u015f\1\0\10\u015f\1\0\2\u015f\4\0\1\u015f\12\0"+
    "\2\u0160\2\0\1\u0160\10\0\5\u0160\1\0\6\u0160\1\0"+
    "\10\u0160\1\0\2\u0160\4\0\1\u0160\12\0\2\u0161\2\0"+
    "\1\u0161\10\0\5\u0161\1\0\6\u0161\1\0\10\u0161\1\0"+
    "\2\u0161\4\0\1\u0161\12\0\2\u0162\2\0\1\u0162\10\0"+
    "\5\u0162\1\0\6\u0162\1\0\10\u0162\1\0\2\u0162\4\0"+
    "\1\u0162\12\0\2\u0163\2\0\1\u0163\10\0\5\u0163\1\0"+
    "\6\u0163\1\0\10\u0163\1\0\2\u0163\4\0\1\u0163\12\0"+
    "\2\u0164\2\0\1\u0164\10\0\5\u0164\1\0\6\u0164\1\0"+
    "\10\u0164\1\0\2\u0164\4\0\1\u0164\12\0\2\u0165\2\0"+
    "\1\u0165\10\0\5\u0165\1\0\6\u0165\1\0\10\u0165\1\0"+
    "\2\u0165\4\0\1\u0165\12\0\2\u0166\2\0\1\u0166\10\0"+
    "\5\u0166\1\0\6\u0166\1\0\10\u0166\1\0\2\u0166\4\0"+
    "\1\u0166\12\0\2\u0167\2\0\1\u0167\10\0\5\u0167\1\0"+
    "\6\u0167\1\0\10\u0167\1\0\2\u0167\4\0\1\u0167\12\0"+
    "\2\u0168\2\0\1\u0168\10\0\5\u0168\1\0\6\u0168\1\0"+
    "\10\u0168\1\0\2\u0168\4\0\1\u0168\12\0\2\u0169\2\0"+
    "\1\u0169\10\0\5\u0169\1\0\6\u0169\1\0\10\u0169\1\0"+
    "\2\u0169\4\0\1\u0169\12\0\2\u016a\2\0\1\u016a\10\0"+
    "\5\u016a\1\0\6\u016a\1\0\10\u016a\1\0\2\u016a\4\0"+
    "\1\u016a\12\0\2\u016b\2\0\1\u016b\10\0\5\u016b\1\0"+
    "\6\u016b\1\0\10\u016b\1\0\2\u016b\4\0\1\u016b\12\0"+
    "\2\u016c\2\0\1\u016c\10\0\5\u016c\1\0\6\u016c\1\0"+
    "\10\u016c\1\0\2\u016c\4\0\1\u016c\12\0\2\u016d\2\0"+
    "\1\u016d\10\0\5\u016d\1\0\6\u016d\1\0\10\u016d\1\0"+
    "\2\u016d\4\0\1\u016d\12\0\2\u016e\2\0\1\u016e\10\0"+
    "\5\u016e\1\0\6\u016e\1\0\10\u016e\1\0\2\u016e\4\0"+
    "\1\u016e\12\0\2\u016f\2\0\1\u016f\10\0\5\u016f\1\0"+
    "\6\u016f\1\0\10\u016f\1\0\2\u016f\4\0\1\u016f\12\0"+
    "\2\u0170\2\0\1\u0170\10\0\5\u0170\1\0\6\u0170\1\0"+
    "\10\u0170\1\0\2\u0170\4\0\1\u0170\12\0\2\u0171\2\0"+
    "\1\u0171\10\0\5\u0171\1\0\6\u0171\1\0\10\u0171\1\0"+
    "\2\u0171\4\0\1\u0171\12\0\2\u0172\2\0\1\u0172\10\0"+
    "\5\u0172\1\0\6\u0172\1\0\10\u0172\1\0\2\u0172\4\0"+
    "\1\u0172\12\0\2\u0173\2\0\1\u0173\10\0\5\u0173\1\0"+
    "\6\u0173\1\0\10\u0173\1\0\2\u0173\4\0\1\u0173\12\0"+
    "\2\u0174\2\0\1\u0174\10\0\5\u0174\1\0\6\u0174\1\0"+
    "\10\u0174\1\0\2\u0174\4\0\1\u0174\12\0\2\u0175\2\0"+
    "\1\u0175\10\0\5\u0175\1\0\6\u0175\1\0\10\u0175\1\0"+
    "\2\u0175\4\0\1\u0175\12\0\2\u0176\2\0\1\u0176\10\0"+
    "\5\u0176\1\0\6\u0176\1\0\10\u0176\1\0\2\u0176\4\0"+
    "\1\u0176\12\0\2\u0177\2\0\1\u0177\10\0\5\u0177\1\0"+
    "\6\u0177\1\0\10\u0177\1\0\2\u0177\4\0\1\u0177\12\0"+
    "\2\u0178\2\0\1\u0178\10\0\5\u0178\1\0\6\u0178\1\0"+
    "\10\u0178\1\0\2\u0178\4\0\1\u0178\12\0\2\u0179\2\0"+
    "\1\u0179\10\0\5\u0179\1\0\6\u0179\1\0\10\u0179\1\0"+
    "\2\u0179\4\0\1\u0179\12\0\2\u017a\2\0\1\u017a\10\0"+
    "\5\u017a\1\0\6\u017a\1\0\10\u017a\1\0\2\u017a\4\0"+
    "\1\u017a\12\0\2\u017b\2\0\1\u017b\10\0\5\u017b\1\0"+
    "\6\u017b\1\0\10\u017b\1\0\2\u017b\4\0\1\u017b\12\0"+
    "\2\u017c\2\0\1\u017c\10\0\5\u017c\1\0\6\u017c\1\0"+
    "\10\u017c\1\0\2\u017c\4\0\1\u017c\12\0\2\u017d\2\0"+
    "\1\u017d\10\0\5\u017d\1\0\6\u017d\1\0\10\u017d\1\0"+
    "\2\u017d\4\0\1\u017d\12\0\2\u017e\2\0\1\u017e\10\0"+
    "\5\u017e\1\0\6\u017e\1\0\10\u017e\1\0\2\u017e\4\0"+
    "\1\u017e\12\0\2\u017f\2\0\1\u017f\10\0\5\u017f\1\0"+
    "\6\u017f\1\0\10\u017f\1\0\2\u017f\4\0\1\u017f\12\0"+
    "\2\u0180\2\0\1\u0180\10\0\5\u0180\1\0\6\u0180\1\0"+
    "\10\u0180\1\0\2\u0180\4\0\1\u0180\12\0\2\u0181\2\0"+
    "\1\u0181\10\0\5\u0181\1\0\6\u0181\1\0\10\u0181\1\0"+
    "\2\u0181\4\0\1\u0181\12\0\2\u0182\2\0\1\u0182\10\0"+
    "\5\u0182\1\0\6\u0182\1\0\10\u0182\1\0\2\u0182\4\0"+
    "\1\u0182\12\0\2\u0183\2\0\1\u0183\10\0\5\u0183\1\0"+
    "\6\u0183\1\0\10\u0183\1\0\2\u0183\4\0\1\u0183\12\0"+
    "\2\u0184\2\0\1\u0184\10\0\5\u0184\1\0\6\u0184\1\0"+
    "\10\u0184\1\0\2\u0184\4\0\1\u0184\12\0\2\u0185\2\0"+
    "\1\u0185\10\0\5\u0185\1\0\6\u0185\1\0\10\u0185\1\0"+
    "\2\u0185\4\0\1\u0185\12\0\2\u0186\2\0\1\u0186\10\0"+
    "\5\u0186\1\0\6\u0186\1\0\10\u0186\1\0\2\u0186\4\0"+
    "\1\u0186\12\0\2\u0187\2\0\1\u0187\10\0\5\u0187\1\0"+
    "\6\u0187\1\0\10\u0187\1\0\2\u0187\4\0\1\u0187\12\0"+
    "\2\u0188\2\0\1\u0188\10\0\5\u0188\1\0\6\u0188\1\0"+
    "\10\u0188\1\0\2\u0188\4\0\1\u0188\12\0\2\u0189\2\0"+
    "\1\u0189\10\0\5\u0189\1\0\6\u0189\1\0\10\u0189\1\0"+
    "\2\u0189\4\0\1\u0189\12\0\2\u018a\2\0\1\u018a\10\0"+
    "\5\u018a\1\0\6\u018a\1\0\10\u018a\1\0\2\u018a\4\0"+
    "\1\u018a\12\0\2\u018b\2\0\1\u018b\10\0\5\u018b\1\0"+
    "\6\u018b\1\0\10\u018b\1\0\2\u018b\4\0\1\u018b\12\0"+
    "\2\u018c\2\0\1\u018c\10\0\5\u018c\1\0\6\u018c\1\0"+
    "\10\u018c\1\0\2\u018c\4\0\1\u018c\12\0\2\u018d\2\0"+
    "\1\u018d\10\0\5\u018d\1\0\6\u018d\1\0\10\u018d\1\0"+
    "\2\u018d\4\0\1\u018d\12\0\2\u018e\2\0\1\u018e\10\0"+
    "\5\u018e\1\0\6\u018e\1\0\10\u018e\1\0\2\u018e\4\0"+
    "\1\u018e\12\0\2\u018f\2\0\1\u018f\10\0\5\u018f\1\0"+
    "\6\u018f\1\0\10\u018f\1\0\2\u018f\4\0\1\u018f\12\0"+
    "\2\u0190\2\0\1\u0190\10\0\5\u0190\1\0\6\u0190\1\0"+
    "\10\u0190\1\0\2\u0190\4\0\1\u0190\12\0\2\u0191\2\0"+
    "\1\u0191\10\0\5\u0191\1\0\6\u0191\1\0\10\u0191\1\0"+
    "\2\u0191\4\0\1\u0191\12\0\2\u0192\2\0\1\u0192\10\0"+
    "\5\u0192\1\0\6\u0192\1\0\10\u0192\1\0\2\u0192\4\0"+
    "\1\u0192\12\0\2\u0193\2\0\1\u0193\10\0\5\u0193\1\0"+
    "\6\u0193\1\0\10\u0193\1\0\2\u0193\4\0\1\u0193\12\0"+
    "\2\u0194\2\0\1\u0194\10\0\5\u0194\1\0\6\u0194\1\0"+
    "\10\u0194\1\0\2\u0194\4\0\1\u0194\12\0\2\u0195\2\0"+
    "\1\u0195\10\0\5\u0195\1\0\6\u0195\1\0\10\u0195\1\0"+
    "\2\u0195\4\0\1\u0195\12\0\2\u0196\2\0\1\u0196\10\0"+
    "\5\u0196\1\0\6\u0196\1\0\10\u0196\1\0\2\u0196\4\0"+
    "\1\u0196\12\0\2\u0197\2\0\1\u0197\10\0\5\u0197\1\0"+
    "\6\u0197\1\0\10\u0197\1\0\2\u0197\4\0\1\u0197\12\0"+
    "\2\u0198\2\0\1\u0198\10\0\5\u0198\1\0\6\u0198\1\0"+
    "\10\u0198\1\0\2\u0198\4\0\1\u0198\12\0\2\u0199\2\0"+
    "\1\u0199\10\0\5\u0199\1\0\6\u0199\1\0\10\u0199\1\0"+
    "\2\u0199\4\0\1\u0199\12\0\2\u019a\2\0\1\u019a\10\0"+
    "\5\u019a\1\0\6\u019a\1\0\10\u019a\1\0\2\u019a\4\0"+
    "\1\u019a\12\0\2\u019b\2\0\1\u019b\10\0\5\u019b\1\0"+
    "\6\u019b\1\0\10\u019b\1\0\2\u019b\4\0\1\u019b\12\0"+
    "\2\u019c\2\0\1\u019c\10\0\5\u019c\1\0\6\u019c\1\0"+
    "\10\u019c\1\0\2\u019c\4\0\1\u019c\12\0\2\u019d\2\0"+
    "\1\u019d\10\0\5\u019d\1\0\6\u019d\1\0\10\u019d\1\0"+
    "\2\u019d\4\0\1\u019d\12\0\2\u019e\2\0\1\u019e\10\0"+
    "\5\u019e\1\0\6\u019e\1\0\10\u019e\1\0\2\u019e\4\0"+
    "\1\u019e\12\0\2\u019f\2\0\1\u019f\10\0\5\u019f\1\0"+
    "\6\u019f\1\0\10\u019f\1\0\2\u019f\4\0\1\u019f\12\0"+
    "\2\u01a0\2\0\1\u01a0\10\0\5\u01a0\1\0\6\u01a0\1\0"+
    "\10\u01a0\1\0\2\u01a0\4\0\1\u01a0\12\0\2\u01a1\2\0"+
    "\1\u01a1\10\0\5\u01a1\1\0\6\u01a1\1\0\10\u01a1\1\0"+
    "\2\u01a1\4\0\1\u01a1\12\0\2\u01a2\2\0\1\u01a2\10\0"+
    "\5\u01a2\1\0\6\u01a2\1\0\10\u01a2\1\0\2\u01a2\4\0"+
    "\1\u01a2\12\0\2\u01a3\2\0\1\u01a3\10\0\5\u01a3\1\0"+
    "\6\u01a3\1\0\10\u01a3\1\0\2\u01a3\4\0\1\u01a3\12\0"+
    "\2\u01a4\2\0\1\u01a4\10\0\5\u01a4\1\0\6\u01a4\1\0"+
    "\10\u01a4\1\0\2\u01a4\4\0\1\u01a4\12\0\2\u01a5\2\0"+
    "\1\u01a5\10\0\5\u01a5\1\0\6\u01a5\1\0\10\u01a5\1\0"+
    "\2\u01a5\4\0\1\u01a5\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\1\11\6\1\1\11"+
    "\26\1\1\11\4\1\4\11\1\1\1\0\2\11\2\1"+
    "\1\0\1\11\2\1\1\11\1\0\1\11\1\0\10\1"+
    "\1\11\2\1\1\0\15\1\3\0\3\1\1\0\4\1"+
    "\1\0\3\1\1\0\7\1\3\11\1\1\2\11\2\1"+
    "\1\11\3\1\1\0\1\1\1\0\1\11\2\0\11\1"+
    "\1\0\1\11\2\1\1\11\7\1\1\0\3\1\1\11"+
    "\2\0\3\1\1\11\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\7\1\2\11\2\1\1\0\1\11"+
    "\1\1\1\0\5\1\1\0\4\1\1\0\6\1\1\11"+
    "\1\1\1\0\2\1\2\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\3\1\1\0"+
    "\1\1\1\0\5\1\1\0\3\1\1\11\2\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\2\0\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\1\1\1\0"+
    "\7\1\1\11\1\1\1\0\1\1\1\11\1\0\4\1"+
    "\1\0\1\1\1\11\5\1\1\11\1\1\1\0\2\1"+
    "\1\0\4\1\1\11\1\1\1\11\171\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[421];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private final TokenList tokenList;

    public TokenList getTokenList()
    {
        return this.tokenList;
    }

    private Token newToken(int type)
    {
        Token token = new Token(type, yytext().toLowerCase(), yyline, yycolumn);
        tokenList.addToken(token);
        return token;
    }

    private Token newToken(int type, Object value)
    {
        Token token = new Token(type, value, yyline, yycolumn);
        tokenList.addToken(token);
        return token;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      tokenList = new TokenList();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return newToken(ParserSym.error);
          }
        case 86: break;
        case 2: 
          { /*Ignore*/
          }
        case 87: break;
        case 3: 
          { return newToken(ParserSym.IDENTIFIER);
          }
        case 88: break;
        case 4: 
          { return newToken(ParserSym.NUMBER, new Integer(yytext()));
          }
        case 89: break;
        case 5: 
          { return newToken(ParserSym.MINUS);
          }
        case 90: break;
        case 6: 
          { return newToken(ParserSym.DOT);
          }
        case 91: break;
        case 7: 
          { return newToken(ParserSym.DIV);
          }
        case 92: break;
        case 8: 
          { return newToken(ParserSym.LPAREN);
          }
        case 93: break;
        case 9: 
          { return newToken(ParserSym.TIMES);
          }
        case 94: break;
        case 10: 
          { return newToken(ParserSym.RPAREN);
          }
        case 95: break;
        case 11: 
          { return newToken(ParserSym.PLUS);
          }
        case 96: break;
        case 12: 
          { return newToken(ParserSym.EQUALS);
          }
        case 97: break;
        case 13: 
          { return newToken(ParserSym.LESS_THAN);
          }
        case 98: break;
        case 14: 
          { return newToken(ParserSym.GREATER_THAN);
          }
        case 99: break;
        case 15: 
          { return newToken(ParserSym.COLON);
          }
        case 100: break;
        case 16: 
          { return newToken(ParserSym.LBRACKET);
          }
        case 101: break;
        case 17: 
          { return newToken(ParserSym.RBRACKET);
          }
        case 102: break;
        case 18: 
          { return newToken(ParserSym.SEMI);
          }
        case 103: break;
        case 19: 
          { return newToken(ParserSym.COMMA);
          }
        case 104: break;
        case 20: 
          { return newToken(ParserSym.MINUS_MINUS);
          }
        case 105: break;
        case 21: 
          { return newToken(ParserSym.MINUS_EQUALS);
          }
        case 106: break;
        case 22: 
          { String s = yytext().replace("\'", "");
    return newToken(ParserSym.XTRING, s);
          }
        case 107: break;
        case 23: 
          { String text = yytext();
    Character c = null;

    // El caracter es de tipo #65, #97, etc..
    if (text.startsWith("#"))
    {
        int code = Integer.valueOf(text.substring(1));
        c = Character.toChars(code)[0];
    }
    // El caracter es de tipo 'A', 'b', etc...
    else
    {
        c = new Character(text.charAt(1));
    }

    return newToken(ParserSym.CHARACTER, c);
          }
        case 108: break;
        case 24: 
          { return newToken(ParserSym.DIV_EQUALS);
          }
        case 109: break;
        case 25: 
          { return newToken(ParserSym.TIMES_EQUALS);
          }
        case 110: break;
        case 26: 
          { return newToken(ParserSym.IN);
          }
        case 111: break;
        case 27: 
          { return newToken(ParserSym.IF);
          }
        case 112: break;
        case 28: 
          { return newToken(ParserSym.OR);
          }
        case 113: break;
        case 29: 
          { return newToken(ParserSym.OF);
          }
        case 114: break;
        case 30: 
          { return newToken(ParserSym.TO);
          }
        case 115: break;
        case 31: 
          { return newToken(ParserSym.DO);
          }
        case 116: break;
        case 32: 
          { return newToken(ParserSym.PLUS_PLUS);
          }
        case 117: break;
        case 33: 
          { return newToken(ParserSym.PLUS_EQUALS);
          }
        case 118: break;
        case 34: 
          { return newToken(ParserSym.LESS_EQUALS_THAN);
          }
        case 119: break;
        case 35: 
          { return newToken(ParserSym.SHIFT_LEFT);
          }
        case 120: break;
        case 36: 
          { return newToken(ParserSym.NOT_EQUALS);
          }
        case 121: break;
        case 37: 
          { return newToken(ParserSym.GREATER_EQUALS_THAN);
          }
        case 122: break;
        case 38: 
          { return newToken(ParserSym.SHIFT_RIGHT);
          }
        case 123: break;
        case 39: 
          { return newToken(ParserSym.ASSIGNMENT);
          }
        case 124: break;
        case 40: 
          { Double d = Double.valueOf(yytext());
    return newToken(ParserSym.DOUBLE, d);
          }
        case 125: break;
        case 41: 
          { return newToken(ParserSym.END);
          }
        case 126: break;
        case 42: 
          { return newToken(ParserSym.AND);
          }
        case 127: break;
        case 43: 
          { return newToken(ParserSym.INT);
          }
        case 128: break;
        case 44: 
          { return newToken(ParserSym.NIL, null);
          }
        case 129: break;
        case 45: 
          { return newToken(ParserSym.NOT);
          }
        case 130: break;
        case 46: 
          { return newToken(ParserSym.SET);
          }
        case 131: break;
        case 47: 
          { return newToken(ParserSym.VAR);
          }
        case 132: break;
        case 48: 
          { return newToken(ParserSym.FOR);
          }
        case 133: break;
        case 49: 
          { return newToken(ParserSym.MOD);
          }
        case 134: break;
        case 50: 
          { return newToken(ParserSym.SHIFT_LEFT_EQUALS);
          }
        case 135: break;
        case 51: 
          { return newToken(ParserSym.SHIFT_RIGHT_EQUALS);
          }
        case 136: break;
        case 52: 
          { return newToken(ParserSym.XOR);
          }
        case 137: break;
        case 53: 
          { return newToken(ParserSym.ELSE);
          }
        case 138: break;
        case 54: 
          { return newToken(ParserSym.REAL);
          }
        case 139: break;
        case 55: 
          { return newToken(ParserSym.READ);
          }
        case 140: break;
        case 56: 
          { return newToken(ParserSym.BYTE);
          }
        case 141: break;
        case 57: 
          { return newToken(ParserSym.GOTO);
          }
        case 142: break;
        case 58: 
          { return newToken(ParserSym.TRUE, Boolean.TRUE);
          }
        case 143: break;
        case 59: 
          { return newToken(ParserSym.TYPE);
          }
        case 144: break;
        case 60: 
          { return newToken(ParserSym.THEN);
          }
        case 145: break;
        case 61: 
          { return newToken(ParserSym.CASE);
          }
        case 146: break;
        case 62: 
          { return newToken(ParserSym.CHAR);
          }
        case 147: break;
        case 63: 
          { return newToken(ParserSym.WITH);
          }
        case 148: break;
        case 64: 
          { return newToken(ParserSym.FILE);
          }
        case 149: break;
        case 65: 
          { return newToken(ParserSym.ARRAY);
          }
        case 150: break;
        case 66: 
          { return newToken(ParserSym.BEGIN);
          }
        case 151: break;
        case 67: 
          { return newToken(ParserSym.LABEL);
          }
        case 152: break;
        case 68: 
          { return newToken(ParserSym.CONST);
          }
        case 153: break;
        case 69: 
          { return newToken(ParserSym.WRITE);
          }
        case 154: break;
        case 70: 
          { return newToken(ParserSym.WHILE);
          }
        case 155: break;
        case 71: 
          { return newToken(ParserSym.FALSE, Boolean.FALSE);
          }
        case 156: break;
        case 72: 
          { return newToken(ParserSym.UNTIL);
          }
        case 157: break;
        case 73: 
          { return newToken(ParserSym.RECORD);
          }
        case 158: break;
        case 74: 
          { return newToken(ParserSym.REPEAT);
          }
        case 159: break;
        case 75: 
          { return newToken(ParserSym.INLINE);
          }
        case 160: break;
        case 76: 
          { return newToken(ParserSym.STRING);
          }
        case 161: break;
        case 77: 
          { return newToken(ParserSym.DOWNTO);
          }
        case 162: break;
        case 78: 
          { return newToken(ParserSym.PACKED);
          }
        case 163: break;
        case 79: 
          { return newToken(ParserSym.BOOLEAN);
          }
        case 164: break;
        case 80: 
          { return newToken(ParserSym.LONGINT);
          }
        case 165: break;
        case 81: 
          { return newToken(ParserSym.FORWARD);
          }
        case 166: break;
        case 82: 
          { return newToken(ParserSym.PROGRAM);
          }
        case 167: break;
        case 83: 
          { return newToken(ParserSym.SHORTINT);
          }
        case 168: break;
        case 84: 
          { return newToken(ParserSym.FUNCTION);
          }
        case 169: break;
        case 85: 
          { return newToken(ParserSym.PROCEDURE);
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Token(ParserSym.EOF, yytext(), yyline, yycolumn);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
