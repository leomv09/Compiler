/* The following code was generated by JFlex 1.6.0 */

package compiler.scanner;

import java_cup.runtime.Symbol;
import compiler.Token;
import compiler.TokenList;
import compiler.parser.ParserSym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/home/jose/Projects/IC-5701 Compiler/Compiler/src/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\57\1\3\1\1\22\0\1\3\2\0\1\12"+
    "\3\0\1\11\1\14\1\16\1\15\1\46\1\0\1\6\1\7\1\13"+
    "\12\5\1\53\1\56\1\50\1\47\1\51\2\0\1\21\1\24\1\33"+
    "\1\36\1\10\1\41\1\25\1\35\1\26\1\4\1\44\1\31\1\45"+
    "\1\27\1\30\1\43\1\4\1\22\1\34\1\32\1\42\1\37\1\40"+
    "\1\52\1\23\1\4\1\54\1\0\1\55\3\0\32\4\1\17\1\0"+
    "\1\20\7\0\1\57\u1fa2\0\1\57\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\3\2\1"+
    "\1\6\1\7\1\10\1\11\1\1\22\3\1\12\1\13"+
    "\1\14\1\15\1\3\1\1\1\16\1\17\1\20\1\3"+
    "\1\0\1\21\1\22\2\3\1\0\1\23\1\24\1\2"+
    "\1\25\1\0\1\26\1\0\7\3\1\27\1\30\2\3"+
    "\1\31\1\32\4\3\1\33\10\3\1\34\14\3\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\3\1\44"+
    "\1\3\1\45\1\46\1\3\1\0\1\24\2\0\1\3"+
    "\1\47\10\3\1\50\1\51\1\52\10\3\1\53\2\3"+
    "\1\6\1\3\1\54\5\3\1\55\4\3\1\56\1\57"+
    "\1\60\1\61\1\3\1\0\1\62\1\0\1\3\1\63"+
    "\1\64\3\3\1\65\1\3\1\66\3\3\1\67\1\70"+
    "\1\71\1\72\1\3\1\73\4\3\1\74\2\3\1\75"+
    "\7\3\1\45\1\0\1\76\2\3\1\77\2\3\1\100"+
    "\1\3\1\101\3\3\1\102\1\103\1\104\2\3\1\105"+
    "\4\3\1\106\1\107\1\3\1\110\1\3\1\111\1\3"+
    "\1\112\2\3\1\113\3\3\1\114\1\115\1\3\1\116"+
    "\1\3\1\117\2\3\1\120\1\121\2\3\1\122\166\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\60\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\60\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\60\0\u0600\0\u0630\0\u0660\0\u0690\0\60"+
    "\0\60\0\60\0\u06c0\0\u06f0\0\60\0\60\0\u0720\0\u0750"+
    "\0\u0780\0\60\0\u0180\0\u07b0\0\60\0\u07e0\0\60\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u06c0\0\u09c0\0\u09f0\0\u06c0\0\u06c0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u06c0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\60"+
    "\0\60\0\60\0\u0ed0\0\60\0\60\0\u0f00\0\u0f30\0\60"+
    "\0\u0f60\0\u0f90\0\u0f60\0\u0fc0\0\u0ff0\0\60\0\u1020\0\u1050"+
    "\0\u1080\0\u0f60\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\u11d0\0\u1200\0\u0f60\0\u0f60\0\u0f60\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u0f60\0\u13b0\0\u13e0"+
    "\0\u0f60\0\u1410\0\u0f60\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u0f60\0\60\0\60"+
    "\0\u0f60\0\u1620\0\u1650\0\u1620\0\u1680\0\u16b0\0\u1620\0\u1620"+
    "\0\u16e0\0\u1710\0\u1740\0\u1620\0\u1770\0\u1620\0\u17a0\0\u17d0"+
    "\0\u1800\0\u1620\0\u1620\0\u1620\0\u1620\0\u1830\0\u1620\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1620\0\u1920\0\u1950\0\u1620\0\u1980"+
    "\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1ad0"+
    "\0\u1aa0\0\u1b00\0\u1b30\0\u1aa0\0\u1b60\0\u1b90\0\u1aa0\0\u1bc0"+
    "\0\u1aa0\0\u1bf0\0\u1c20\0\u1c50\0\u1aa0\0\u1aa0\0\u1aa0\0\u1c80"+
    "\0\u1cb0\0\u1aa0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1d70\0\u1d70"+
    "\0\u1da0\0\u1d70\0\u1dd0\0\u1d70\0\u1e00\0\u1d70\0\u1e30\0\u1e60"+
    "\0\u1d70\0\u1e90\0\u1ec0\0\u1ef0\0\u1ef0\0\u1ef0\0\u1f20\0\u1ef0"+
    "\0\u1f50\0\u1ef0\0\u1f80\0\u1fb0\0\u1fb0\0\u1fb0\0\u1fe0\0\u2010"+
    "\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0"+
    "\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460"+
    "\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0"+
    "\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730\0\u2760"+
    "\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0"+
    "\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30\0\u2a60"+
    "\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0\0\u2be0"+
    "\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30\0\u2d60"+
    "\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80\0\u2eb0\0\u2ee0"+
    "\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060"+
    "\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180\0\u31b0\0\u31e0"+
    "\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330\0\u3360"+
    "\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480\0\u34b0\0\u34e0"+
    "\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\2"+
    "\1\20\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\63\0\1\4"+
    "\61\0\2\53\2\0\1\53\10\0\25\53\4\0\1\53"+
    "\12\0\1\6\1\0\1\54\55\0\1\6\1\55\40\0"+
    "\1\56\14\0\2\53\2\0\1\53\10\0\6\53\1\57"+
    "\1\53\1\60\14\53\4\0\1\53\5\0\11\61\1\62"+
    "\46\61\5\0\1\63\65\0\1\64\33\0\1\65\25\0"+
    "\1\66\111\0\1\67\10\0\20\70\1\0\37\70\4\0"+
    "\2\53\2\0\1\53\10\0\1\53\1\71\4\53\1\72"+
    "\16\53\4\0\1\53\11\0\2\53\2\0\1\73\10\0"+
    "\25\53\4\0\1\53\11\0\2\53\2\0\1\74\10\0"+
    "\2\53\1\75\4\53\1\76\15\53\4\0\1\53\11\0"+
    "\2\53\2\0\1\53\10\0\7\53\1\77\15\53\4\0"+
    "\1\53\11\0\2\53\2\0\1\53\10\0\6\53\1\100"+
    "\11\53\1\101\4\53\4\0\1\53\11\0\2\53\2\0"+
    "\1\53\10\0\5\53\1\102\1\53\1\103\15\53\4\0"+
    "\1\53\11\0\2\53\2\0\1\53\10\0\1\53\1\104"+
    "\16\53\1\105\4\53\4\0\1\53\11\0\2\53\2\0"+
    "\1\53\10\0\1\106\6\53\1\107\15\53\4\0\1\53"+
    "\11\0\2\53\2\0\1\53\10\0\1\53\1\110\1\111"+
    "\4\53\1\112\4\53\1\113\10\53\4\0\1\53\11\0"+
    "\2\53\2\0\1\53\10\0\1\114\6\53\1\115\4\53"+
    "\1\116\10\53\4\0\1\53\11\0\2\53\2\0\1\117"+
    "\10\0\11\53\1\120\2\53\1\121\10\53\4\0\1\53"+
    "\11\0\2\53\2\0\1\53\10\0\5\53\1\122\1\53"+
    "\1\123\15\53\4\0\1\53\11\0\2\53\2\0\1\53"+
    "\10\0\1\124\24\53\4\0\1\53\11\0\2\53\2\0"+
    "\1\53\10\0\1\53\1\125\3\53\1\126\6\53\1\127"+
    "\10\53\4\0\1\53\11\0\2\53\2\0\1\53\10\0"+
    "\1\130\4\53\1\131\1\53\1\132\11\53\1\133\3\53"+
    "\4\0\1\53\11\0\2\53\2\0\1\53\10\0\6\53"+
    "\1\134\16\53\4\0\1\53\11\0\2\53\2\0\1\53"+
    "\10\0\1\135\1\136\23\53\4\0\1\53\11\0\2\53"+
    "\2\0\1\53\10\0\7\53\1\137\15\53\4\0\1\53"+
    "\53\0\1\140\1\141\57\0\1\142\1\143\1\144\55\0"+
    "\1\145\1\0\1\146\12\0\2\53\2\0\1\53\10\0"+
    "\7\53\1\147\15\53\4\0\1\53\54\0\1\150\14\0"+
    "\2\151\2\0\1\151\10\0\25\151\4\0\1\151\12\0"+
    "\1\152\56\0\2\151\2\0\1\151\10\0\15\151\1\153"+
    "\7\151\4\0\1\151\11\0\2\151\2\0\1\151\10\0"+
    "\13\151\1\154\11\151\4\0\1\151\5\0\11\155\1\156"+
    "\46\155\1\64\1\3\1\4\55\64\15\157\1\160\42\157"+
    "\20\70\1\4\37\70\4\0\2\151\2\0\1\151\10\0"+
    "\1\151\1\161\23\151\4\0\1\151\11\0\2\151\2\0"+
    "\1\151\10\0\15\151\1\162\7\151\4\0\1\151\11\0"+
    "\2\151\2\0\1\151\10\0\1\163\11\151\1\164\7\151"+
    "\1\165\2\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\4\151\1\166\20\151\4\0\1\151\11\0\2\151"+
    "\2\0\1\151\10\0\11\151\1\167\13\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\7\151\1\170\15\151"+
    "\4\0\1\151\11\0\2\151\2\0\1\151\10\0\11\151"+
    "\1\171\13\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\10\151\1\172\1\173\13\151\4\0\1\151\11\0"+
    "\2\151\2\0\1\151\10\0\10\151\1\174\14\151\4\0"+
    "\1\151\11\0\2\151\2\0\1\151\10\0\11\151\1\175"+
    "\13\151\4\0\1\151\11\0\2\151\2\0\1\151\10\0"+
    "\3\151\1\176\21\151\4\0\1\151\11\0\2\151\2\0"+
    "\1\151\10\0\6\151\1\177\16\151\4\0\1\151\11\0"+
    "\2\151\2\0\1\151\10\0\21\151\1\200\3\151\4\0"+
    "\1\151\11\0\2\151\2\0\1\151\10\0\22\151\1\201"+
    "\2\151\4\0\1\151\11\0\2\151\2\0\1\202\10\0"+
    "\25\151\4\0\1\151\11\0\2\151\2\0\1\151\10\0"+
    "\13\151\1\203\11\151\4\0\1\151\11\0\2\151\2\0"+
    "\1\151\10\0\6\151\1\204\16\151\4\0\1\151\11\0"+
    "\2\151\2\0\1\151\10\0\1\205\24\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\11\151\1\206\13\151"+
    "\4\0\1\151\11\0\2\151\2\0\1\151\10\0\1\151"+
    "\1\207\23\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\7\151\1\210\15\151\4\0\1\151\11\0\2\151"+
    "\2\0\1\151\10\0\16\151\1\211\6\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\17\151\1\212\5\151"+
    "\4\0\1\151\11\0\2\151\2\0\1\151\10\0\1\151"+
    "\1\213\23\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\5\151\1\214\17\151\4\0\1\151\11\0\2\151"+
    "\2\0\1\151\10\0\11\151\1\215\13\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\5\151\1\216\17\151"+
    "\4\0\1\151\11\0\2\151\2\0\1\151\10\0\10\151"+
    "\1\217\14\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\10\151\1\220\14\151\4\0\1\151\11\0\2\151"+
    "\2\0\1\151\10\0\1\151\1\221\23\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\6\151\1\222\16\151"+
    "\4\0\1\151\11\0\2\151\2\0\1\151\10\0\11\151"+
    "\1\223\13\151\4\0\1\151\11\0\2\151\2\0\1\151"+
    "\10\0\12\151\1\224\12\151\4\0\1\151\11\0\2\151"+
    "\2\0\1\151\10\0\7\151\1\225\15\151\4\0\1\151"+
    "\11\0\2\151\2\0\1\151\10\0\15\151\1\226\7\151"+
    "\4\0\1\151\54\0\1\227\57\0\1\230\14\0\2\151"+
    "\2\0\1\151\10\0\1\151\1\231\23\151\4\0\1\151"+
    "\11\0\2\232\2\0\1\232\10\0\25\232\4\0\1\232"+
    "\12\0\1\152\2\0\1\233\53\0\2\232\2\0\1\234"+
    "\10\0\25\232\4\0\1\232\5\0\11\155\1\62\46\155"+
    "\15\157\1\235\42\157\15\0\1\160\1\4\45\0\2\232"+
    "\2\0\1\232\10\0\1\236\24\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\10\232\1\237\4\232\1\240"+
    "\7\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\7\232\1\241\15\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\242\10\0\25\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\232\10\0\5\232\1\243\17\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\244\10\0\25\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\10\232\1\245\14\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\232\10\0\7\232\1\246"+
    "\15\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\5\232\1\247\17\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\250\10\0\25\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\232\10\0\4\232\1\251\20\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\252\10\0\25\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\253\10\0\25\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\6\232\1\254\16\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\255\10\0\25\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\232\10\0\13\232\1\256"+
    "\11\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\1\232\1\257\23\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\232\10\0\5\232\1\260\17\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\1\232\1\261\23\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\232\10\0\6\232\1\262"+
    "\16\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\11\232\1\263\13\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\232\10\0\14\232\1\264\10\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\10\232\1\265\14\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\232\10\0\13\232\1\266"+
    "\11\232\4\0\1\232\11\0\2\232\2\0\1\267\10\0"+
    "\25\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\17\232\1\270\5\232\4\0\1\232\11\0\2\232\2\0"+
    "\1\232\10\0\12\232\1\271\12\232\4\0\1\232\11\0"+
    "\2\232\2\0\1\232\10\0\5\232\1\272\17\232\4\0"+
    "\1\232\11\0\2\232\2\0\1\232\10\0\23\232\1\273"+
    "\1\232\4\0\1\232\11\0\2\232\2\0\1\232\10\0"+
    "\4\232\1\274\5\232\1\275\12\232\4\0\1\232\11\0"+
    "\2\276\2\0\1\276\10\0\25\276\4\0\1\276\12\0"+
    "\1\277\1\300\51\0\15\157\1\235\1\4\41\157\4\0"+
    "\2\276\2\0\1\276\10\0\2\276\1\301\22\276\4\0"+
    "\1\276\11\0\2\276\2\0\1\276\10\0\1\276\1\302"+
    "\23\276\4\0\1\276\11\0\2\276\2\0\1\276\10\0"+
    "\1\303\24\276\4\0\1\276\11\0\2\276\2\0\1\276"+
    "\10\0\6\276\1\304\16\276\4\0\1\276\11\0\2\276"+
    "\2\0\1\305\10\0\25\276\4\0\1\276\11\0\2\276"+
    "\2\0\1\276\10\0\6\276\1\306\16\276\4\0\1\276"+
    "\11\0\2\276\2\0\1\276\10\0\10\276\1\307\14\276"+
    "\4\0\1\276\11\0\2\276\2\0\1\276\10\0\5\276"+
    "\1\310\17\276\4\0\1\276\11\0\2\276\2\0\1\276"+
    "\10\0\11\276\1\311\13\276\4\0\1\276\11\0\2\276"+
    "\2\0\1\276\10\0\6\276\1\312\16\276\4\0\1\276"+
    "\11\0\2\276\2\0\1\276\10\0\11\276\1\313\13\276"+
    "\4\0\1\276\11\0\2\276\2\0\1\276\10\0\11\276"+
    "\1\314\13\276\4\0\1\276\11\0\2\276\2\0\1\315"+
    "\10\0\25\276\4\0\1\276\11\0\2\276\2\0\1\316"+
    "\10\0\25\276\4\0\1\276\11\0\2\276\2\0\1\317"+
    "\10\0\25\276\4\0\1\276\11\0\2\276\2\0\1\276"+
    "\10\0\1\320\24\276\4\0\1\276\11\0\2\276\2\0"+
    "\1\276\10\0\11\276\1\321\13\276\4\0\1\276\11\0"+
    "\2\276\2\0\1\276\10\0\10\276\1\322\14\276\4\0"+
    "\1\276\11\0\2\276\2\0\1\323\10\0\25\276\4\0"+
    "\1\276\11\0\2\276\2\0\1\276\10\0\1\276\1\324"+
    "\23\276\4\0\1\276\11\0\2\276\2\0\1\325\10\0"+
    "\25\276\4\0\1\276\11\0\2\326\2\0\1\326\10\0"+
    "\25\326\4\0\1\326\12\0\1\277\56\0\2\326\2\0"+
    "\1\326\10\0\15\326\1\327\7\326\4\0\1\326\11\0"+
    "\2\326\2\0\1\326\10\0\11\326\1\330\13\326\4\0"+
    "\1\326\11\0\2\326\2\0\1\326\10\0\1\331\24\326"+
    "\4\0\1\326\11\0\2\326\2\0\1\332\10\0\25\326"+
    "\4\0\1\326\11\0\2\326\2\0\1\326\10\0\6\326"+
    "\1\333\16\326\4\0\1\326\11\0\2\326\2\0\1\326"+
    "\10\0\4\326\1\334\20\326\4\0\1\326\11\0\2\326"+
    "\2\0\1\326\10\0\5\326\1\335\17\326\4\0\1\326"+
    "\11\0\2\326\2\0\1\326\10\0\7\326\1\336\15\326"+
    "\4\0\1\326\11\0\2\326\2\0\1\326\10\0\1\326"+
    "\1\337\23\326\4\0\1\326\11\0\2\326\2\0\1\326"+
    "\10\0\5\326\1\340\17\326\4\0\1\326\11\0\2\326"+
    "\2\0\1\326\10\0\15\326\1\341\7\326\4\0\1\326"+
    "\11\0\2\326\2\0\1\326\10\0\1\342\24\326\4\0"+
    "\1\326\11\0\2\326\2\0\1\326\10\0\15\326\1\343"+
    "\7\326\4\0\1\326\11\0\2\344\2\0\1\344\10\0"+
    "\25\344\4\0\1\344\11\0\2\344\2\0\1\344\10\0"+
    "\6\344\1\345\16\344\4\0\1\344\11\0\2\344\2\0"+
    "\1\344\10\0\11\344\1\346\13\344\4\0\1\344\11\0"+
    "\2\344\2\0\1\344\10\0\6\344\1\347\16\344\4\0"+
    "\1\344\11\0\2\344\2\0\1\344\10\0\15\344\1\350"+
    "\7\344\4\0\1\344\11\0\2\344\2\0\1\344\10\0"+
    "\7\344\1\351\15\344\4\0\1\344\11\0\2\344\2\0"+
    "\1\344\10\0\24\344\1\352\4\0\1\344\11\0\2\344"+
    "\2\0\1\344\10\0\21\344\1\353\3\344\4\0\1\344"+
    "\11\0\2\354\2\0\1\354\10\0\25\354\4\0\1\354"+
    "\11\0\2\354\2\0\1\354\10\0\11\354\1\355\13\354"+
    "\4\0\1\354\11\0\2\354\2\0\1\354\10\0\6\354"+
    "\1\356\16\354\4\0\1\354\11\0\2\354\2\0\1\354"+
    "\10\0\1\354\1\357\23\354\4\0\1\354\11\0\2\360"+
    "\2\0\1\360\10\0\25\360\4\0\1\360\11\0\2\360"+
    "\2\0\1\361\10\0\25\360\4\0\1\360\11\0\2\362"+
    "\2\0\1\362\10\0\25\362\4\0\1\362\11\0\2\363"+
    "\2\0\1\363\10\0\25\363\4\0\1\363\11\0\2\364"+
    "\2\0\1\364\10\0\25\364\4\0\1\364\11\0\2\365"+
    "\2\0\1\365\10\0\25\365\4\0\1\365\11\0\2\366"+
    "\2\0\1\366\10\0\25\366\4\0\1\366\11\0\2\367"+
    "\2\0\1\367\10\0\25\367\4\0\1\367\11\0\2\370"+
    "\2\0\1\370\10\0\25\370\4\0\1\370\11\0\2\371"+
    "\2\0\1\371\10\0\25\371\4\0\1\371\11\0\2\372"+
    "\2\0\1\372\10\0\25\372\4\0\1\372\11\0\2\373"+
    "\2\0\1\373\10\0\25\373\4\0\1\373\11\0\2\374"+
    "\2\0\1\374\10\0\25\374\4\0\1\374\11\0\2\375"+
    "\2\0\1\375\10\0\25\375\4\0\1\375\11\0\2\376"+
    "\2\0\1\376\10\0\25\376\4\0\1\376\11\0\2\377"+
    "\2\0\1\377\10\0\25\377\4\0\1\377\11\0\2\u0100"+
    "\2\0\1\u0100\10\0\25\u0100\4\0\1\u0100\11\0\2\u0101"+
    "\2\0\1\u0101\10\0\25\u0101\4\0\1\u0101\11\0\2\u0102"+
    "\2\0\1\u0102\10\0\25\u0102\4\0\1\u0102\11\0\2\u0103"+
    "\2\0\1\u0103\10\0\25\u0103\4\0\1\u0103\11\0\2\u0104"+
    "\2\0\1\u0104\10\0\25\u0104\4\0\1\u0104\11\0\2\u0105"+
    "\2\0\1\u0105\10\0\25\u0105\4\0\1\u0105\11\0\2\u0106"+
    "\2\0\1\u0106\10\0\25\u0106\4\0\1\u0106\11\0\2\u0107"+
    "\2\0\1\u0107\10\0\25\u0107\4\0\1\u0107\11\0\2\u0108"+
    "\2\0\1\u0108\10\0\25\u0108\4\0\1\u0108\11\0\2\u0109"+
    "\2\0\1\u0109\10\0\25\u0109\4\0\1\u0109\11\0\2\u010a"+
    "\2\0\1\u010a\10\0\25\u010a\4\0\1\u010a\11\0\2\u010b"+
    "\2\0\1\u010b\10\0\25\u010b\4\0\1\u010b\11\0\2\u010c"+
    "\2\0\1\u010c\10\0\25\u010c\4\0\1\u010c\11\0\2\u010d"+
    "\2\0\1\u010d\10\0\25\u010d\4\0\1\u010d\11\0\2\u010e"+
    "\2\0\1\u010e\10\0\25\u010e\4\0\1\u010e\11\0\2\u010f"+
    "\2\0\1\u010f\10\0\25\u010f\4\0\1\u010f\11\0\2\u0110"+
    "\2\0\1\u0110\10\0\25\u0110\4\0\1\u0110\11\0\2\u0111"+
    "\2\0\1\u0111\10\0\25\u0111\4\0\1\u0111\11\0\2\u0112"+
    "\2\0\1\u0112\10\0\25\u0112\4\0\1\u0112\11\0\2\u0113"+
    "\2\0\1\u0113\10\0\25\u0113\4\0\1\u0113\11\0\2\u0114"+
    "\2\0\1\u0114\10\0\25\u0114\4\0\1\u0114\11\0\2\u0115"+
    "\2\0\1\u0115\10\0\25\u0115\4\0\1\u0115\11\0\2\u0116"+
    "\2\0\1\u0116\10\0\25\u0116\4\0\1\u0116\11\0\2\u0117"+
    "\2\0\1\u0117\10\0\25\u0117\4\0\1\u0117\11\0\2\u0118"+
    "\2\0\1\u0118\10\0\25\u0118\4\0\1\u0118\11\0\2\u0119"+
    "\2\0\1\u0119\10\0\25\u0119\4\0\1\u0119\11\0\2\u011a"+
    "\2\0\1\u011a\10\0\25\u011a\4\0\1\u011a\11\0\2\u011b"+
    "\2\0\1\u011b\10\0\25\u011b\4\0\1\u011b\11\0\2\u011c"+
    "\2\0\1\u011c\10\0\25\u011c\4\0\1\u011c\11\0\2\u011d"+
    "\2\0\1\u011d\10\0\25\u011d\4\0\1\u011d\11\0\2\u011e"+
    "\2\0\1\u011e\10\0\25\u011e\4\0\1\u011e\11\0\2\u011f"+
    "\2\0\1\u011f\10\0\25\u011f\4\0\1\u011f\11\0\2\u0120"+
    "\2\0\1\u0120\10\0\25\u0120\4\0\1\u0120\11\0\2\u0121"+
    "\2\0\1\u0121\10\0\25\u0121\4\0\1\u0121\11\0\2\u0122"+
    "\2\0\1\u0122\10\0\25\u0122\4\0\1\u0122\11\0\2\u0123"+
    "\2\0\1\u0123\10\0\25\u0123\4\0\1\u0123\11\0\2\u0124"+
    "\2\0\1\u0124\10\0\25\u0124\4\0\1\u0124\11\0\2\u0125"+
    "\2\0\1\u0125\10\0\25\u0125\4\0\1\u0125\11\0\2\u0126"+
    "\2\0\1\u0126\10\0\25\u0126\4\0\1\u0126\11\0\2\u0127"+
    "\2\0\1\u0127\10\0\25\u0127\4\0\1\u0127\11\0\2\u0128"+
    "\2\0\1\u0128\10\0\25\u0128\4\0\1\u0128\11\0\2\u0129"+
    "\2\0\1\u0129\10\0\25\u0129\4\0\1\u0129\11\0\2\u012a"+
    "\2\0\1\u012a\10\0\25\u012a\4\0\1\u012a\11\0\2\u012b"+
    "\2\0\1\u012b\10\0\25\u012b\4\0\1\u012b\11\0\2\u012c"+
    "\2\0\1\u012c\10\0\25\u012c\4\0\1\u012c\11\0\2\u012d"+
    "\2\0\1\u012d\10\0\25\u012d\4\0\1\u012d\11\0\2\u012e"+
    "\2\0\1\u012e\10\0\25\u012e\4\0\1\u012e\11\0\2\u012f"+
    "\2\0\1\u012f\10\0\25\u012f\4\0\1\u012f\11\0\2\u0130"+
    "\2\0\1\u0130\10\0\25\u0130\4\0\1\u0130\11\0\2\u0131"+
    "\2\0\1\u0131\10\0\25\u0131\4\0\1\u0131\11\0\2\u0132"+
    "\2\0\1\u0132\10\0\25\u0132\4\0\1\u0132\11\0\2\u0133"+
    "\2\0\1\u0133\10\0\25\u0133\4\0\1\u0133\11\0\2\u0134"+
    "\2\0\1\u0134\10\0\25\u0134\4\0\1\u0134\11\0\2\u0135"+
    "\2\0\1\u0135\10\0\25\u0135\4\0\1\u0135\11\0\2\u0136"+
    "\2\0\1\u0136\10\0\25\u0136\4\0\1\u0136\11\0\2\u0137"+
    "\2\0\1\u0137\10\0\25\u0137\4\0\1\u0137\11\0\2\u0138"+
    "\2\0\1\u0138\10\0\25\u0138\4\0\1\u0138\11\0\2\u0139"+
    "\2\0\1\u0139\10\0\25\u0139\4\0\1\u0139\11\0\2\u013a"+
    "\2\0\1\u013a\10\0\25\u013a\4\0\1\u013a\11\0\2\u013b"+
    "\2\0\1\u013b\10\0\25\u013b\4\0\1\u013b\11\0\2\u013c"+
    "\2\0\1\u013c\10\0\25\u013c\4\0\1\u013c\11\0\2\u013d"+
    "\2\0\1\u013d\10\0\25\u013d\4\0\1\u013d\11\0\2\u013e"+
    "\2\0\1\u013e\10\0\25\u013e\4\0\1\u013e\11\0\2\u013f"+
    "\2\0\1\u013f\10\0\25\u013f\4\0\1\u013f\11\0\2\u0140"+
    "\2\0\1\u0140\10\0\25\u0140\4\0\1\u0140\11\0\2\u0141"+
    "\2\0\1\u0141\10\0\25\u0141\4\0\1\u0141\11\0\2\u0142"+
    "\2\0\1\u0142\10\0\25\u0142\4\0\1\u0142\11\0\2\u0143"+
    "\2\0\1\u0143\10\0\25\u0143\4\0\1\u0143\11\0\2\u0144"+
    "\2\0\1\u0144\10\0\25\u0144\4\0\1\u0144\11\0\2\u0145"+
    "\2\0\1\u0145\10\0\25\u0145\4\0\1\u0145\11\0\2\u0146"+
    "\2\0\1\u0146\10\0\25\u0146\4\0\1\u0146\11\0\2\u0147"+
    "\2\0\1\u0147\10\0\25\u0147\4\0\1\u0147\11\0\2\u0148"+
    "\2\0\1\u0148\10\0\25\u0148\4\0\1\u0148\11\0\2\u0149"+
    "\2\0\1\u0149\10\0\25\u0149\4\0\1\u0149\11\0\2\u014a"+
    "\2\0\1\u014a\10\0\25\u014a\4\0\1\u014a\11\0\2\u014b"+
    "\2\0\1\u014b\10\0\25\u014b\4\0\1\u014b\11\0\2\u014c"+
    "\2\0\1\u014c\10\0\25\u014c\4\0\1\u014c\11\0\2\u014d"+
    "\2\0\1\u014d\10\0\25\u014d\4\0\1\u014d\11\0\2\u014e"+
    "\2\0\1\u014e\10\0\25\u014e\4\0\1\u014e\11\0\2\u014f"+
    "\2\0\1\u014f\10\0\25\u014f\4\0\1\u014f\11\0\2\u0150"+
    "\2\0\1\u0150\10\0\25\u0150\4\0\1\u0150\11\0\2\u0151"+
    "\2\0\1\u0151\10\0\25\u0151\4\0\1\u0151\11\0\2\u0152"+
    "\2\0\1\u0152\10\0\25\u0152\4\0\1\u0152\11\0\2\u0153"+
    "\2\0\1\u0153\10\0\25\u0153\4\0\1\u0153\11\0\2\u0154"+
    "\2\0\1\u0154\10\0\25\u0154\4\0\1\u0154\11\0\2\u0155"+
    "\2\0\1\u0155\10\0\25\u0155\4\0\1\u0155\11\0\2\u0156"+
    "\2\0\1\u0156\10\0\25\u0156\4\0\1\u0156\11\0\2\u0157"+
    "\2\0\1\u0157\10\0\25\u0157\4\0\1\u0157\11\0\2\u0158"+
    "\2\0\1\u0158\10\0\25\u0158\4\0\1\u0158\11\0\2\u0159"+
    "\2\0\1\u0159\10\0\25\u0159\4\0\1\u0159\11\0\2\u015a"+
    "\2\0\1\u015a\10\0\25\u015a\4\0\1\u015a\11\0\2\u015b"+
    "\2\0\1\u015b\10\0\25\u015b\4\0\1\u015b\11\0\2\u015c"+
    "\2\0\1\u015c\10\0\25\u015c\4\0\1\u015c\11\0\2\u015d"+
    "\2\0\1\u015d\10\0\25\u015d\4\0\1\u015d\11\0\2\u015e"+
    "\2\0\1\u015e\10\0\25\u015e\4\0\1\u015e\11\0\2\u015f"+
    "\2\0\1\u015f\10\0\25\u015f\4\0\1\u015f\11\0\2\u0160"+
    "\2\0\1\u0160\10\0\25\u0160\4\0\1\u0160\11\0\2\u0161"+
    "\2\0\1\u0161\10\0\25\u0161\4\0\1\u0161\11\0\2\u0162"+
    "\2\0\1\u0162\10\0\25\u0162\4\0\1\u0162\11\0\2\u0163"+
    "\2\0\1\u0163\10\0\25\u0163\4\0\1\u0163\11\0\2\u0164"+
    "\2\0\1\u0164\10\0\25\u0164\4\0\1\u0164\11\0\2\u0165"+
    "\2\0\1\u0165\10\0\25\u0165\4\0\1\u0165\11\0\2\u0166"+
    "\2\0\1\u0166\10\0\25\u0166\4\0\1\u0166\11\0\2\u0167"+
    "\2\0\1\u0167\10\0\25\u0167\4\0\1\u0167\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13872];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\24\1\1\11"+
    "\4\1\3\11\1\1\1\0\2\11\2\1\1\0\1\11"+
    "\2\1\1\11\1\0\1\11\1\0\47\1\3\11\1\1"+
    "\2\11\2\1\1\11\4\1\1\0\1\11\2\0\46\1"+
    "\2\11\2\1\1\0\1\1\1\0\42\1\1\0\246\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[359];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private final TokenList tokenList;

    public TokenList getTokenList()
    {
        return this.tokenList;
    }

    private Token newToken(int type)
    {
        Token token = new Token(type, yytext(), yyline, yycolumn);
        tokenList.addToken(token);
        return token;
    }

    private Token newToken(int type, Object value)
    {
        Token token = new Token(type, value, yyline, yycolumn);
        tokenList.addToken(token);
        return token;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      tokenList = new TokenList();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return newToken(ParserSym.error);
          }
        case 83: break;
        case 2: 
          { /*Ignore*/
          }
        case 84: break;
        case 3: 
          { return newToken(ParserSym.IDENTIFIER);
          }
        case 85: break;
        case 4: 
          { return newToken(ParserSym.NUMBER, new Integer(yytext()));
          }
        case 86: break;
        case 5: 
          { return newToken(ParserSym.MINUS);
          }
        case 87: break;
        case 6: 
          { return newToken(ParserSym.DIV);
          }
        case 88: break;
        case 7: 
          { return newToken(ParserSym.LPAREN);
          }
        case 89: break;
        case 8: 
          { return newToken(ParserSym.TIMES);
          }
        case 90: break;
        case 9: 
          { return newToken(ParserSym.RPAREN);
          }
        case 91: break;
        case 10: 
          { return newToken(ParserSym.PLUS);
          }
        case 92: break;
        case 11: 
          { return newToken(ParserSym.EQUALS);
          }
        case 93: break;
        case 12: 
          { return newToken(ParserSym.LESS_THAN);
          }
        case 94: break;
        case 13: 
          { return newToken(ParserSym.GREATER_THAN);
          }
        case 95: break;
        case 14: 
          { return newToken(ParserSym.LBRACKET);
          }
        case 96: break;
        case 15: 
          { return newToken(ParserSym.RBRACKET);
          }
        case 97: break;
        case 16: 
          { return newToken(ParserSym.SEMI);
          }
        case 98: break;
        case 17: 
          { return newToken(ParserSym.MINUS_MINUS);
          }
        case 99: break;
        case 18: 
          { return newToken(ParserSym.MINUS_EQUALS);
          }
        case 100: break;
        case 19: 
          { String s = yytext().replace("\'", "");
    return newToken(ParserSym.XTRING, s);
          }
        case 101: break;
        case 20: 
          { String text = yytext();
    Character c = null;

    // El caracter es de tipo #65, #97, etc..
    if (text.startsWith("#"))
    {
        int code = Integer.valueOf(text.substring(1));
        c = Character.toChars(code)[0];
    }
    // El caracter es de tipo 'A', 'b', etc...
    else
    {
        c = new Character(text.charAt(1));
    }

    return newToken(ParserSym.CHARACTER, c);
          }
        case 102: break;
        case 21: 
          { return newToken(ParserSym.DIV_EQUALS);
          }
        case 103: break;
        case 22: 
          { return newToken(ParserSym.TIMES_EQUALS);
          }
        case 104: break;
        case 23: 
          { return newToken(ParserSym.IN);
          }
        case 105: break;
        case 24: 
          { return newToken(ParserSym.IF);
          }
        case 106: break;
        case 25: 
          { return newToken(ParserSym.OR);
          }
        case 107: break;
        case 26: 
          { return newToken(ParserSym.OF);
          }
        case 108: break;
        case 27: 
          { return newToken(ParserSym.TO);
          }
        case 109: break;
        case 28: 
          { return newToken(ParserSym.DO);
          }
        case 110: break;
        case 29: 
          { return newToken(ParserSym.PLUS_PLUS);
          }
        case 111: break;
        case 30: 
          { return newToken(ParserSym.PLUS_EQUALS);
          }
        case 112: break;
        case 31: 
          { return newToken(ParserSym.LESS_EQUALS_THAN);
          }
        case 113: break;
        case 32: 
          { return newToken(ParserSym.SHIFT_LEFT);
          }
        case 114: break;
        case 33: 
          { return newToken(ParserSym.NOT_EQUALS);
          }
        case 115: break;
        case 34: 
          { return newToken(ParserSym.GREATER_EQUALS_THAN);
          }
        case 116: break;
        case 35: 
          { return newToken(ParserSym.SHIFT_RIGHT);
          }
        case 117: break;
        case 36: 
          { return newToken(ParserSym.ASSIGNMENT);
          }
        case 118: break;
        case 37: 
          { Double d = Double.valueOf(yytext());
    return newToken(ParserSym.DOUBLE, d);
          }
        case 119: break;
        case 38: 
          { return newToken(ParserSym.END);
          }
        case 120: break;
        case 39: 
          { return newToken(ParserSym.AND);
          }
        case 121: break;
        case 40: 
          { return newToken(ParserSym.INT);
          }
        case 122: break;
        case 41: 
          { return newToken(ParserSym.NIL, null);
          }
        case 123: break;
        case 42: 
          { return newToken(ParserSym.NOT);
          }
        case 124: break;
        case 43: 
          { return newToken(ParserSym.SET);
          }
        case 125: break;
        case 44: 
          { return newToken(ParserSym.VAR);
          }
        case 126: break;
        case 45: 
          { return newToken(ParserSym.FOR);
          }
        case 127: break;
        case 46: 
          { return newToken(ParserSym.MOD);
          }
        case 128: break;
        case 47: 
          { return newToken(ParserSym.SHIFT_LEFT_EQUALS);
          }
        case 129: break;
        case 48: 
          { return newToken(ParserSym.SHIFT_RIGHT_EQUALS);
          }
        case 130: break;
        case 49: 
          { return newToken(ParserSym.XOR);
          }
        case 131: break;
        case 50: 
          { return newToken(ParserSym.ELSE);
          }
        case 132: break;
        case 51: 
          { return newToken(ParserSym.REAL);
          }
        case 133: break;
        case 52: 
          { return newToken(ParserSym.READ);
          }
        case 134: break;
        case 53: 
          { return newToken(ParserSym.BYTE);
          }
        case 135: break;
        case 54: 
          { return newToken(ParserSym.GOTO);
          }
        case 136: break;
        case 55: 
          { return newToken(ParserSym.TRUE, Boolean.TRUE);
          }
        case 137: break;
        case 56: 
          { return newToken(ParserSym.TYPE);
          }
        case 138: break;
        case 57: 
          { return newToken(ParserSym.THEN);
          }
        case 139: break;
        case 58: 
          { return newToken(ParserSym.CASE);
          }
        case 140: break;
        case 59: 
          { return newToken(ParserSym.CHAR);
          }
        case 141: break;
        case 60: 
          { return newToken(ParserSym.WITH);
          }
        case 142: break;
        case 61: 
          { return newToken(ParserSym.FILE);
          }
        case 143: break;
        case 62: 
          { return newToken(ParserSym.ARRAY);
          }
        case 144: break;
        case 63: 
          { return newToken(ParserSym.BEGIN);
          }
        case 145: break;
        case 64: 
          { return newToken(ParserSym.LABEL);
          }
        case 146: break;
        case 65: 
          { return newToken(ParserSym.CONST);
          }
        case 147: break;
        case 66: 
          { return newToken(ParserSym.WRITE);
          }
        case 148: break;
        case 67: 
          { return newToken(ParserSym.WHILE);
          }
        case 149: break;
        case 68: 
          { return newToken(ParserSym.FALSE, Boolean.FALSE);
          }
        case 150: break;
        case 69: 
          { return newToken(ParserSym.UNTIL);
          }
        case 151: break;
        case 70: 
          { return newToken(ParserSym.RECORD);
          }
        case 152: break;
        case 71: 
          { return newToken(ParserSym.REPEAT);
          }
        case 153: break;
        case 72: 
          { return newToken(ParserSym.INLINE);
          }
        case 154: break;
        case 73: 
          { return newToken(ParserSym.STRING);
          }
        case 155: break;
        case 74: 
          { return newToken(ParserSym.DOWNTO);
          }
        case 156: break;
        case 75: 
          { return newToken(ParserSym.PACKED);
          }
        case 157: break;
        case 76: 
          { return newToken(ParserSym.BOOLEAN);
          }
        case 158: break;
        case 77: 
          { return newToken(ParserSym.LONGINT);
          }
        case 159: break;
        case 78: 
          { return newToken(ParserSym.FORWARD);
          }
        case 160: break;
        case 79: 
          { return newToken(ParserSym.PROGRAM);
          }
        case 161: break;
        case 80: 
          { return newToken(ParserSym.SHORTINT);
          }
        case 162: break;
        case 81: 
          { return newToken(ParserSym.FUNCTION);
          }
        case 163: break;
        case 82: 
          { return newToken(ParserSym.PROCEDURE);
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Token(ParserSym.EOF, yytext(), yyline, yycolumn);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
