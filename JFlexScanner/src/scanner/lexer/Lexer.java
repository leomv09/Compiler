/* The following code was generated by JFlex 1.6.0 */

package scanner.lexer;

import scanner.Token;
import scanner.TokenList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/scanner/lexer/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\46\1\45\1\55\1\46\1\44\22\0\1\46\2\0\1\52"+
    "\3\0\1\51\1\37\1\40\1\35\1\30\1\27\1\31\1\42\1\36"+
    "\12\50\1\41\1\27\1\34\1\33\1\32\2\0\1\1\1\4\1\14"+
    "\1\17\1\5\1\21\1\6\1\16\1\7\1\47\1\24\1\12\1\25"+
    "\1\10\1\11\1\23\1\47\1\2\1\15\1\13\1\22\1\26\1\20"+
    "\1\43\1\3\1\47\1\27\1\0\1\27\3\0\32\47\1\53\1\0"+
    "\1\54\7\0\1\55\u1fa2\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\24\2\10\3\1\2\2\4\1\5\3\1"+
    "\12\2\2\6\2\2\1\3\13\2\1\6\13\2\1\4"+
    "\1\0\1\2\2\0\2\5\1\0\2\2\1\3\6\2"+
    "\1\6\16\2\1\6\4\2\2\0\1\5\2\2\1\6"+
    "\21\2\2\0\1\2\1\6\14\2\1\0\1\2\1\6"+
    "\10\2\1\6\4\2\1\6\2\2\1\6\166\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\56\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\56\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u064a\0\u0844\0\u0872\0\u064a\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u05c0"+
    "\0\56\0\u05ee\0\u0d7a\0\u0da8\0\u0dd6\0\u0da8\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0da8\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u130c\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u05ee"+
    "\0\u1928\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c"+
    "\0\u1a6a\0\u1a98\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02"+
    "\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72"+
    "\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2"+
    "\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252"+
    "\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532"+
    "\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2"+
    "\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4\0\u2812"+
    "\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982"+
    "\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2"+
    "\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06\0\u2c34\0\u2c62"+
    "\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2"+
    "\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42"+
    "\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2"+
    "\0\56";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\5\1\20"+
    "\1\21\1\22\1\23\1\24\1\5\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\27\1\33\1\34\1\35\1\36"+
    "\1\27\1\34\1\27\1\37\1\40\2\41\1\5\1\42"+
    "\1\43\1\44\1\45\1\2\60\0\1\46\1\47\5\46"+
    "\1\50\16\46\14\0\1\46\3\0\2\46\6\0\4\46"+
    "\1\51\21\46\14\0\1\46\3\0\2\46\6\0\26\46"+
    "\14\0\1\46\3\0\2\46\6\0\2\46\1\52\1\46"+
    "\1\53\3\46\1\54\15\46\14\0\1\46\3\0\2\46"+
    "\6\0\7\46\1\55\1\46\1\56\14\46\14\0\1\46"+
    "\3\0\2\46\6\0\10\46\1\57\15\46\14\0\1\46"+
    "\3\0\2\46\6\0\7\46\1\60\10\46\1\61\5\46"+
    "\14\0\1\46\3\0\2\46\6\0\6\46\1\62\1\46"+
    "\1\63\15\46\14\0\1\46\3\0\2\46\6\0\1\46"+
    "\1\64\16\46\1\61\5\46\14\0\1\46\3\0\2\46"+
    "\6\0\1\65\7\46\1\66\15\46\14\0\1\46\3\0"+
    "\2\46\6\0\1\46\1\67\1\70\5\46\1\61\4\46"+
    "\1\71\10\46\14\0\1\46\3\0\2\46\6\0\1\56"+
    "\7\46\1\72\4\46\1\73\10\46\14\0\1\46\3\0"+
    "\2\46\6\0\4\46\1\74\5\46\1\75\2\46\1\76"+
    "\10\46\14\0\1\46\3\0\2\46\6\0\6\46\1\77"+
    "\1\46\1\100\15\46\14\0\1\46\3\0\2\46\6\0"+
    "\1\46\1\101\4\46\1\102\6\46\1\103\10\46\14\0"+
    "\1\46\3\0\2\46\6\0\1\104\5\46\1\105\1\46"+
    "\1\106\10\46\1\107\4\46\14\0\1\46\3\0\2\46"+
    "\6\0\7\46\1\110\16\46\14\0\1\46\3\0\2\46"+
    "\6\0\1\111\1\112\24\46\14\0\1\46\3\0\2\46"+
    "\6\0\10\46\1\50\15\46\14\0\1\46\3\0\2\46"+
    "\6\0\1\113\25\46\14\0\1\46\3\0\2\46\35\0"+
    "\1\27\2\0\1\27\53\0\1\27\1\0\1\27\14\0"+
    "\1\42\37\0\1\34\1\27\54\0\2\27\1\34\54\0"+
    "\1\27\55\0\1\27\2\0\1\114\54\0\1\115\21\0"+
    "\10\46\1\116\15\46\14\0\1\46\3\0\2\46\52\0"+
    "\1\41\52\0\1\117\5\0\1\42\5\0\51\120\1\121"+
    "\4\120\50\0\1\122\5\0\54\123\1\0\1\123\1\0"+
    "\26\124\14\0\1\124\3\0\2\124\6\0\1\124\1\125"+
    "\24\124\14\0\1\124\3\0\2\124\6\0\16\124\1\126"+
    "\7\124\14\0\1\124\3\0\2\124\6\0\1\127\12\124"+
    "\1\130\6\124\1\131\3\124\14\0\1\124\3\0\2\124"+
    "\6\0\12\124\1\132\13\124\14\0\1\124\3\0\2\124"+
    "\6\0\5\124\1\133\20\124\14\0\1\124\3\0\2\124"+
    "\6\0\10\124\1\134\15\124\14\0\1\124\3\0\2\124"+
    "\6\0\16\124\1\135\7\124\14\0\1\124\3\0\2\124"+
    "\6\0\14\124\1\132\11\124\14\0\1\124\3\0\2\124"+
    "\6\0\12\124\1\136\13\124\14\0\1\124\3\0\2\124"+
    "\6\0\11\124\1\137\1\135\13\124\14\0\1\124\3\0"+
    "\2\124\6\0\11\124\1\135\14\124\14\0\1\124\3\0"+
    "\2\124\6\0\12\124\1\126\13\124\14\0\1\124\3\0"+
    "\2\124\6\0\3\124\1\140\22\124\14\0\1\124\3\0"+
    "\2\124\6\0\7\124\1\141\16\124\14\0\1\124\3\0"+
    "\2\124\6\0\21\124\1\132\4\124\14\0\1\124\3\0"+
    "\2\124\6\0\22\124\1\132\3\124\14\0\1\124\3\0"+
    "\2\124\6\0\4\124\1\142\21\124\14\0\1\124\3\0"+
    "\2\124\6\0\7\124\1\143\16\124\14\0\1\124\3\0"+
    "\2\124\6\0\1\144\25\124\14\0\1\124\3\0\2\124"+
    "\6\0\12\124\1\135\13\124\14\0\1\124\3\0\2\124"+
    "\6\0\1\124\1\145\24\124\14\0\1\124\3\0\2\124"+
    "\6\0\10\124\1\146\15\124\14\0\1\124\3\0\2\124"+
    "\6\0\25\124\1\126\14\0\1\124\3\0\2\124\6\0"+
    "\17\124\1\147\6\124\14\0\1\124\3\0\2\124\6\0"+
    "\6\124\1\150\17\124\14\0\1\124\3\0\2\124\6\0"+
    "\12\124\1\151\13\124\14\0\1\124\3\0\2\124\6\0"+
    "\6\124\1\152\17\124\14\0\1\124\3\0\2\124\6\0"+
    "\11\124\1\153\14\124\14\0\1\124\3\0\2\124\6\0"+
    "\11\124\1\132\14\124\14\0\1\124\3\0\2\124\6\0"+
    "\1\124\1\154\24\124\14\0\1\124\3\0\2\124\6\0"+
    "\7\124\1\155\16\124\14\0\1\124\3\0\2\124\6\0"+
    "\12\124\1\156\13\124\14\0\1\124\3\0\2\124\6\0"+
    "\13\124\1\157\12\124\14\0\1\124\3\0\2\124\6\0"+
    "\10\124\1\160\15\124\14\0\1\124\3\0\2\124\6\0"+
    "\1\124\1\135\24\124\14\0\1\124\3\0\2\124\5\0"+
    "\44\114\1\40\1\41\10\114\35\161\1\162\20\161\1\0"+
    "\1\124\1\126\24\124\14\0\1\124\3\0\2\124\55\0"+
    "\1\163\5\0\54\123\1\41\1\123\1\0\26\164\14\0"+
    "\1\164\3\0\2\164\6\0\1\165\25\164\14\0\1\164"+
    "\3\0\2\164\6\0\11\164\1\166\4\164\1\166\7\164"+
    "\14\0\1\164\3\0\2\164\6\0\10\164\1\167\15\164"+
    "\14\0\1\164\3\0\2\164\6\0\4\164\1\170\21\164"+
    "\14\0\1\164\3\0\2\164\6\0\4\164\1\166\21\164"+
    "\14\0\1\164\3\0\2\164\6\0\6\164\1\171\17\164"+
    "\14\0\1\164\3\0\2\164\6\0\11\164\1\172\14\164"+
    "\14\0\1\164\3\0\2\164\6\0\10\164\1\166\15\164"+
    "\14\0\1\164\3\0\2\164\6\0\6\164\1\173\17\164"+
    "\14\0\1\164\3\0\2\164\6\0\4\164\1\174\21\164"+
    "\14\0\1\164\3\0\2\164\6\0\5\164\1\175\20\164"+
    "\14\0\1\164\3\0\2\164\6\0\7\164\1\166\16\164"+
    "\14\0\1\164\3\0\2\164\6\0\14\164\1\176\11\164"+
    "\14\0\1\164\3\0\2\164\6\0\1\164\1\166\24\164"+
    "\14\0\1\164\3\0\2\164\6\0\6\164\1\177\17\164"+
    "\14\0\1\164\3\0\2\164\6\0\1\164\1\200\24\164"+
    "\14\0\1\164\3\0\2\164\6\0\7\164\1\201\16\164"+
    "\14\0\1\164\3\0\2\164\6\0\12\164\1\202\13\164"+
    "\14\0\1\164\3\0\2\164\6\0\15\164\1\166\10\164"+
    "\14\0\1\164\3\0\2\164\6\0\11\164\1\202\14\164"+
    "\14\0\1\164\3\0\2\164\6\0\14\164\1\202\11\164"+
    "\14\0\1\164\3\0\2\164\6\0\17\164\1\203\6\164"+
    "\14\0\1\164\3\0\2\164\6\0\13\164\1\204\12\164"+
    "\14\0\1\164\3\0\2\164\6\0\6\164\1\174\17\164"+
    "\14\0\1\164\3\0\2\164\6\0\23\164\1\205\2\164"+
    "\14\0\1\164\3\0\2\164\6\0\5\164\1\206\5\164"+
    "\1\207\12\164\14\0\1\164\3\0\2\164\5\0\35\161"+
    "\1\210\20\161\35\0\1\162\2\0\1\41\22\0\1\211"+
    "\42\0\1\163\6\0\26\212\14\0\1\212\3\0\2\212"+
    "\6\0\2\212\1\213\23\212\14\0\1\212\3\0\2\212"+
    "\6\0\1\212\1\214\24\212\14\0\1\212\3\0\2\212"+
    "\6\0\1\215\25\212\14\0\1\212\3\0\2\212\6\0"+
    "\7\212\1\213\16\212\14\0\1\212\3\0\2\212\6\0"+
    "\4\212\1\216\21\212\14\0\1\212\3\0\2\212\6\0"+
    "\7\212\1\217\16\212\14\0\1\212\3\0\2\212\6\0"+
    "\11\212\1\213\14\212\14\0\1\212\3\0\2\212\6\0"+
    "\6\212\1\220\17\212\14\0\1\212\3\0\2\212\6\0"+
    "\12\212\1\213\13\212\14\0\1\212\3\0\2\212\6\0"+
    "\7\212\1\221\16\212\14\0\1\212\3\0\2\212\6\0"+
    "\12\212\1\222\13\212\14\0\1\212\3\0\2\212\6\0"+
    "\12\212\1\223\13\212\14\0\1\212\3\0\2\212\6\0"+
    "\4\212\1\213\21\212\14\0\1\212\3\0\2\212\6\0"+
    "\1\224\25\212\14\0\1\212\3\0\2\212\6\0\12\212"+
    "\1\225\13\212\14\0\1\212\3\0\2\212\6\0\4\212"+
    "\1\214\21\212\14\0\1\212\3\0\2\212\6\0\1\212"+
    "\1\226\24\212\14\0\1\212\3\0\2\212\6\0\4\212"+
    "\1\227\21\212\14\0\1\212\3\0\2\212\5\0\35\161"+
    "\1\210\2\161\1\41\15\161\31\0\1\230\16\0\1\122"+
    "\6\0\26\231\14\0\1\231\3\0\2\231\6\0\16\231"+
    "\1\232\7\231\14\0\1\231\3\0\2\231\6\0\12\231"+
    "\1\232\13\231\14\0\1\231\3\0\2\231\6\0\1\233"+
    "\25\231\14\0\1\231\3\0\2\231\6\0\4\231\1\232"+
    "\21\231\14\0\1\231\3\0\2\231\6\0\7\231\1\234"+
    "\16\231\14\0\1\231\3\0\2\231\6\0\5\231\1\232"+
    "\20\231\14\0\1\231\3\0\2\231\6\0\6\231\1\235"+
    "\17\231\14\0\1\231\3\0\2\231\6\0\10\231\1\232"+
    "\15\231\14\0\1\231\3\0\2\231\6\0\1\231\1\236"+
    "\24\231\14\0\1\231\3\0\2\231\6\0\6\231\1\237"+
    "\17\231\14\0\1\231\3\0\2\231\6\0\1\240\25\231"+
    "\14\0\1\231\3\0\2\231\6\0\16\231\1\241\7\231"+
    "\14\0\1\231\3\0\2\231\6\0\26\242\14\0\1\242"+
    "\3\0\2\242\6\0\7\242\1\243\16\242\14\0\1\242"+
    "\3\0\2\242\6\0\12\242\1\243\13\242\14\0\1\242"+
    "\3\0\2\242\6\0\7\242\1\244\16\242\14\0\1\242"+
    "\3\0\2\242\6\0\16\242\1\243\7\242\14\0\1\242"+
    "\3\0\2\242\6\0\10\242\1\245\15\242\14\0\1\242"+
    "\3\0\2\242\6\0\24\242\1\243\1\242\14\0\1\242"+
    "\3\0\2\242\6\0\21\242\1\246\4\242\14\0\1\242"+
    "\3\0\2\242\6\0\26\247\14\0\1\247\3\0\2\247"+
    "\6\0\12\247\1\250\13\247\14\0\1\247\3\0\2\247"+
    "\6\0\7\247\1\250\16\247\14\0\1\247\3\0\2\247"+
    "\6\0\1\247\1\251\24\247\14\0\1\247\3\0\2\247"+
    "\6\0\26\252\14\0\1\252\3\0\2\252\6\0\4\252"+
    "\1\253\21\252\14\0\1\252\3\0\2\252\6\0\26\254"+
    "\14\0\1\254\3\0\2\254\6\0\26\255\14\0\1\255"+
    "\3\0\2\255\6\0\26\256\14\0\1\256\3\0\2\256"+
    "\6\0\26\257\14\0\1\257\3\0\2\257\6\0\26\260"+
    "\14\0\1\260\3\0\2\260\6\0\26\261\14\0\1\261"+
    "\3\0\2\261\6\0\26\262\14\0\1\262\3\0\2\262"+
    "\6\0\26\263\14\0\1\263\3\0\2\263\6\0\26\264"+
    "\14\0\1\264\3\0\2\264\6\0\26\265\14\0\1\265"+
    "\3\0\2\265\6\0\26\266\14\0\1\266\3\0\2\266"+
    "\6\0\26\267\14\0\1\267\3\0\2\267\6\0\26\270"+
    "\14\0\1\270\3\0\2\270\6\0\26\271\14\0\1\271"+
    "\3\0\2\271\6\0\26\272\14\0\1\272\3\0\2\272"+
    "\6\0\26\273\14\0\1\273\3\0\2\273\6\0\26\274"+
    "\14\0\1\274\3\0\2\274\6\0\26\275\14\0\1\275"+
    "\3\0\2\275\6\0\26\276\14\0\1\276\3\0\2\276"+
    "\6\0\26\277\14\0\1\277\3\0\2\277\6\0\26\300"+
    "\14\0\1\300\3\0\2\300\6\0\26\301\14\0\1\301"+
    "\3\0\2\301\6\0\26\302\14\0\1\302\3\0\2\302"+
    "\6\0\26\303\14\0\1\303\3\0\2\303\6\0\26\304"+
    "\14\0\1\304\3\0\2\304\6\0\26\305\14\0\1\305"+
    "\3\0\2\305\6\0\26\306\14\0\1\306\3\0\2\306"+
    "\6\0\26\307\14\0\1\307\3\0\2\307\6\0\26\310"+
    "\14\0\1\310\3\0\2\310\6\0\26\311\14\0\1\311"+
    "\3\0\2\311\6\0\26\312\14\0\1\312\3\0\2\312"+
    "\6\0\26\313\14\0\1\313\3\0\2\313\6\0\26\314"+
    "\14\0\1\314\3\0\2\314\6\0\26\315\14\0\1\315"+
    "\3\0\2\315\6\0\26\316\14\0\1\316\3\0\2\316"+
    "\6\0\26\317\14\0\1\317\3\0\2\317\6\0\26\320"+
    "\14\0\1\320\3\0\2\320\6\0\26\321\14\0\1\321"+
    "\3\0\2\321\6\0\26\322\14\0\1\322\3\0\2\322"+
    "\6\0\26\323\14\0\1\323\3\0\2\323\6\0\26\324"+
    "\14\0\1\324\3\0\2\324\6\0\26\325\14\0\1\325"+
    "\3\0\2\325\6\0\26\326\14\0\1\326\3\0\2\326"+
    "\6\0\26\327\14\0\1\327\3\0\2\327\6\0\26\330"+
    "\14\0\1\330\3\0\2\330\6\0\26\331\14\0\1\331"+
    "\3\0\2\331\6\0\26\332\14\0\1\332\3\0\2\332"+
    "\6\0\26\333\14\0\1\333\3\0\2\333\6\0\26\334"+
    "\14\0\1\334\3\0\2\334\6\0\26\335\14\0\1\335"+
    "\3\0\2\335\6\0\26\336\14\0\1\336\3\0\2\336"+
    "\6\0\26\337\14\0\1\337\3\0\2\337\6\0\26\340"+
    "\14\0\1\340\3\0\2\340\6\0\26\341\14\0\1\341"+
    "\3\0\2\341\6\0\26\342\14\0\1\342\3\0\2\342"+
    "\6\0\26\343\14\0\1\343\3\0\2\343\6\0\26\344"+
    "\14\0\1\344\3\0\2\344\6\0\26\345\14\0\1\345"+
    "\3\0\2\345\6\0\26\346\14\0\1\346\3\0\2\346"+
    "\6\0\26\347\14\0\1\347\3\0\2\347\6\0\26\350"+
    "\14\0\1\350\3\0\2\350\6\0\26\351\14\0\1\351"+
    "\3\0\2\351\6\0\26\352\14\0\1\352\3\0\2\352"+
    "\6\0\26\353\14\0\1\353\3\0\2\353\6\0\26\354"+
    "\14\0\1\354\3\0\2\354\6\0\26\355\14\0\1\355"+
    "\3\0\2\355\6\0\26\356\14\0\1\356\3\0\2\356"+
    "\6\0\26\357\14\0\1\357\3\0\2\357\6\0\26\360"+
    "\14\0\1\360\3\0\2\360\6\0\26\361\14\0\1\361"+
    "\3\0\2\361\6\0\26\362\14\0\1\362\3\0\2\362"+
    "\6\0\26\363\14\0\1\363\3\0\2\363\6\0\26\364"+
    "\14\0\1\364\3\0\2\364\6\0\26\365\14\0\1\365"+
    "\3\0\2\365\6\0\26\366\14\0\1\366\3\0\2\366"+
    "\6\0\26\367\14\0\1\367\3\0\2\367\6\0\26\370"+
    "\14\0\1\370\3\0\2\370\6\0\26\371\14\0\1\371"+
    "\3\0\2\371\6\0\26\372\14\0\1\372\3\0\2\372"+
    "\6\0\26\373\14\0\1\373\3\0\2\373\6\0\26\374"+
    "\14\0\1\374\3\0\2\374\6\0\26\375\14\0\1\375"+
    "\3\0\2\375\6\0\26\376\14\0\1\376\3\0\2\376"+
    "\6\0\26\377\14\0\1\377\3\0\2\377\6\0\26\u0100"+
    "\14\0\1\u0100\3\0\2\u0100\6\0\26\u0101\14\0\1\u0101"+
    "\3\0\2\u0101\6\0\26\u0102\14\0\1\u0102\3\0\2\u0102"+
    "\6\0\26\u0103\14\0\1\u0103\3\0\2\u0103\6\0\26\u0104"+
    "\14\0\1\u0104\3\0\2\u0104\6\0\26\u0105\14\0\1\u0105"+
    "\3\0\2\u0105\6\0\26\u0106\14\0\1\u0106\3\0\2\u0106"+
    "\6\0\26\u0107\14\0\1\u0107\3\0\2\u0107\6\0\26\u0108"+
    "\14\0\1\u0108\3\0\2\u0108\6\0\26\u0109\14\0\1\u0109"+
    "\3\0\2\u0109\6\0\26\u010a\14\0\1\u010a\3\0\2\u010a"+
    "\6\0\26\u010b\14\0\1\u010b\3\0\2\u010b\6\0\26\u010c"+
    "\14\0\1\u010c\3\0\2\u010c\6\0\26\u010d\14\0\1\u010d"+
    "\3\0\2\u010d\6\0\26\u010e\14\0\1\u010e\3\0\2\u010e"+
    "\6\0\26\u010f\14\0\1\u010f\3\0\2\u010f\6\0\26\u0110"+
    "\14\0\1\u0110\3\0\2\u0110\6\0\26\u0111\14\0\1\u0111"+
    "\3\0\2\u0111\6\0\26\u0112\14\0\1\u0112\3\0\2\u0112"+
    "\6\0\26\u0113\14\0\1\u0113\3\0\2\u0113\6\0\26\u0114"+
    "\14\0\1\u0114\3\0\2\u0114\6\0\26\u0115\14\0\1\u0115"+
    "\3\0\2\u0115\6\0\26\u0116\14\0\1\u0116\3\0\2\u0116"+
    "\6\0\26\u0117\14\0\1\u0117\3\0\2\u0117\6\0\26\u0118"+
    "\14\0\1\u0118\3\0\2\u0118\6\0\26\u0119\14\0\1\u0119"+
    "\3\0\2\u0119\6\0\26\u011a\14\0\1\u011a\3\0\2\u011a"+
    "\6\0\26\u011b\14\0\1\u011b\3\0\2\u011b\6\0\26\u011c"+
    "\14\0\1\u011c\3\0\2\u011c\6\0\26\u011d\14\0\1\u011d"+
    "\3\0\2\u011d\6\0\26\u011e\14\0\1\u011e\3\0\2\u011e"+
    "\6\0\26\u011f\14\0\1\u011f\3\0\2\u011f\6\0\26\u0120"+
    "\14\0\1\u0120\3\0\2\u0120\6\0\26\u0121\14\0\1\u0121"+
    "\3\0\2\u0121\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\1\11\11\1\1\11\53\1\1\0"+
    "\1\1\2\0\1\11\1\1\1\0\35\1\2\0\25\1"+
    "\2\0\16\1\1\0\210\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private final TokenList tokenList;

    public TokenList getTokenList()
    {
        return this.tokenList;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      tokenList = new TokenList();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { Token token = new Token(yytext(), "ERROR", yyline, yycolumn);
    tokenList.addError(token);
    return token;
          }
        case 7: break;
        case 2: 
          { Token token = new Token(yytext(), "IDENTIFICADOR", yyline, yycolumn);
    tokenList.addToken(token);
    return token;
          }
        case 8: break;
        case 3: 
          { Token token = new Token(yytext(), "OPERADOR", yyline, yycolumn);
    tokenList.addToken(token);
    return token;
          }
        case 9: break;
        case 4: 
          { /*Ignore*/
          }
        case 10: break;
        case 5: 
          { Token token = new Token(yytext(), "LITERAL", yyline, yycolumn);
    tokenList.addToken(token);
    return token;
          }
        case 11: break;
        case 6: 
          { Token token = new Token(yytext(), "PALABRA RESERVADA", yyline, yycolumn);
    tokenList.addToken(token);
    return token;
          }
        case 12: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
