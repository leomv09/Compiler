package scanner.lexer;

import java_cup.runtime.*;
import java.io.Reader;
import java.io.FileReader;

class Parser;

parser code {:

    public static void main(String[] args)
    {
        try
        {
            Reader reader = new FileReader(args[0]);
            Lexer scanner = new Lexer(reader);
            Parser parser = new Parser(scanner);
            Object result = parser.parse().value;
            System.out.println(result);
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
    }

:};

/* Terminals (tokens returned by the scanner). */

// Paréntesis.
terminal LPAREN, RPAREN, LBRACKET, RBRACKET;

// Operadores aritméticos.
terminal PLUS, MINUS, DIV, TIMES, MOD, PLUS_EQUALS, MINUS_EQUALS, DIV_EQUALS, TIMES_EQUALS;

// Operadores de comparación.
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_EQUALS_THAN, GREATER_LESS_THAN, OR, AND, NOT, XOR;

// Operadores de bit.
terminal SHIFT_LEFT, SHIFT_RIGHT, SHIFT_LEFT_EQUALS, SHIFT_RIGHT_EQUALS;

// Operadores de asignación.
terminal ASSIGNMENT;

// Palabras reservadas.
terminal ARRAY, BEGIN, BOOLEAN, BYTE, CASE, CHAR, CONST, DO, DOWNTO, ELSE, END, FALSE, FILE, FOR, FORWARD, FUNCTION, GOTO, IF, IN, INLINE, INT, LABEL, LONGINT, NIL, OF, PACKED, PROCEDURE, PROGRAM, READ, REAL, RECORD, REPEAT, SET, SHORTINT, STRING, THEN, TO, TRUE, TYPE, UNTIL, VAR, WHILE, WITH, WRITE

terminal Integer NUMBER;
terminal Double DOUBLE;
terminal String XTRING;
terminal Character CHARACTER;
terminal String IDENTIFIER;

/* Non terminals */
non terminal Integer expr;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIV;

expr  ::= expr:e1 PLUS  expr:e2         {: RESULT = e1 + e2; :}
        | expr:e1 MINUS expr:e2         {: RESULT = e1 - e2; :}
        | expr:e1 TIMES expr:e2         {: RESULT = e1 * e2; :}
        | expr:e1 DIV expr:e2           {: RESULT = e1 / e2; :}
        | MINUS expr:e                  {: RESULT = -e;      :}
        | NUMBER:n                      {: RESULT = n;       :};
